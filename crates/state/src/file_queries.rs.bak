//! Database queries for file-level content addressable storage

use crate::file_models::{
    DeduplicationResult, FileMetadata, FileObject, FileReference, FileStorageStats,
    FileVerificationCache, InstalledFile, PackageFileEntry,
};
use sps2_errors::{Error, StateError};
use sps2_hash::Hash;
use sqlx::{Executor, Sqlite, Transaction};

/// Add a file object to the database
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn add_file_object<'e, E>(
    executor: E,
    hash: &Hash,
    metadata: &FileMetadata,
) -> Result<DeduplicationResult, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = hash.to_hex();
    let now = chrono::Utc::now().timestamp();

    // Check if file already exists
    let existing = sqlx::query_as!(
        FileObject,
        r#"
        SELECT 
            hash,
            size,
            created_at,
            ref_count,
            is_executable as "is_executable: bool",
            is_symlink as "is_symlink: bool",
            symlink_target
        FROM file_objects
        WHERE hash = ?
        "#,
        hash_str
    )
    .fetch_optional(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to check existing file object: {e}"),
    })?;

    if let Some(existing) = existing {
        // Increment reference count
        sqlx::query!(
            "UPDATE file_objects SET ref_count = ref_count + 1 WHERE hash = ?",
            hash_str
        )
        .execute(executor)
        .await
        .map_err(|e| StateError::DatabaseError {
            message: format!("failed to increment ref count: {e}"),
        })?;

        Ok(DeduplicationResult {
            hash: *hash,
            was_duplicate: true,
            ref_count: existing.ref_count + 1,
            space_saved: metadata.size,
        })
    } else {
        // Insert new file object
        sqlx::query!(
            r#"
            INSERT INTO file_objects (
                hash, size, created_at, ref_count, 
                is_executable, is_symlink, symlink_target
            ) VALUES (?, ?, ?, 1, ?, ?, ?)
            "#,
            hash_str,
            metadata.size,
            now,
            metadata.is_executable,
            metadata.is_symlink,
            metadata.symlink_target
        )
        .execute(executor)
        .await
        .map_err(|e| StateError::DatabaseError {
            message: format!("failed to insert file object: {e}"),
        })?;

        Ok(DeduplicationResult {
            hash: *hash,
            was_duplicate: false,
            ref_count: 1,
            space_saved: 0,
        })
    }
}

/// Add a package file entry
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn add_package_file_entry<'e, E>(
    executor: E,
    package_id: i64,
    file_ref: &FileReference,
) -> Result<i64, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = file_ref.hash.to_hex();

    let result = sqlx::query!(
        r#"
        INSERT INTO package_file_entries (
            package_id, file_hash, relative_path, permissions,
            uid, gid, mtime
        ) VALUES (?, ?, ?, ?, ?, ?, ?)
        "#,
        package_id,
        hash_str,
        file_ref.relative_path,
        file_ref.metadata.permissions,
        file_ref.metadata.uid,
        file_ref.metadata.gid,
        file_ref.metadata.mtime
    )
    .execute(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to insert package file entry: {e}"),
    })?;

    Ok(result.last_insert_rowid())
}

/// Add an installed file record
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn add_installed_file<'e, E>(
    executor: E,
    state_id: &str,
    package_id: i64,
    file_hash: &Hash,
    installed_path: &str,
    is_directory: bool,
) -> Result<i64, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = file_hash.to_hex();

    let result = sqlx::query!(
        r#"
        INSERT INTO installed_files (
            state_id, package_id, file_hash, installed_path, is_directory
        ) VALUES (?, ?, ?, ?, ?)
        "#,
        state_id,
        package_id,
        hash_str,
        installed_path,
        is_directory
    )
    .execute(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to insert installed file: {e}"),
    })?;

    Ok(result.last_insert_rowid())
}

/// Get file object by hash
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn get_file_object<'e, E>(
    executor: E,
    hash: &Hash,
) -> Result<Option<FileObject>, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = hash.to_hex();

    sqlx::query_as!(
        FileObject,
        r#"
        SELECT 
            hash,
            size,
            created_at,
            ref_count,
            is_executable as "is_executable: bool",
            is_symlink as "is_symlink: bool",
            symlink_target
        FROM file_objects
        WHERE hash = ?
        "#,
        hash_str
    )
    .fetch_optional(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to get file object: {e}"),
    }.into())
}

/// Get all file entries for a package
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn get_package_file_entries<'e, E>(
    executor: E,
    package_id: i64,
) -> Result<Vec<PackageFileEntry>, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    sqlx::query_as!(
        PackageFileEntry,
        r#"
        SELECT 
            id,
            package_id,
            file_hash,
            relative_path,
            permissions,
            uid,
            gid,
            mtime
        FROM package_file_entries
        WHERE package_id = ?
        ORDER BY relative_path
        "#,
        package_id
    )
    .fetch_all(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to get package files: {e}"),
    }.into())
}

/// Get installed files for a state
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn get_installed_files<'e, E>(
    executor: E,
    state_id: &str,
) -> Result<Vec<InstalledFile>, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    sqlx::query_as!(
        InstalledFile,
        r#"
        SELECT 
            id,
            state_id,
            package_id,
            file_hash,
            installed_path,
            is_directory as "is_directory: bool"
        FROM installed_files
        WHERE state_id = ?
        ORDER BY installed_path
        "#,
        state_id
    )
    .fetch_all(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to get installed files: {e}"),
    }.into())
}

/// Add or update file verification cache entry
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn update_verification_cache<'e, E>(
    executor: E,
    file_hash: &Hash,
    installed_path: &str,
    is_valid: bool,
    error_message: Option<&str>,
) -> Result<(), Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = file_hash.to_hex();
    let now = chrono::Utc::now().timestamp();

    sqlx::query!(
        r#"
        INSERT OR REPLACE INTO file_verification_cache (
            file_hash, installed_path, verified_at, is_valid, error_message
        ) VALUES (?, ?, ?, ?, ?)
        "#,
        hash_str,
        installed_path,
        now,
        is_valid,
        error_message
    )
    .execute(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to update verification cache: {e}"),
    })?;

    Ok(())
}

/// Get verification cache entry
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn get_verification_cache<'e, E>(
    executor: E,
    file_hash: &Hash,
    installed_path: &str,
) -> Result<Option<FileVerificationCache>, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = file_hash.to_hex();

    sqlx::query_as!(
        FileVerificationCache,
        r#"
        SELECT 
            file_hash,
            installed_path,
            verified_at,
            is_valid as "is_valid: bool",
            error_message
        FROM file_verification_cache
        WHERE file_hash = ? AND installed_path = ?
        "#,
        hash_str,
        installed_path
    )
    .fetch_optional(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to get verification cache: {e}"),
    }.into())
}

/// Clean old verification cache entries
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn clean_verification_cache<'e, E>(
    executor: E,
    older_than_seconds: i64,
) -> Result<u64, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let cutoff = chrono::Utc::now().timestamp() - older_than_seconds;

    let result = sqlx::query!(
        "DELETE FROM file_verification_cache WHERE verified_at < ?",
        cutoff
    )
    .execute(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to clean verification cache: {e}"),
    })?;

    Ok(result.rows_affected())
}

/// Get file storage statistics
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn get_file_storage_stats<'e, E>(
    executor: E,
) -> Result<FileStorageStats, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    #[derive(sqlx::FromRow)]
    struct StatsRow {
        total_files: i64,
        unique_files: i64,
        total_size: i64,
        deduplicated_size: i64,
    }

    let stats = sqlx::query_as::<_, StatsRow>(
        r#"
        SELECT 
            COUNT(*) as total_files,
            COUNT(DISTINCT file_hash) as unique_files,
            SUM(fo.size) as total_size,
            SUM(DISTINCT fo.size) as deduplicated_size
        FROM package_file_entries pfe
        JOIN file_objects fo ON pfe.file_hash = fo.hash
        "#
    )
    .fetch_one(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to get storage stats: {e}"),
    })?;

    let deduplication_ratio = if stats.total_size > 0 {
        stats.deduplicated_size as f64 / stats.total_size as f64
    } else {
        1.0
    };

    Ok(FileStorageStats {
        total_files: stats.total_files,
        unique_files: stats.unique_files,
        total_size: stats.total_size,
        deduplicated_size: stats.deduplicated_size,
        deduplication_ratio,
    })
}

/// Decrement file reference count
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn decrement_file_ref_count<'e, E>(
    executor: E,
    hash: &Hash,
) -> Result<i64, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = hash.to_hex();

    sqlx::query!(
        "UPDATE file_objects SET ref_count = ref_count - 1 WHERE hash = ? AND ref_count > 0",
        hash_str
    )
    .execute(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to decrement ref count: {e}"),
    })?;

    // Get the new ref count
    let result = sqlx::query!("SELECT ref_count FROM file_objects WHERE hash = ?", hash_str)
        .fetch_optional(executor)
        .await
        .map_err(|e| StateError::DatabaseError {
            message: format!("failed to get ref count: {e}"),
        })?;

    Ok(result.map(|r| r.ref_count).unwrap_or(0))
}

/// Find unreferenced file objects (for garbage collection)
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn find_unreferenced_files<'e, E>(
    executor: E,
    limit: i64,
) -> Result<Vec<FileObject>, Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    sqlx::query_as!(
        FileObject,
        r#"
        SELECT 
            hash,
            size,
            created_at,
            ref_count,
            is_executable as "is_executable: bool",
            is_symlink as "is_symlink: bool",
            symlink_target
        FROM file_objects
        WHERE ref_count = 0
        ORDER BY created_at
        LIMIT ?
        "#,
        limit
    )
    .fetch_all(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to find unreferenced files: {e}"),
    }.into())
}

/// Remove file object from database
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn remove_file_object<'e, E>(
    executor: E,
    hash: &Hash,
) -> Result<(), Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = hash.to_hex();

    sqlx::query!("DELETE FROM file_objects WHERE hash = ?", hash_str)
        .execute(executor)
        .await
        .map_err(|e| StateError::DatabaseError {
            message: format!("failed to remove file object: {e}"),
        })?;

    Ok(())
}

/// Mark package as having file-level hashes
///
/// # Errors
///
/// Returns an error if the database operation fails
pub async fn mark_package_file_hashed<'e, E>(
    executor: E,
    package_id: i64,
    computed_hash: &Hash,
) -> Result<(), Error>
where
    E: Executor<'e, Database = Sqlite>,
{
    let hash_str = computed_hash.to_hex();

    sqlx::query!(
        r#"
        UPDATE packages 
        SET has_file_hashes = 1, computed_hash = ?
        WHERE id = ?
        "#,
        hash_str,
        package_id
    )
    .execute(executor)
    .await
    .map_err(|e| StateError::DatabaseError {
        message: format!("failed to mark package as file-hashed: {e}"),
    })?;

    Ok(())
}

/// Begin a file storage transaction
///
/// # Errors
///
/// Returns an error if the transaction cannot be started
pub async fn begin_file_transaction(
    pool: &sqlx::Pool<Sqlite>,
) -> Result<Transaction<'_, Sqlite>, Error> {
    pool.begin().await.map_err(|e| StateError::DatabaseError {
        message: format!("failed to begin transaction: {e}"),
    }.into())
}