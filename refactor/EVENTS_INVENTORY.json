{
  "base": "crates/events/src",
  "items": [
    {
      "kind": "enum",
      "name": "AcquisitionEvent",
      "module": "events::acquisition",
      "path": "crates/events/src/events/acquisition.rs",
      "start_line": 9,
      "doc": [
        "Package acquisition domain events - higher-level package acquisition from various sources"
      ],
      "definition": "pub enum AcquisitionEvent {\n    /// Package acquisition started\n    Started {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        destination: PathBuf,\n        verification_required: bool,\n    },\n\n    /// Package acquisition completed successfully\n    Completed {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        final_path: PathBuf,\n        size: u64,\n        duration: Duration,\n        verification_passed: bool,\n    },\n\n    /// Package acquisition failed\n    Failed {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        error: String,\n        retry_possible: bool,\n        partial_download: bool,\n    },\n\n    /// Remote download acquisition started\n    DownloadStarted {\n        package: String,\n        version: Version,\n        url: String,\n        resume_possible: bool,\n        expected_size: Option<u64>,\n    },\n\n    /// Download progress update\n    DownloadProgress {\n        package: String,\n        bytes_downloaded: u64,\n        total_bytes: Option<u64>,\n        current_speed: f64,\n        eta: Option<Duration>,\n    },\n\n    /// Remote download completed\n    DownloadCompleted {\n        package: String,\n        version: Version,\n        url: String,\n        final_size: u64,\n        average_speed: f64,\n        total_time: Duration,\n    },\n\n    /// Local file acquisition started\n    LocalFileProcessingStarted {\n        package: String,\n        version: Option<Version>, // May be unknown initially\n        file_path: PathBuf,\n        file_size: u64,\n    },\n\n    /// Local file validation progress\n    LocalFileValidationProgress {\n        file_path: PathBuf,\n        validation_type: String,\n        progress_percent: f64,\n    },\n\n    /// Local file processed successfully\n    LocalFileProcessingCompleted {\n        package: String,\n        version: Version,\n        source_path: PathBuf,\n        destination_path: PathBuf,\n        validation_results: Vec<ValidationResult>,\n    },\n\n    /// Local file processing failed\n    LocalFileProcessingFailed {\n        file_path: PathBuf,\n        error: String,\n        validation_failures: Vec<String>,\n    },\n\n    /// Cache lookup started\n    CacheLookupStarted {\n        package: String,\n        version: Version,\n        cache_locations: Vec<PathBuf>,\n    },\n\n    /// Cache hit found\n    CacheHit {\n        package: String,\n        version: Version,\n        cache_location: PathBuf,\n        cache_age: Duration,\n        needs_refresh: bool,\n    },\n\n    /// Cache miss, need to acquire from source\n    CacheMiss {\n        package: String,\n        version: Version,\n        searched_locations: Vec<PathBuf>,\n        fallback_source: AcquisitionSource,\n    },\n\n    /// Cache storage started\n    CacheStorageStarted {\n        package: String,\n        version: Version,\n        source_path: PathBuf,\n        cache_location: PathBuf,\n    },\n\n    /// Cache storage completed\n    CacheStorageCompleted {\n        package: String,\n        version: Version,\n        cache_location: PathBuf,\n        storage_duration: Duration,\n    },\n\n    /// Package verification started\n    VerificationStarted {\n        package: String,\n        version: Version,\n        file_path: PathBuf,\n        verification_types: Vec<VerificationType>,\n    },\n\n    /// Verification progress update\n    VerificationProgress {\n        package: String,\n        verifications_completed: usize,\n        total_verifications: usize,\n        current_verification: VerificationType,\n    },\n\n    /// Package verification completed\n    VerificationCompleted {\n        package: String,\n        version: Version,\n        file_path: PathBuf,\n        verification_results: Vec<ValidationResult>,\n        overall_passed: bool,\n    },\n\n    /// Package verification failed\n    VerificationFailed {\n        package: String,\n        version: Version,\n        file_path: PathBuf,\n        failed_verification: VerificationType,\n        error: String,\n        security_risk: bool,\n    },\n\n    /// Checksum verification started\n    ChecksumVerificationStarted {\n        package: String,\n        version: Version,\n        algorithm: String,\n        expected_hash: String,\n    },\n\n    /// Checksum verification completed\n    ChecksumVerificationCompleted {\n        package: String,\n        version: Version,\n        algorithm: String,\n        expected_hash: String,\n        computed_hash: String,\n        verification_time: Duration,\n        matched: bool,\n    },\n\n    /// Checksum mismatch detected\n    ChecksumMismatch {\n        package: String,\n        version: Version,\n        algorithm: String,\n        expected: String,\n        actual: String,\n        action_taken: String, // \"quarantined\", \"deleted\", \"marked_suspicious\"\n    },\n\n    /// Signature verification started\n    SignatureVerificationStarted {\n        package: String,\n        version: Version,\n        signature_file: PathBuf,\n        public_key_source: String,\n    },\n\n    /// Signature verification completed\n    SignatureVerificationCompleted {\n        package: String,\n        version: Version,\n        signature_valid: bool,\n        signer_identity: Option<String>,\n        verification_time: Duration,\n    },\n\n    /// Signature verification failed\n    SignatureVerificationFailed {\n        package: String,\n        version: Version,\n        error: String,\n        signature_file: Option<PathBuf>,\n        security_implications: Vec<String>,\n    },\n\n    /// Batch acquisition started\n    BatchAcquisitionStarted {\n        packages: Vec<(String, Version)>,\n        operation_id: String,\n        sources: Vec<AcquisitionSource>,\n        concurrent_limit: usize,\n    },\n\n    /// Batch acquisition progress\n    BatchAcquisitionProgress {\n        operation_id: String,\n        completed_packages: usize,\n        failed_packages: usize,\n        in_progress_packages: usize,\n        remaining_packages: usize,\n        total_bytes_acquired: u64,\n    },\n\n    /// Batch acquisition completed\n    BatchAcquisitionCompleted {\n        operation_id: String,\n        successful_packages: Vec<(String, Version)>,\n        failed_packages: Vec<(String, Version, String)>, // (package, version, error)\n        total_duration: Duration,\n        total_size: u64,\n        cache_hits: usize,\n    },\n\n    /// Source availability check\n    SourceAvailabilityCheck {\n        source: AcquisitionSource,\n        available: bool,\n        response_time: Option<Duration>,\n        error: Option<String>,\n    },\n\n    /// Source failover triggered\n    SourceFailover {\n        package: String,\n        version: Version,\n        failed_source: AcquisitionSource,\n        fallback_source: AcquisitionSource,\n        reason: String,\n    },\n\n    /// Quota limit approached\n    QuotaWarning {\n        source: AcquisitionSource,\n        quota_type: String, // \"bandwidth\", \"requests\", \"storage\"\n        current_usage: u64,\n        limit: u64,\n        reset_time: Option<Duration>,\n    },\n\n    /// Quota limit exceeded\n    QuotaExceeded {\n        source: AcquisitionSource,\n        quota_type: String,\n        retry_after: Option<Duration>,\n        fallback_available: bool,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 11,
          "doc": [
            "Package acquisition started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsource: AcquisitionSource,\ndestination: PathBuf,\nverification_required: bool,\n}"
        },
        {
          "name": "Completed",
          "start_line": 20,
          "doc": [
            "Package acquisition completed successfully"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsource: AcquisitionSource,\nfinal_path: PathBuf,\nsize: u64,\nduration: Duration,\nverification_passed: bool,\n}"
        },
        {
          "name": "Failed",
          "start_line": 31,
          "doc": [
            "Package acquisition failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsource: AcquisitionSource,\nerror: String,\nretry_possible: bool,\npartial_download: bool,\n}"
        },
        {
          "name": "DownloadStarted",
          "start_line": 41,
          "doc": [
            "Remote download acquisition started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nurl: String,\nresume_possible: bool,\nexpected_size: Option<u64>,\n}"
        },
        {
          "name": "DownloadProgress",
          "start_line": 50,
          "doc": [
            "Download progress update"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nbytes_downloaded: u64,\ntotal_bytes: Option<u64>,\ncurrent_speed: f64,\neta: Option<Duration>,\n}"
        },
        {
          "name": "DownloadCompleted",
          "start_line": 59,
          "doc": [
            "Remote download completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nurl: String,\nfinal_size: u64,\naverage_speed: f64,\ntotal_time: Duration,\n}"
        },
        {
          "name": "LocalFileProcessingStarted",
          "start_line": 69,
          "doc": [
            "Local file acquisition started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Option<Version>, // May be unknown initially\nfile_path: PathBuf,\nfile_size: u64,\n}"
        },
        {
          "name": "LocalFileValidationProgress",
          "start_line": 77,
          "doc": [
            "Local file validation progress"
          ],
          "attributes": [],
          "payload": "{\nfile_path: PathBuf,\nvalidation_type: String,\nprogress_percent: f64,\n}"
        },
        {
          "name": "LocalFileProcessingCompleted",
          "start_line": 84,
          "doc": [
            "Local file processed successfully"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsource_path: PathBuf,\ndestination_path: PathBuf,\nvalidation_results: Vec<ValidationResult>,\n}"
        },
        {
          "name": "LocalFileProcessingFailed",
          "start_line": 93,
          "doc": [
            "Local file processing failed"
          ],
          "attributes": [],
          "payload": "{\nfile_path: PathBuf,\nerror: String,\nvalidation_failures: Vec<String>,\n}"
        },
        {
          "name": "CacheLookupStarted",
          "start_line": 100,
          "doc": [
            "Cache lookup started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ncache_locations: Vec<PathBuf>,\n}"
        },
        {
          "name": "CacheHit",
          "start_line": 107,
          "doc": [
            "Cache hit found"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ncache_location: PathBuf,\ncache_age: Duration,\nneeds_refresh: bool,\n}"
        },
        {
          "name": "CacheMiss",
          "start_line": 116,
          "doc": [
            "Cache miss, need to acquire from source"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsearched_locations: Vec<PathBuf>,\nfallback_source: AcquisitionSource,\n}"
        },
        {
          "name": "CacheStorageStarted",
          "start_line": 124,
          "doc": [
            "Cache storage started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsource_path: PathBuf,\ncache_location: PathBuf,\n}"
        },
        {
          "name": "CacheStorageCompleted",
          "start_line": 132,
          "doc": [
            "Cache storage completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ncache_location: PathBuf,\nstorage_duration: Duration,\n}"
        },
        {
          "name": "VerificationStarted",
          "start_line": 140,
          "doc": [
            "Package verification started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfile_path: PathBuf,\nverification_types: Vec<VerificationType>,\n}"
        },
        {
          "name": "VerificationProgress",
          "start_line": 148,
          "doc": [
            "Verification progress update"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nverifications_completed: usize,\ntotal_verifications: usize,\ncurrent_verification: VerificationType,\n}"
        },
        {
          "name": "VerificationCompleted",
          "start_line": 156,
          "doc": [
            "Package verification completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfile_path: PathBuf,\nverification_results: Vec<ValidationResult>,\noverall_passed: bool,\n}"
        },
        {
          "name": "VerificationFailed",
          "start_line": 165,
          "doc": [
            "Package verification failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfile_path: PathBuf,\nfailed_verification: VerificationType,\nerror: String,\nsecurity_risk: bool,\n}"
        },
        {
          "name": "ChecksumVerificationStarted",
          "start_line": 175,
          "doc": [
            "Checksum verification started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nalgorithm: String,\nexpected_hash: String,\n}"
        },
        {
          "name": "ChecksumVerificationCompleted",
          "start_line": 183,
          "doc": [
            "Checksum verification completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nalgorithm: String,\nexpected_hash: String,\ncomputed_hash: String,\nverification_time: Duration,\nmatched: bool,\n}"
        },
        {
          "name": "ChecksumMismatch",
          "start_line": 194,
          "doc": [
            "Checksum mismatch detected"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nalgorithm: String,\nexpected: String,\nactual: String,\naction_taken: String, // \"quarantined\", \"deleted\", \"marked_suspicious\"\n}"
        },
        {
          "name": "SignatureVerificationStarted",
          "start_line": 204,
          "doc": [
            "Signature verification started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsignature_file: PathBuf,\npublic_key_source: String,\n}"
        },
        {
          "name": "SignatureVerificationCompleted",
          "start_line": 212,
          "doc": [
            "Signature verification completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsignature_valid: bool,\nsigner_identity: Option<String>,\nverification_time: Duration,\n}"
        },
        {
          "name": "SignatureVerificationFailed",
          "start_line": 221,
          "doc": [
            "Signature verification failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nerror: String,\nsignature_file: Option<PathBuf>,\nsecurity_implications: Vec<String>,\n}"
        },
        {
          "name": "BatchAcquisitionStarted",
          "start_line": 230,
          "doc": [
            "Batch acquisition started"
          ],
          "attributes": [],
          "payload": "{\npackages: Vec<(String, Version)>,\noperation_id: String,\nsources: Vec<AcquisitionSource>,\nconcurrent_limit: usize,\n}"
        },
        {
          "name": "BatchAcquisitionProgress",
          "start_line": 238,
          "doc": [
            "Batch acquisition progress"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ncompleted_packages: usize,\nfailed_packages: usize,\nin_progress_packages: usize,\nremaining_packages: usize,\ntotal_bytes_acquired: u64,\n}"
        },
        {
          "name": "BatchAcquisitionCompleted",
          "start_line": 248,
          "doc": [
            "Batch acquisition completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nsuccessful_packages: Vec<(String, Version)>,\nfailed_packages: Vec<(String, Version, String)>, // (package, version, error)\ntotal_duration: Duration,\ntotal_size: u64,\ncache_hits: usize,\n}"
        },
        {
          "name": "SourceAvailabilityCheck",
          "start_line": 258,
          "doc": [
            "Source availability check"
          ],
          "attributes": [],
          "payload": "{\nsource: AcquisitionSource,\navailable: bool,\nresponse_time: Option<Duration>,\nerror: Option<String>,\n}"
        },
        {
          "name": "SourceFailover",
          "start_line": 266,
          "doc": [
            "Source failover triggered"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfailed_source: AcquisitionSource,\nfallback_source: AcquisitionSource,\nreason: String,\n}"
        },
        {
          "name": "QuotaWarning",
          "start_line": 275,
          "doc": [
            "Quota limit approached"
          ],
          "attributes": [],
          "payload": "{\nsource: AcquisitionSource,\nquota_type: String, // \"bandwidth\", \"requests\", \"storage\"\ncurrent_usage: u64,\nlimit: u64,\nreset_time: Option<Duration>,\n}"
        },
        {
          "name": "QuotaExceeded",
          "start_line": 284,
          "doc": [
            "Quota limit exceeded"
          ],
          "attributes": [],
          "payload": "{\nsource: AcquisitionSource,\nquota_type: String,\nretry_after: Option<Duration>,\nfallback_available: bool,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "AcquisitionSource",
      "module": "events::acquisition",
      "path": "crates/events/src/events/acquisition.rs",
      "start_line": 295,
      "doc": [
        "Package acquisition sources"
      ],
      "definition": "pub enum AcquisitionSource {\n    /// Remote HTTP/HTTPS download\n    Remote { url: String, mirror_priority: u8 },\n    /// Local file system\n    Local { path: PathBuf },\n    /// Local package cache\n    Cache {\n        cache_type: String, // \"global\", \"user\", \"project\"\n        location: PathBuf,\n    },\n    /// Network file share\n    NetworkShare {\n        protocol: String, // \"nfs\", \"smb\", \"ftp\"\n        location: String,\n    },\n    /// Git repository\n    GitRepository {\n        url: String,\n        branch: Option<String>,\n        commit: Option<String>,\n    },\n}",
      "variants": [
        {
          "name": "Remote",
          "start_line": 297,
          "doc": [
            "Remote HTTP/HTTPS download"
          ],
          "attributes": [],
          "payload": "{ url: String, mirror_priority: u8 }"
        },
        {
          "name": "Local",
          "start_line": 299,
          "doc": [
            "Local file system"
          ],
          "attributes": [],
          "payload": "{ path: PathBuf }"
        },
        {
          "name": "Cache",
          "start_line": 301,
          "doc": [
            "Local package cache"
          ],
          "attributes": [],
          "payload": "{\ncache_type: String, // \"global\", \"user\", \"project\"\nlocation: PathBuf,\n}"
        },
        {
          "name": "NetworkShare",
          "start_line": 306,
          "doc": [
            "Network file share"
          ],
          "attributes": [],
          "payload": "{\nprotocol: String, // \"nfs\", \"smb\", \"ftp\"\nlocation: String,\n}"
        },
        {
          "name": "GitRepository",
          "start_line": 311,
          "doc": [
            "Git repository"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\nbranch: Option<String>,\ncommit: Option<String>,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "VerificationType",
      "module": "events::acquisition",
      "path": "crates/events/src/events/acquisition.rs",
      "start_line": 321,
      "doc": [
        "Types of package verification"
      ],
      "definition": "pub enum VerificationType {\n    /// BLAKE3/SHA256 checksum verification\n    Checksum,\n    /// Digital signature verification\n    Signature,\n    /// Package format validation\n    FormatValidation,\n    /// Manifest consistency check\n    ManifestValidation,\n    /// Virus/malware scanning\n    SecurityScanning,\n    /// File integrity check\n    FileIntegrity,\n}",
      "variants": [
        {
          "name": "Checksum",
          "start_line": 323,
          "doc": [
            "BLAKE3/SHA256 checksum verification"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Signature",
          "start_line": 325,
          "doc": [
            "Digital signature verification"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "FormatValidation",
          "start_line": 327,
          "doc": [
            "Package format validation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "ManifestValidation",
          "start_line": 329,
          "doc": [
            "Manifest consistency check"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "SecurityScanning",
          "start_line": 331,
          "doc": [
            "Virus/malware scanning"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "FileIntegrity",
          "start_line": 333,
          "doc": [
            "File integrity check"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "ValidationResult",
      "module": "events::acquisition",
      "path": "crates/events/src/events/acquisition.rs",
      "start_line": 338,
      "doc": [
        "Verification result for individual checks"
      ],
      "definition": "pub struct ValidationResult {\n    pub verification_type: VerificationType,\n    pub passed: bool,\n    pub message: String,\n    pub details: Option<String>,\n    pub warning_level: ValidationWarningLevel,\n}"
    },
    {
      "kind": "enum",
      "name": "ValidationWarningLevel",
      "module": "events::acquisition",
      "path": "crates/events/src/events/acquisition.rs",
      "start_line": 349,
      "doc": [
        "Warning levels for validation results"
      ],
      "definition": "pub enum ValidationWarningLevel {\n    /// No issues\n    None,\n    /// Minor issues that don't affect functionality\n    Low,\n    /// Issues that might affect functionality\n    Medium,\n    /// Serious issues that affect functionality\n    High,\n    /// Critical security or integrity issues\n    Critical,\n}",
      "variants": [
        {
          "name": "None",
          "start_line": 351,
          "doc": [
            "No issues"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Low",
          "start_line": 353,
          "doc": [
            "Minor issues that don't affect functionality"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Medium",
          "start_line": 355,
          "doc": [
            "Issues that might affect functionality"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "High",
          "start_line": 357,
          "doc": [
            "Serious issues that affect functionality"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Critical",
          "start_line": 359,
          "doc": [
            "Critical security or integrity issues"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "AuditEvent",
      "module": "events::audit",
      "path": "crates/events/src/events/audit.rs",
      "start_line": 6,
      "doc": [
        "Audit and vulnerability scanning events"
      ],
      "definition": "pub enum AuditEvent {\n    /// Audit scan starting\n    Starting { package_count: usize },\n\n    /// Audit scan progress\n    ScanProgress {\n        packages_scanned: usize,\n        total_packages: usize,\n    },\n\n    /// Audit package completed\n    PackageCompleted {\n        package: String,\n        vulnerabilities_found: usize,\n    },\n\n    /// Audit scan completed\n    Completed {\n        packages_scanned: usize,\n        vulnerabilities_found: usize,\n        critical_count: usize,\n    },\n\n    /// Vulnerability database update starting\n    VulnDbUpdateStarting,\n\n    /// Vulnerability database source update starting\n    VulnDbSourceUpdateStarting { source: String },\n\n    /// Vulnerability database source update progress\n    VulnDbSourceUpdateProgress {\n        source: String,\n        processed: usize,\n        total: Option<usize>,\n    },\n\n    /// Vulnerability database source update completed\n    VulnDbSourceUpdateCompleted {\n        source: String,\n        vulnerabilities_added: usize,\n        duration_ms: u64,\n    },\n\n    /// Vulnerability database source update failed\n    VulnDbSourceUpdateFailed { source: String, error: String },\n\n    /// Vulnerability database update completed\n    VulnDbUpdateCompleted {\n        total_vulnerabilities: usize,\n        sources_updated: usize,\n        duration_ms: u64,\n    },\n\n    /// Vulnerability database statistics updated\n    VulnDbStatisticsUpdated {\n        vulnerability_count: usize,\n        size_bytes: u64,\n    },\n}",
      "variants": [
        {
          "name": "Starting",
          "start_line": 8,
          "doc": [
            "Audit scan starting"
          ],
          "attributes": [],
          "payload": "{ package_count: usize }"
        },
        {
          "name": "ScanProgress",
          "start_line": 11,
          "doc": [
            "Audit scan progress"
          ],
          "attributes": [],
          "payload": "{\npackages_scanned: usize,\ntotal_packages: usize,\n}"
        },
        {
          "name": "PackageCompleted",
          "start_line": 17,
          "doc": [
            "Audit package completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nvulnerabilities_found: usize,\n}"
        },
        {
          "name": "Completed",
          "start_line": 23,
          "doc": [
            "Audit scan completed"
          ],
          "attributes": [],
          "payload": "{\npackages_scanned: usize,\nvulnerabilities_found: usize,\ncritical_count: usize,\n}"
        },
        {
          "name": "VulnDbUpdateStarting",
          "start_line": 30,
          "doc": [
            "Vulnerability database update starting"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "VulnDbSourceUpdateStarting",
          "start_line": 33,
          "doc": [
            "Vulnerability database source update starting"
          ],
          "attributes": [],
          "payload": "{ source: String }"
        },
        {
          "name": "VulnDbSourceUpdateProgress",
          "start_line": 36,
          "doc": [
            "Vulnerability database source update progress"
          ],
          "attributes": [],
          "payload": "{\nsource: String,\nprocessed: usize,\ntotal: Option<usize>,\n}"
        },
        {
          "name": "VulnDbSourceUpdateCompleted",
          "start_line": 43,
          "doc": [
            "Vulnerability database source update completed"
          ],
          "attributes": [],
          "payload": "{\nsource: String,\nvulnerabilities_added: usize,\nduration_ms: u64,\n}"
        },
        {
          "name": "VulnDbSourceUpdateFailed",
          "start_line": 50,
          "doc": [
            "Vulnerability database source update failed"
          ],
          "attributes": [],
          "payload": "{ source: String, error: String }"
        },
        {
          "name": "VulnDbUpdateCompleted",
          "start_line": 53,
          "doc": [
            "Vulnerability database update completed"
          ],
          "attributes": [],
          "payload": "{\ntotal_vulnerabilities: usize,\nsources_updated: usize,\nduration_ms: u64,\n}"
        },
        {
          "name": "VulnDbStatisticsUpdated",
          "start_line": 60,
          "doc": [
            "Vulnerability database statistics updated"
          ],
          "attributes": [],
          "payload": "{\nvulnerability_count: usize,\nsize_bytes: u64,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "BuildSystem",
      "module": "events::build",
      "path": "crates/events/src/events/build.rs",
      "start_line": 9,
      "doc": [
        "Build system types supported by sps2"
      ],
      "definition": "pub enum BuildSystem {\n    Autotools,\n    CMake,\n    Cargo,\n    Make,\n    Ninja,\n    Custom,\n}",
      "variants": [
        {
          "name": "Autotools",
          "start_line": 10,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "CMake",
          "start_line": 11,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Cargo",
          "start_line": 12,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Make",
          "start_line": 13,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Ninja",
          "start_line": 14,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Custom",
          "start_line": 15,
          "doc": [],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "BuildPhase",
      "module": "events::build",
      "path": "crates/events/src/events/build.rs",
      "start_line": 21,
      "doc": [
        "Build phases for multi-stage operations"
      ],
      "definition": "pub enum BuildPhase {\n    Source,\n    Build,\n    PostProcess,\n    Package,\n}",
      "variants": [
        {
          "name": "Source",
          "start_line": 22,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Build",
          "start_line": 23,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "PostProcess",
          "start_line": 24,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Package",
          "start_line": 25,
          "doc": [],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "CacheStrategy",
      "module": "events::build",
      "path": "crates/events/src/events/build.rs",
      "start_line": 31,
      "doc": [
        "Build cache strategies"
      ],
      "definition": "pub enum CacheStrategy {\n    Skip,\n    Populate,\n    Use,\n}",
      "variants": [
        {
          "name": "Skip",
          "start_line": 32,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Populate",
          "start_line": 33,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Use",
          "start_line": 34,
          "doc": [],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "IsolationLevel",
      "module": "events::build",
      "path": "crates/events/src/events/build.rs",
      "start_line": 40,
      "doc": [
        "Build isolation levels"
      ],
      "definition": "pub enum IsolationLevel {\n    None,\n    Network,\n    Full,\n}",
      "variants": [
        {
          "name": "None",
          "start_line": 41,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Network",
          "start_line": 42,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Full",
          "start_line": 43,
          "doc": [],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "BuildEvent",
      "module": "events::build",
      "path": "crates/events/src/events/build.rs",
      "start_line": 49,
      "doc": [
        "Build-specific events for the event system"
      ],
      "definition": "pub enum BuildEvent {\n    /// Build session started with comprehensive context\n    SessionStarted {\n        session_id: String,\n        package: String,\n        version: Version,\n        build_system: BuildSystem,\n        cache_enabled: bool,\n    },\n\n    /// Build session completed\n    SessionCompleted {\n        session_id: String,\n        package: String,\n        version: Version,\n        duration: Duration,\n        artifacts_created: usize,\n        cache_populated: bool,\n    },\n\n    /// Build queued awaiting dependencies\n    Queued {\n        session_id: String,\n        package: String,\n        version: Version,\n        position_in_queue: usize,\n        build_dependencies: Vec<String>,\n    },\n\n    /// Build phase started\n    PhaseStarted {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        estimated_duration: Option<Duration>,\n    },\n\n    /// Build phase progress update\n    PhaseProgress {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        current_step: usize,\n        total_steps: usize,\n        current_step_name: String,\n    },\n\n    /// Build phase completed\n    PhaseCompleted {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        duration: Duration,\n    },\n\n    /// Build command started\n    CommandStarted {\n        session_id: String,\n        package: String,\n        command_id: String,\n        build_system: BuildSystem,\n        command: String,\n        working_dir: PathBuf,\n        timeout: Option<Duration>,\n    },\n\n    /// Real-time build output\n    StepOutput {\n        session_id: String,\n        package: String,\n        command_id: String,\n        line: String,\n        is_stderr: bool,\n    },\n\n    /// Build command completed\n    CommandCompleted {\n        session_id: String,\n        package: String,\n        command_id: String,\n        exit_code: i32,\n        duration: Duration,\n    },\n\n    /// Build dependency resolution started\n    DependencyResolutionStarted {\n        session_id: String,\n        package: String,\n        build_deps_count: usize,\n    },\n\n    /// Build dependency installed\n    DependencyInstalled {\n        session_id: String,\n        package: String,\n        dependency: String,\n        dependency_version: Version,\n    },\n\n    /// Build completed successfully\n    Completed {\n        session_id: String,\n        package: String,\n        version: Version,\n        path: PathBuf,\n        duration: Duration,\n    },\n\n    /// Build failed\n    Failed {\n        session_id: String,\n        package: String,\n        version: Version,\n        error: String,\n        phase: Option<BuildPhase>,\n        recovery_suggestions: Vec<String>,\n    },\n\n    /// Build retrying after failure\n    Retrying {\n        session_id: String,\n        package: String,\n        attempt: usize,\n        max_attempts: usize,\n        reason: String,\n    },\n\n    /// Build warning encountered\n    Warning {\n        session_id: String,\n        package: String,\n        message: String,\n        source: Option<String>,\n    },\n\n    /// Build environment configured\n    EnvironmentConfigured {\n        session_id: String,\n        package: String,\n        isolation_level: IsolationLevel,\n        network_enabled: bool,\n        env_vars_count: usize,\n    },\n\n    /// Build cache strategy determined\n    CacheStrategy {\n        session_id: String,\n        package: String,\n        strategy: CacheStrategy,\n        cache_key: String,\n    },\n\n    /// Build cache hit\n    CacheHit {\n        cache_key: String,\n        artifacts_count: usize,\n    },\n\n    /// Build cache miss\n    CacheMiss { cache_key: String, reason: String },\n\n    /// Build cache updated\n    CacheUpdated {\n        cache_key: String,\n        artifacts_count: usize,\n    },\n\n    /// Build cache cleaned\n    CacheCleaned {\n        removed_items: usize,\n        freed_bytes: u64,\n    },\n\n    /// Build checkpoint created\n    CheckpointCreated {\n        session_id: String,\n        package: String,\n        checkpoint_id: String,\n        stage: String,\n    },\n\n    /// Build checkpoint restored\n    CheckpointRestored {\n        session_id: String,\n        package: String,\n        checkpoint_id: String,\n        stage: String,\n    },\n\n    /// Build cleaned up\n    Cleaned { session_id: String, package: String },\n\n    /// Build resource usage update\n    ResourceUsage {\n        session_id: String,\n        package: String,\n        cpu_percent: f64,\n        memory_mb: u64,\n        disk_usage_mb: u64,\n    },\n\n    /// Build orchestration phase started (recipe parsing, env setup, etc.)\n    OrchestrationPhaseStarted {\n        phase: String,\n        description: Option<String>,\n    },\n\n    /// Build orchestration phase completed\n    OrchestrationPhaseCompleted {\n        phase: String,\n        success: bool,\n        duration: Option<Duration>,\n    },\n}",
      "variants": [
        {
          "name": "SessionStarted",
          "start_line": 51,
          "doc": [
            "Build session started with comprehensive context"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nversion: Version,\nbuild_system: BuildSystem,\ncache_enabled: bool,\n}"
        },
        {
          "name": "SessionCompleted",
          "start_line": 60,
          "doc": [
            "Build session completed"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nversion: Version,\nduration: Duration,\nartifacts_created: usize,\ncache_populated: bool,\n}"
        },
        {
          "name": "Queued",
          "start_line": 70,
          "doc": [
            "Build queued awaiting dependencies"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nversion: Version,\nposition_in_queue: usize,\nbuild_dependencies: Vec<String>,\n}"
        },
        {
          "name": "PhaseStarted",
          "start_line": 79,
          "doc": [
            "Build phase started"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nphase: BuildPhase,\nestimated_duration: Option<Duration>,\n}"
        },
        {
          "name": "PhaseProgress",
          "start_line": 87,
          "doc": [
            "Build phase progress update"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nphase: BuildPhase,\ncurrent_step: usize,\ntotal_steps: usize,\ncurrent_step_name: String,\n}"
        },
        {
          "name": "PhaseCompleted",
          "start_line": 97,
          "doc": [
            "Build phase completed"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nphase: BuildPhase,\nduration: Duration,\n}"
        },
        {
          "name": "CommandStarted",
          "start_line": 105,
          "doc": [
            "Build command started"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ncommand_id: String,\nbuild_system: BuildSystem,\ncommand: String,\nworking_dir: PathBuf,\ntimeout: Option<Duration>,\n}"
        },
        {
          "name": "StepOutput",
          "start_line": 116,
          "doc": [
            "Real-time build output"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ncommand_id: String,\nline: String,\nis_stderr: bool,\n}"
        },
        {
          "name": "CommandCompleted",
          "start_line": 125,
          "doc": [
            "Build command completed"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ncommand_id: String,\nexit_code: i32,\nduration: Duration,\n}"
        },
        {
          "name": "DependencyResolutionStarted",
          "start_line": 134,
          "doc": [
            "Build dependency resolution started"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nbuild_deps_count: usize,\n}"
        },
        {
          "name": "DependencyInstalled",
          "start_line": 141,
          "doc": [
            "Build dependency installed"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ndependency: String,\ndependency_version: Version,\n}"
        },
        {
          "name": "Completed",
          "start_line": 149,
          "doc": [
            "Build completed successfully"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nversion: Version,\npath: PathBuf,\nduration: Duration,\n}"
        },
        {
          "name": "Failed",
          "start_line": 158,
          "doc": [
            "Build failed"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nversion: Version,\nerror: String,\nphase: Option<BuildPhase>,\nrecovery_suggestions: Vec<String>,\n}"
        },
        {
          "name": "Retrying",
          "start_line": 168,
          "doc": [
            "Build retrying after failure"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nattempt: usize,\nmax_attempts: usize,\nreason: String,\n}"
        },
        {
          "name": "Warning",
          "start_line": 177,
          "doc": [
            "Build warning encountered"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nmessage: String,\nsource: Option<String>,\n}"
        },
        {
          "name": "EnvironmentConfigured",
          "start_line": 185,
          "doc": [
            "Build environment configured"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nisolation_level: IsolationLevel,\nnetwork_enabled: bool,\nenv_vars_count: usize,\n}"
        },
        {
          "name": "CacheStrategy",
          "start_line": 194,
          "doc": [
            "Build cache strategy determined"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\nstrategy: CacheStrategy,\ncache_key: String,\n}"
        },
        {
          "name": "CacheHit",
          "start_line": 202,
          "doc": [
            "Build cache hit"
          ],
          "attributes": [],
          "payload": "{\ncache_key: String,\nartifacts_count: usize,\n}"
        },
        {
          "name": "CacheMiss",
          "start_line": 208,
          "doc": [
            "Build cache miss"
          ],
          "attributes": [],
          "payload": "{ cache_key: String, reason: String }"
        },
        {
          "name": "CacheUpdated",
          "start_line": 211,
          "doc": [
            "Build cache updated"
          ],
          "attributes": [],
          "payload": "{\ncache_key: String,\nartifacts_count: usize,\n}"
        },
        {
          "name": "CacheCleaned",
          "start_line": 217,
          "doc": [
            "Build cache cleaned"
          ],
          "attributes": [],
          "payload": "{\nremoved_items: usize,\nfreed_bytes: u64,\n}"
        },
        {
          "name": "CheckpointCreated",
          "start_line": 223,
          "doc": [
            "Build checkpoint created"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ncheckpoint_id: String,\nstage: String,\n}"
        },
        {
          "name": "CheckpointRestored",
          "start_line": 231,
          "doc": [
            "Build checkpoint restored"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ncheckpoint_id: String,\nstage: String,\n}"
        },
        {
          "name": "Cleaned",
          "start_line": 239,
          "doc": [
            "Build cleaned up"
          ],
          "attributes": [],
          "payload": "{ session_id: String, package: String }"
        },
        {
          "name": "ResourceUsage",
          "start_line": 242,
          "doc": [
            "Build resource usage update"
          ],
          "attributes": [],
          "payload": "{\nsession_id: String,\npackage: String,\ncpu_percent: f64,\nmemory_mb: u64,\ndisk_usage_mb: u64,\n}"
        },
        {
          "name": "OrchestrationPhaseStarted",
          "start_line": 251,
          "doc": [
            "Build orchestration phase started (recipe parsing, env setup, etc.)"
          ],
          "attributes": [],
          "payload": "{\nphase: String,\ndescription: Option<String>,\n}"
        },
        {
          "name": "OrchestrationPhaseCompleted",
          "start_line": 257,
          "doc": [
            "Build orchestration phase completed"
          ],
          "attributes": [],
          "payload": "{\nphase: String,\nsuccess: bool,\nduration: Option<Duration>,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "DownloadEvent",
      "module": "events::download",
      "path": "crates/events/src/events/download.rs",
      "start_line": 8,
      "doc": [
        "Download-specific events surfaced to the CLI and logging pipeline."
      ],
      "definition": "pub enum DownloadEvent {\n    /// Download started with connection info\n    Started {\n        url: String,\n        package: Option<String>,\n        total_size: Option<u64>,\n        supports_resume: bool,\n        connection_time: Duration,\n    },\n\n    /// Download progress update with speed/ETA\n    Progress {\n        url: String,\n        bytes_downloaded: u64,\n        total_bytes: u64,\n        current_speed: f64,\n        average_speed: f64,\n        eta: Option<Duration>,\n    },\n\n    /// Download completed successfully\n    Completed {\n        url: String,\n        package: Option<String>,\n        final_size: u64,\n        total_time: Duration,\n        average_speed: f64,\n        hash: String,\n    },\n\n    /// Download failed with categorized error\n    Failed {\n        url: String,\n        package: Option<String>,\n        error: String,\n        error_category: String, // \"network\", \"filesystem\", \"validation\"\n        bytes_downloaded: u64,\n        recoverable: bool,\n    },\n\n    /// Download resuming from previous attempt\n    Resuming {\n        url: String,\n        resume_offset: u64,\n        total_size: Option<u64>,\n        attempts_so_far: usize,\n    },\n\n    /// Download has stalled\n    Stalled {\n        url: String,\n        stall_duration: Duration,\n        bytes_at_stall: u64,\n        suspected_cause: String,\n    },\n\n    /// Package-specific download started\n    PackageStarted {\n        name: String,\n        version: Version,\n        url: String,\n    },\n\n    /// Package download completed\n    PackageCompleted { name: String, version: Version },\n\n    /// Package signature downloaded\n    SignatureCompleted {\n        name: String,\n        version: Version,\n        verified: bool,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 10,
          "doc": [
            "Download started with connection info"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\npackage: Option<String>,\ntotal_size: Option<u64>,\nsupports_resume: bool,\nconnection_time: Duration,\n}"
        },
        {
          "name": "Progress",
          "start_line": 19,
          "doc": [
            "Download progress update with speed/ETA"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\nbytes_downloaded: u64,\ntotal_bytes: u64,\ncurrent_speed: f64,\naverage_speed: f64,\neta: Option<Duration>,\n}"
        },
        {
          "name": "Completed",
          "start_line": 29,
          "doc": [
            "Download completed successfully"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\npackage: Option<String>,\nfinal_size: u64,\ntotal_time: Duration,\naverage_speed: f64,\nhash: String,\n}"
        },
        {
          "name": "Failed",
          "start_line": 39,
          "doc": [
            "Download failed with categorized error"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\npackage: Option<String>,\nerror: String,\nerror_category: String, // \"network\", \"filesystem\", \"validation\"\nbytes_downloaded: u64,\nrecoverable: bool,\n}"
        },
        {
          "name": "Resuming",
          "start_line": 49,
          "doc": [
            "Download resuming from previous attempt"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\nresume_offset: u64,\ntotal_size: Option<u64>,\nattempts_so_far: usize,\n}"
        },
        {
          "name": "Stalled",
          "start_line": 57,
          "doc": [
            "Download has stalled"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\nstall_duration: Duration,\nbytes_at_stall: u64,\nsuspected_cause: String,\n}"
        },
        {
          "name": "PackageStarted",
          "start_line": 65,
          "doc": [
            "Package-specific download started"
          ],
          "attributes": [],
          "payload": "{\nname: String,\nversion: Version,\nurl: String,\n}"
        },
        {
          "name": "PackageCompleted",
          "start_line": 72,
          "doc": [
            "Package download completed"
          ],
          "attributes": [],
          "payload": "{ name: String, version: Version }"
        },
        {
          "name": "SignatureCompleted",
          "start_line": 75,
          "doc": [
            "Package signature downloaded"
          ],
          "attributes": [],
          "payload": "{\nname: String,\nversion: Version,\nverified: bool,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "GeneralEvent",
      "module": "events::general",
      "path": "crates/events/src/events/general.rs",
      "start_line": 7,
      "doc": [
        "General utility events for warnings, errors, and operations"
      ],
      "definition": "pub enum GeneralEvent {\n    /// Generic warning message with optional context\n    Warning {\n        message: String,\n        context: Option<String>,\n    },\n\n    /// Generic error message with optional details\n    Error {\n        message: String,\n        details: Option<String>,\n    },\n\n    /// Debug logging with structured context\n    DebugLog {\n        message: String,\n        context: HashMap<String, String>,\n    },\n\n    /// Generic operation started notification\n    OperationStarted { operation: String },\n\n    /// Generic operation completion with success status\n    OperationCompleted { operation: String, success: bool },\n\n    /// Generic operation failure with error details\n    OperationFailed { operation: String, error: String },\n\n    /// User confirmation request for interactive operations\n    UserConfirmationRequired {\n        prompt: String,\n        default: Option<bool>,\n        timeout_seconds: Option<u64>,\n    },\n\n    /// User confirmation response received\n    UserConfirmationReceived { response: bool },\n\n    /// System-level status notification\n    SystemNotification {\n        level: String,\n        message: String,\n        category: String,\n    },\n\n    /// Configuration validation results\n    ConfigurationValidated {\n        source: String,\n        warnings: Vec<String>,\n    },\n\n    /// Configuration validation error\n    ConfigurationError {\n        field: String,\n        error: String,\n        suggested_fix: Option<String>,\n    },\n\n    /// Performance metric update\n    PerformanceMetric {\n        name: String,\n        value: f64,\n        unit: String,\n        timestamp: Option<std::time::SystemTime>,\n    },\n\n    /// System resource usage update\n    ResourceUsage {\n        resource_type: String, // \"memory\", \"disk\", \"network\"\n        used: u64,\n        total: Option<u64>,\n        unit: String,\n    },\n\n    /// Rate limiting applied to operation\n    RateLimitApplied {\n        operation: String,\n        delay_ms: u64,\n        reason: String,\n    },\n\n    /// Check mode preview of planned action\n    CheckModePreview {\n        operation: String,\n        action: String,\n        details: std::collections::HashMap<String, String>,\n    },\n\n    /// Check mode summary of all planned changes\n    CheckModeSummary {\n        operation: String,\n        total_changes: usize,\n        categories: std::collections::HashMap<String, usize>,\n    },\n}",
      "variants": [
        {
          "name": "Warning",
          "start_line": 9,
          "doc": [
            "Generic warning message with optional context"
          ],
          "attributes": [],
          "payload": "{\nmessage: String,\ncontext: Option<String>,\n}"
        },
        {
          "name": "Error",
          "start_line": 15,
          "doc": [
            "Generic error message with optional details"
          ],
          "attributes": [],
          "payload": "{\nmessage: String,\ndetails: Option<String>,\n}"
        },
        {
          "name": "DebugLog",
          "start_line": 21,
          "doc": [
            "Debug logging with structured context"
          ],
          "attributes": [],
          "payload": "{\nmessage: String,\ncontext: HashMap<String, String>,\n}"
        },
        {
          "name": "OperationStarted",
          "start_line": 27,
          "doc": [
            "Generic operation started notification"
          ],
          "attributes": [],
          "payload": "{ operation: String }"
        },
        {
          "name": "OperationCompleted",
          "start_line": 30,
          "doc": [
            "Generic operation completion with success status"
          ],
          "attributes": [],
          "payload": "{ operation: String, success: bool }"
        },
        {
          "name": "OperationFailed",
          "start_line": 33,
          "doc": [
            "Generic operation failure with error details"
          ],
          "attributes": [],
          "payload": "{ operation: String, error: String }"
        },
        {
          "name": "UserConfirmationRequired",
          "start_line": 36,
          "doc": [
            "User confirmation request for interactive operations"
          ],
          "attributes": [],
          "payload": "{\nprompt: String,\ndefault: Option<bool>,\ntimeout_seconds: Option<u64>,\n}"
        },
        {
          "name": "UserConfirmationReceived",
          "start_line": 43,
          "doc": [
            "User confirmation response received"
          ],
          "attributes": [],
          "payload": "{ response: bool }"
        },
        {
          "name": "SystemNotification",
          "start_line": 46,
          "doc": [
            "System-level status notification"
          ],
          "attributes": [],
          "payload": "{\nlevel: String,\nmessage: String,\ncategory: String,\n}"
        },
        {
          "name": "ConfigurationValidated",
          "start_line": 53,
          "doc": [
            "Configuration validation results"
          ],
          "attributes": [],
          "payload": "{\nsource: String,\nwarnings: Vec<String>,\n}"
        },
        {
          "name": "ConfigurationError",
          "start_line": 59,
          "doc": [
            "Configuration validation error"
          ],
          "attributes": [],
          "payload": "{\nfield: String,\nerror: String,\nsuggested_fix: Option<String>,\n}"
        },
        {
          "name": "PerformanceMetric",
          "start_line": 66,
          "doc": [
            "Performance metric update"
          ],
          "attributes": [],
          "payload": "{\nname: String,\nvalue: f64,\nunit: String,\ntimestamp: Option<std::time::SystemTime>,\n}"
        },
        {
          "name": "ResourceUsage",
          "start_line": 74,
          "doc": [
            "System resource usage update"
          ],
          "attributes": [],
          "payload": "{\nresource_type: String, // \"memory\", \"disk\", \"network\"\nused: u64,\ntotal: Option<u64>,\nunit: String,\n}"
        },
        {
          "name": "RateLimitApplied",
          "start_line": 82,
          "doc": [
            "Rate limiting applied to operation"
          ],
          "attributes": [],
          "payload": "{\noperation: String,\ndelay_ms: u64,\nreason: String,\n}"
        },
        {
          "name": "CheckModePreview",
          "start_line": 89,
          "doc": [
            "Check mode preview of planned action"
          ],
          "attributes": [],
          "payload": "{\noperation: String,\naction: String,\ndetails: std::collections::HashMap<String, String>,\n}"
        },
        {
          "name": "CheckModeSummary",
          "start_line": 96,
          "doc": [
            "Check mode summary of all planned changes"
          ],
          "attributes": [],
          "payload": "{\noperation: String,\ntotal_changes: usize,\ncategories: std::collections::HashMap<String, usize>,\n}"
        }
      ]
    },
    {
      "kind": "struct",
      "name": "GuardDiscrepancyParams",
      "module": "events::guard",
      "path": "crates/events/src/events/guard.rs",
      "start_line": 6,
      "doc": [
        "Parameters for guard discrepancy found events"
      ],
      "definition": "pub struct GuardDiscrepancyParams {\n    pub operation_id: String,\n    pub discrepancy_type: String,\n    pub severity: String,\n    pub file_path: String,\n    pub package: Option<String>,\n    pub package_version: Option<String>,\n    pub user_message: String,\n    pub technical_details: String,\n    pub auto_heal_available: bool,\n    pub requires_confirmation: bool,\n    pub estimated_fix_time_seconds: Option<u64>,\n}"
    },
    {
      "kind": "enum",
      "name": "GuardEvent",
      "module": "events::guard",
      "path": "crates/events/src/events/guard.rs",
      "start_line": 23,
      "doc": [
        "Guard events for filesystem integrity verification"
      ],
      "definition": "pub enum GuardEvent {\n    /// Guard verification started\n    VerificationStarted {\n        operation_id: String,\n        scope: String,\n        level: String,\n        packages_count: usize,\n        files_count: Option<usize>,\n    },\n\n    /// Guard verification progress\n    VerificationProgress {\n        operation_id: String,\n        verified_packages: usize,\n        total_packages: usize,\n        verified_files: usize,\n        total_files: usize,\n        current_package: Option<String>,\n        cache_hit_rate: Option<f64>,\n    },\n\n    /// Guard discrepancy found\n    DiscrepancyFound(GuardDiscrepancyParams),\n\n    /// Guard verification completed\n    VerificationCompleted {\n        operation_id: String,\n        total_discrepancies: usize,\n        by_severity: HashMap<String, usize>,\n        duration_ms: u64,\n        cache_hit_rate: f64,\n        coverage_percent: f64,\n        scope_description: String,\n    },\n\n    /// Guard verification failed\n    VerificationFailed {\n        operation_id: String,\n        error: String,\n        packages_verified: usize,\n        files_verified: usize,\n        duration_ms: u64,\n    },\n\n    /// Guard healing started\n    HealingStarted {\n        operation_id: String,\n        discrepancies_count: usize,\n        auto_heal_count: usize,\n        confirmation_required_count: usize,\n        manual_intervention_count: usize,\n    },\n\n    /// Guard healing progress\n    HealingProgress {\n        operation_id: String,\n        completed: usize,\n        total: usize,\n        current_operation: String,\n        current_file: Option<String>,\n    },\n\n    /// Guard healing result\n    HealingResult {\n        operation_id: String,\n        discrepancy_type: String,\n        file_path: String,\n        success: bool,\n        healing_action: String,\n        error: Option<String>,\n        duration_ms: u64,\n    },\n\n    /// Guard healing completed\n    HealingCompleted {\n        operation_id: String,\n        healed_count: usize,\n        failed_count: usize,\n        skipped_count: usize,\n        duration_ms: u64,\n    },\n\n    /// Guard healing failed\n    HealingFailed {\n        operation_id: String,\n        error: String,\n        completed_healing: usize,\n        failed_healing: usize,\n        duration_ms: u64,\n    },\n\n    /// Guard cache warming\n    CacheWarming {\n        operation_id: String,\n        operation_type: String,\n        cache_entries_loading: usize,\n    },\n\n    /// Guard cache warming completed\n    CacheWarmingCompleted {\n        operation_id: String,\n        cache_entries_loaded: usize,\n        cache_hit_rate_improvement: f64,\n        duration_ms: u64,\n    },\n\n    /// Guard cache invalidated\n    CacheInvalidated {\n        operation_id: String,\n        operation_type: String,\n        invalidated_entries: usize,\n        reason: String,\n    },\n\n    /// Guard error summary\n    ErrorSummary {\n        operation_id: String,\n        total_errors: usize,\n        recoverable_errors: usize,\n        manual_intervention_required: usize,\n        overall_severity: String,\n        user_friendly_summary: String,\n        recommended_actions: Vec<String>,\n    },\n\n    /// Guard configuration validated\n    ConfigurationValidated {\n        approach: String, // \"top-level\" or \"nested\"\n        enabled: bool,\n        verification_level: String,\n        auto_heal: bool,\n        validation_warnings: Vec<String>,\n    },\n\n    /// Guard configuration error\n    ConfigurationError {\n        field: String,\n        error: String,\n        suggested_fix: Option<String>,\n        current_value: Option<String>,\n    },\n\n    /// Guard recovery attempt\n    RecoveryAttempt {\n        operation_id: String,\n        error_category: String,\n        recovery_strategy: String,\n        attempt_number: usize,\n        max_attempts: usize,\n    },\n\n    /// Guard recovery success\n    RecoverySuccess {\n        operation_id: String,\n        error_category: String,\n        recovery_strategy: String,\n        attempt_number: usize,\n        recovery_duration_ms: u64,\n    },\n\n    /// Guard recovery failed\n    RecoveryFailed {\n        operation_id: String,\n        error_category: String,\n        recovery_strategy: String,\n        attempts_made: usize,\n        final_error: String,\n    },\n}",
      "variants": [
        {
          "name": "VerificationStarted",
          "start_line": 25,
          "doc": [
            "Guard verification started"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nscope: String,\nlevel: String,\npackages_count: usize,\nfiles_count: Option<usize>,\n}"
        },
        {
          "name": "VerificationProgress",
          "start_line": 34,
          "doc": [
            "Guard verification progress"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nverified_packages: usize,\ntotal_packages: usize,\nverified_files: usize,\ntotal_files: usize,\ncurrent_package: Option<String>,\ncache_hit_rate: Option<f64>,\n}"
        },
        {
          "name": "DiscrepancyFound",
          "start_line": 45,
          "doc": [
            "Guard discrepancy found"
          ],
          "attributes": [],
          "payload": "(GuardDiscrepancyParams)"
        },
        {
          "name": "VerificationCompleted",
          "start_line": 48,
          "doc": [
            "Guard verification completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ntotal_discrepancies: usize,\nby_severity: HashMap<String, usize>,\nduration_ms: u64,\ncache_hit_rate: f64,\ncoverage_percent: f64,\nscope_description: String,\n}"
        },
        {
          "name": "VerificationFailed",
          "start_line": 59,
          "doc": [
            "Guard verification failed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror: String,\npackages_verified: usize,\nfiles_verified: usize,\nduration_ms: u64,\n}"
        },
        {
          "name": "HealingStarted",
          "start_line": 68,
          "doc": [
            "Guard healing started"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ndiscrepancies_count: usize,\nauto_heal_count: usize,\nconfirmation_required_count: usize,\nmanual_intervention_count: usize,\n}"
        },
        {
          "name": "HealingProgress",
          "start_line": 77,
          "doc": [
            "Guard healing progress"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ncompleted: usize,\ntotal: usize,\ncurrent_operation: String,\ncurrent_file: Option<String>,\n}"
        },
        {
          "name": "HealingResult",
          "start_line": 86,
          "doc": [
            "Guard healing result"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ndiscrepancy_type: String,\nfile_path: String,\nsuccess: bool,\nhealing_action: String,\nerror: Option<String>,\nduration_ms: u64,\n}"
        },
        {
          "name": "HealingCompleted",
          "start_line": 97,
          "doc": [
            "Guard healing completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nhealed_count: usize,\nfailed_count: usize,\nskipped_count: usize,\nduration_ms: u64,\n}"
        },
        {
          "name": "HealingFailed",
          "start_line": 106,
          "doc": [
            "Guard healing failed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror: String,\ncompleted_healing: usize,\nfailed_healing: usize,\nduration_ms: u64,\n}"
        },
        {
          "name": "CacheWarming",
          "start_line": 115,
          "doc": [
            "Guard cache warming"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\noperation_type: String,\ncache_entries_loading: usize,\n}"
        },
        {
          "name": "CacheWarmingCompleted",
          "start_line": 122,
          "doc": [
            "Guard cache warming completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ncache_entries_loaded: usize,\ncache_hit_rate_improvement: f64,\nduration_ms: u64,\n}"
        },
        {
          "name": "CacheInvalidated",
          "start_line": 130,
          "doc": [
            "Guard cache invalidated"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\noperation_type: String,\ninvalidated_entries: usize,\nreason: String,\n}"
        },
        {
          "name": "ErrorSummary",
          "start_line": 138,
          "doc": [
            "Guard error summary"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ntotal_errors: usize,\nrecoverable_errors: usize,\nmanual_intervention_required: usize,\noverall_severity: String,\nuser_friendly_summary: String,\nrecommended_actions: Vec<String>,\n}"
        },
        {
          "name": "ConfigurationValidated",
          "start_line": 149,
          "doc": [
            "Guard configuration validated"
          ],
          "attributes": [],
          "payload": "{\napproach: String, // \"top-level\" or \"nested\"\nenabled: bool,\nverification_level: String,\nauto_heal: bool,\nvalidation_warnings: Vec<String>,\n}"
        },
        {
          "name": "ConfigurationError",
          "start_line": 158,
          "doc": [
            "Guard configuration error"
          ],
          "attributes": [],
          "payload": "{\nfield: String,\nerror: String,\nsuggested_fix: Option<String>,\ncurrent_value: Option<String>,\n}"
        },
        {
          "name": "RecoveryAttempt",
          "start_line": 166,
          "doc": [
            "Guard recovery attempt"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror_category: String,\nrecovery_strategy: String,\nattempt_number: usize,\nmax_attempts: usize,\n}"
        },
        {
          "name": "RecoverySuccess",
          "start_line": 175,
          "doc": [
            "Guard recovery success"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror_category: String,\nrecovery_strategy: String,\nattempt_number: usize,\nrecovery_duration_ms: u64,\n}"
        },
        {
          "name": "RecoveryFailed",
          "start_line": 184,
          "doc": [
            "Guard recovery failed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror_category: String,\nrecovery_strategy: String,\nattempts_made: usize,\nfinal_error: String,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "InstallEvent",
      "module": "events::install",
      "path": "crates/events/src/events/install.rs",
      "start_line": 9,
      "doc": [
        "Installation domain events - maps to install crate and `sps2 install` command"
      ],
      "definition": "pub enum InstallEvent {\n    /// Installation operation started for a package\n    Started {\n        package: String,\n        version: Version,\n        install_path: PathBuf,\n        force_reinstall: bool,\n    },\n\n    /// Installation completed successfully\n    Completed {\n        package: String,\n        version: Version,\n        installed_files: usize,\n        install_path: PathBuf,\n        duration: Duration,\n        disk_usage: u64,\n    },\n\n    /// Installation failed\n    Failed {\n        package: String,\n        version: Version,\n        phase: InstallPhase,\n        error: String,\n        cleanup_required: bool,\n    },\n\n    /// Package staging phase started\n    StagingStarted {\n        package: String,\n        version: Version,\n        source_path: PathBuf,\n        staging_path: PathBuf,\n    },\n\n    /// Package staging completed\n    StagingCompleted {\n        package: String,\n        version: Version,\n        files_staged: usize,\n        staging_size: u64,\n        staging_path: PathBuf,\n    },\n\n    /// Package staging failed\n    StagingFailed {\n        package: String,\n        version: Version,\n        error: String,\n        files_partially_extracted: usize,\n    },\n\n    /// Installation preparation phase\n    PreparationStarted {\n        package: String,\n        version: Version,\n        target_path: PathBuf,\n        backup_existing: bool,\n    },\n\n    /// Preparation phase completed\n    PreparationCompleted {\n        package: String,\n        version: Version,\n        backup_created: Option<PathBuf>,\n        space_required: u64,\n        space_available: u64,\n    },\n\n    /// File installation phase executing\n    FileInstallationStarted {\n        package: String,\n        version: Version,\n        files_to_install: usize,\n        estimated_size: u64,\n    },\n\n    /// File installation completed\n    FileInstallationCompleted {\n        package: String,\n        version: Version,\n        files_installed: usize,\n        bytes_written: u64,\n    },\n\n    /// Metadata registration started\n    MetadataRegistrationStarted {\n        package: String,\n        version: Version,\n        dependencies: usize,\n    },\n\n    /// Metadata registration completed\n    MetadataRegistrationCompleted {\n        package: String,\n        version: Version,\n        database_records: usize,\n    },\n\n    /// Post-installation validation started\n    ValidationStarted {\n        package: String,\n        version: Version,\n        validation_checks: Vec<String>,\n    },\n\n    /// Post-installation validation completed\n    ValidationCompleted {\n        package: String,\n        version: Version,\n        checks_passed: usize,\n        warnings: usize,\n        issues_found: usize,\n    },\n\n    /// Post-installation validation failed\n    ValidationFailed {\n        package: String,\n        version: Version,\n        failed_check: String,\n        error: String,\n        can_continue: bool,\n    },\n\n    /// Batch installation started\n    BatchStarted {\n        packages: Vec<String>,\n        operation_id: String,\n        concurrent_limit: usize,\n        estimated_duration: Option<Duration>,\n    },\n\n    /// Batch installation completed\n    BatchCompleted {\n        operation_id: String,\n        successful_packages: Vec<String>,\n        failed_packages: Vec<(String, String)>, // (package, error)\n        total_duration: Duration,\n        total_disk_usage: u64,\n    },\n\n    /// Batch installation failed\n    BatchFailed {\n        operation_id: String,\n        error: String,\n        completed_packages: Vec<String>,\n        failed_packages: Vec<(String, String)>,\n        rollback_initiated: bool,\n    },\n\n    /// Rollback started due to installation failure\n    RollbackStarted {\n        package: String,\n        version: Version,\n        reason: String,\n        backup_path: Option<PathBuf>,\n    },\n\n    /// Rollback completed\n    RollbackCompleted {\n        package: String,\n        version: Version,\n        files_restored: usize,\n        cleanup_successful: bool,\n    },\n\n    /// Rollback failed\n    RollbackFailed {\n        package: String,\n        version: Version,\n        error: String,\n        manual_cleanup_required: bool,\n    },\n\n    /// Package conflict detected during installation\n    ConflictDetected {\n        package: String,\n        version: Version,\n        conflict_type: InstallConflictType,\n        conflicting_package: Option<String>,\n        conflicting_files: Vec<PathBuf>,\n    },\n\n    /// Conflict resolution attempted\n    ConflictResolution {\n        package: String,\n        version: Version,\n        resolution_strategy: String,\n        backup_created: bool,\n    },\n\n    /// Permission adjustment required\n    PermissionAdjustment {\n        package: String,\n        files_affected: usize,\n        permission_type: String, // \"executable\", \"readable\", \"ownership\"\n        requires_root: bool,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 11,
          "doc": [
            "Installation operation started for a package"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ninstall_path: PathBuf,\nforce_reinstall: bool,\n}"
        },
        {
          "name": "Completed",
          "start_line": 19,
          "doc": [
            "Installation completed successfully"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ninstalled_files: usize,\ninstall_path: PathBuf,\nduration: Duration,\ndisk_usage: u64,\n}"
        },
        {
          "name": "Failed",
          "start_line": 29,
          "doc": [
            "Installation failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nphase: InstallPhase,\nerror: String,\ncleanup_required: bool,\n}"
        },
        {
          "name": "StagingStarted",
          "start_line": 38,
          "doc": [
            "Package staging phase started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nsource_path: PathBuf,\nstaging_path: PathBuf,\n}"
        },
        {
          "name": "StagingCompleted",
          "start_line": 46,
          "doc": [
            "Package staging completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_staged: usize,\nstaging_size: u64,\nstaging_path: PathBuf,\n}"
        },
        {
          "name": "StagingFailed",
          "start_line": 55,
          "doc": [
            "Package staging failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nerror: String,\nfiles_partially_extracted: usize,\n}"
        },
        {
          "name": "PreparationStarted",
          "start_line": 63,
          "doc": [
            "Installation preparation phase"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ntarget_path: PathBuf,\nbackup_existing: bool,\n}"
        },
        {
          "name": "PreparationCompleted",
          "start_line": 71,
          "doc": [
            "Preparation phase completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nbackup_created: Option<PathBuf>,\nspace_required: u64,\nspace_available: u64,\n}"
        },
        {
          "name": "FileInstallationStarted",
          "start_line": 80,
          "doc": [
            "File installation phase executing"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_to_install: usize,\nestimated_size: u64,\n}"
        },
        {
          "name": "FileInstallationCompleted",
          "start_line": 88,
          "doc": [
            "File installation completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_installed: usize,\nbytes_written: u64,\n}"
        },
        {
          "name": "MetadataRegistrationStarted",
          "start_line": 96,
          "doc": [
            "Metadata registration started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ndependencies: usize,\n}"
        },
        {
          "name": "MetadataRegistrationCompleted",
          "start_line": 103,
          "doc": [
            "Metadata registration completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ndatabase_records: usize,\n}"
        },
        {
          "name": "ValidationStarted",
          "start_line": 110,
          "doc": [
            "Post-installation validation started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nvalidation_checks: Vec<String>,\n}"
        },
        {
          "name": "ValidationCompleted",
          "start_line": 117,
          "doc": [
            "Post-installation validation completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nchecks_passed: usize,\nwarnings: usize,\nissues_found: usize,\n}"
        },
        {
          "name": "ValidationFailed",
          "start_line": 126,
          "doc": [
            "Post-installation validation failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfailed_check: String,\nerror: String,\ncan_continue: bool,\n}"
        },
        {
          "name": "BatchStarted",
          "start_line": 135,
          "doc": [
            "Batch installation started"
          ],
          "attributes": [],
          "payload": "{\npackages: Vec<String>,\noperation_id: String,\nconcurrent_limit: usize,\nestimated_duration: Option<Duration>,\n}"
        },
        {
          "name": "BatchCompleted",
          "start_line": 143,
          "doc": [
            "Batch installation completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nsuccessful_packages: Vec<String>,\nfailed_packages: Vec<(String, String)>, // (package, error)\ntotal_duration: Duration,\ntotal_disk_usage: u64,\n}"
        },
        {
          "name": "BatchFailed",
          "start_line": 152,
          "doc": [
            "Batch installation failed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror: String,\ncompleted_packages: Vec<String>,\nfailed_packages: Vec<(String, String)>,\nrollback_initiated: bool,\n}"
        },
        {
          "name": "RollbackStarted",
          "start_line": 161,
          "doc": [
            "Rollback started due to installation failure"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nreason: String,\nbackup_path: Option<PathBuf>,\n}"
        },
        {
          "name": "RollbackCompleted",
          "start_line": 169,
          "doc": [
            "Rollback completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_restored: usize,\ncleanup_successful: bool,\n}"
        },
        {
          "name": "RollbackFailed",
          "start_line": 177,
          "doc": [
            "Rollback failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nerror: String,\nmanual_cleanup_required: bool,\n}"
        },
        {
          "name": "ConflictDetected",
          "start_line": 185,
          "doc": [
            "Package conflict detected during installation"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nconflict_type: InstallConflictType,\nconflicting_package: Option<String>,\nconflicting_files: Vec<PathBuf>,\n}"
        },
        {
          "name": "ConflictResolution",
          "start_line": 194,
          "doc": [
            "Conflict resolution attempted"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nresolution_strategy: String,\nbackup_created: bool,\n}"
        },
        {
          "name": "PermissionAdjustment",
          "start_line": 202,
          "doc": [
            "Permission adjustment required"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfiles_affected: usize,\npermission_type: String, // \"executable\", \"readable\", \"ownership\"\nrequires_root: bool,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "InstallPhase",
      "module": "events::install",
      "path": "crates/events/src/events/install.rs",
      "start_line": 213,
      "doc": [
        "Installation phases for error reporting and progress tracking"
      ],
      "definition": "pub enum InstallPhase {\n    /// Package acquisition and validation\n    Acquisition,\n    /// Extracting and staging files\n    Staging,\n    /// Preparing for installation\n    Preparation,\n    /// Installing files to final location\n    FileInstallation,\n    /// Registering package metadata\n    MetadataRegistration,\n    /// Post-installation validation\n    Validation,\n    /// Rollback due to failure\n    Rollback,\n}",
      "variants": [
        {
          "name": "Acquisition",
          "start_line": 215,
          "doc": [
            "Package acquisition and validation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Staging",
          "start_line": 217,
          "doc": [
            "Extracting and staging files"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Preparation",
          "start_line": 219,
          "doc": [
            "Preparing for installation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "FileInstallation",
          "start_line": 221,
          "doc": [
            "Installing files to final location"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "MetadataRegistration",
          "start_line": 223,
          "doc": [
            "Registering package metadata"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Validation",
          "start_line": 225,
          "doc": [
            "Post-installation validation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Rollback",
          "start_line": 227,
          "doc": [
            "Rollback due to failure"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "InstallConflictType",
      "module": "events::install",
      "path": "crates/events/src/events/install.rs",
      "start_line": 233,
      "doc": [
        "Types of installation conflicts"
      ],
      "definition": "pub enum InstallConflictType {\n    /// File already exists and owned by another package\n    FileConflict,\n    /// Package version already installed\n    VersionConflict,\n    /// Dependency version conflicts with existing installation\n    DependencyConflict,\n    /// Insufficient disk space\n    SpaceConflict,\n    /// Permission denied for required operation\n    PermissionConflict,\n    /// System compatibility issues\n    SystemConflict,\n}",
      "variants": [
        {
          "name": "FileConflict",
          "start_line": 235,
          "doc": [
            "File already exists and owned by another package"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "VersionConflict",
          "start_line": 237,
          "doc": [
            "Package version already installed"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "DependencyConflict",
          "start_line": 239,
          "doc": [
            "Dependency version conflicts with existing installation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "SpaceConflict",
          "start_line": 241,
          "doc": [
            "Insufficient disk space"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "PermissionConflict",
          "start_line": 243,
          "doc": [
            "Permission denied for required operation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "SystemConflict",
          "start_line": 245,
          "doc": [
            "System compatibility issues"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "AppEvent",
      "module": "events::mod",
      "path": "crates/events/src/events/mod.rs",
      "start_line": 44,
      "doc": [
        "Top-level application event enum that aggregates all domain-specific events"
      ],
      "definition": "pub enum AppEvent {\n    /// General utility events (warnings, errors, operations)\n    General(GeneralEvent),\n\n    /// Download-specific events (HTTP downloads, progress, retries)\n    Download(DownloadEvent),\n\n    /// Build system events (compilation, caching, sessions)\n    Build(BuildEvent),\n\n    /// State management events (transactions, rollbacks)\n    State(StateEvent),\n\n    /// Package installation events (staging, installation, validation)\n    Install(InstallEvent),\n\n    /// Package uninstallation events (removal, dependency checking)\n    Uninstall(UninstallEvent),\n\n    /// Package update/upgrade events (update planning, batch updates)\n    Update(UpdateEvent),\n\n    /// Package acquisition events (download, cache, verification)\n    Acquisition(AcquisitionEvent),\n\n    /// Progress tracking events (sophisticated progress algorithms)\n    Progress(ProgressEvent),\n\n    /// Repository and index events (sync, mirroring)\n    Repo(RepoEvent),\n\n    /// Resolver events (dependency resolution, SAT solving)\n    Resolver(ResolverEvent),\n\n    /// Guard events (filesystem integrity, healing)\n    Guard(GuardEvent),\n\n    /// Quality assurance events (artifact validation)\n    Qa(QaEvent),\n\n    /// Audit and vulnerability scanning events\n    Audit(AuditEvent),\n\n    /// Python virtual environment events\n    Python(PythonEvent),\n\n    /// Package operation events (high-level package operations)\n    Package(PackageEvent),\n\n    /// Platform-specific operation events (binary, filesystem, process operations)\n    Platform(PlatformEvent),\n}",
      "variants": [
        {
          "name": "General",
          "start_line": 46,
          "doc": [
            "General utility events (warnings, errors, operations)"
          ],
          "attributes": [],
          "payload": "(GeneralEvent)"
        },
        {
          "name": "Download",
          "start_line": 49,
          "doc": [
            "Download-specific events (HTTP downloads, progress, retries)"
          ],
          "attributes": [],
          "payload": "(DownloadEvent)"
        },
        {
          "name": "Build",
          "start_line": 52,
          "doc": [
            "Build system events (compilation, caching, sessions)"
          ],
          "attributes": [],
          "payload": "(BuildEvent)"
        },
        {
          "name": "State",
          "start_line": 55,
          "doc": [
            "State management events (transactions, rollbacks)"
          ],
          "attributes": [],
          "payload": "(StateEvent)"
        },
        {
          "name": "Install",
          "start_line": 58,
          "doc": [
            "Package installation events (staging, installation, validation)"
          ],
          "attributes": [],
          "payload": "(InstallEvent)"
        },
        {
          "name": "Uninstall",
          "start_line": 61,
          "doc": [
            "Package uninstallation events (removal, dependency checking)"
          ],
          "attributes": [],
          "payload": "(UninstallEvent)"
        },
        {
          "name": "Update",
          "start_line": 64,
          "doc": [
            "Package update/upgrade events (update planning, batch updates)"
          ],
          "attributes": [],
          "payload": "(UpdateEvent)"
        },
        {
          "name": "Acquisition",
          "start_line": 67,
          "doc": [
            "Package acquisition events (download, cache, verification)"
          ],
          "attributes": [],
          "payload": "(AcquisitionEvent)"
        },
        {
          "name": "Progress",
          "start_line": 70,
          "doc": [
            "Progress tracking events (sophisticated progress algorithms)"
          ],
          "attributes": [],
          "payload": "(ProgressEvent)"
        },
        {
          "name": "Repo",
          "start_line": 73,
          "doc": [
            "Repository and index events (sync, mirroring)"
          ],
          "attributes": [],
          "payload": "(RepoEvent)"
        },
        {
          "name": "Resolver",
          "start_line": 76,
          "doc": [
            "Resolver events (dependency resolution, SAT solving)"
          ],
          "attributes": [],
          "payload": "(ResolverEvent)"
        },
        {
          "name": "Guard",
          "start_line": 79,
          "doc": [
            "Guard events (filesystem integrity, healing)"
          ],
          "attributes": [],
          "payload": "(GuardEvent)"
        },
        {
          "name": "Qa",
          "start_line": 82,
          "doc": [
            "Quality assurance events (artifact validation)"
          ],
          "attributes": [],
          "payload": "(QaEvent)"
        },
        {
          "name": "Audit",
          "start_line": 85,
          "doc": [
            "Audit and vulnerability scanning events"
          ],
          "attributes": [],
          "payload": "(AuditEvent)"
        },
        {
          "name": "Python",
          "start_line": 88,
          "doc": [
            "Python virtual environment events"
          ],
          "attributes": [],
          "payload": "(PythonEvent)"
        },
        {
          "name": "Package",
          "start_line": 91,
          "doc": [
            "Package operation events (high-level package operations)"
          ],
          "attributes": [],
          "payload": "(PackageEvent)"
        },
        {
          "name": "Platform",
          "start_line": 94,
          "doc": [
            "Platform-specific operation events (binary, filesystem, process operations)"
          ],
          "attributes": [],
          "payload": "(PlatformEvent)"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "PackageEvent",
      "module": "events::package",
      "path": "crates/events/src/events/package.rs",
      "start_line": 7,
      "doc": [
        "Package operation events"
      ],
      "definition": "pub enum PackageEvent {\n    /// Package installing\n    Installing { name: String, version: Version },\n\n    /// Package removing\n    Removing { name: String, version: Version },\n\n    /// Package removed\n    Removed { name: String, version: Version },\n\n    /// Package building\n    Building { name: String, version: Version },\n\n    /// List operation starting\n    ListStarting,\n\n    /// List operation completed\n    ListCompleted { count: usize },\n\n    /// Search operation starting\n    SearchStarting { query: String },\n\n    /// Search operation completed\n    SearchCompleted { query: String, count: usize },\n\n    /// Health check starting\n    HealthCheckStarting,\n\n    /// Health check started\n    HealthCheckStarted,\n\n    /// Health check progress\n    HealthCheckProgress {\n        component: String,\n        status: HealthStatus,\n        message: Option<String>,\n    },\n\n    /// Health check completed\n    HealthCheckCompleted { healthy: bool, issues: Vec<String> },\n\n    /// Self-update starting\n    SelfUpdateStarting,\n\n    /// Self-update checking version\n    SelfUpdateCheckingVersion { current_version: String },\n\n    /// Self-update version available\n    SelfUpdateVersionAvailable {\n        current_version: String,\n        latest_version: String,\n    },\n\n    /// Self-update already latest\n    SelfUpdateAlreadyLatest { version: String },\n\n    /// Self-update downloading\n    SelfUpdateDownloading { version: String, url: String },\n\n    /// Self-update verifying\n    SelfUpdateVerifying { version: String },\n\n    /// Self-update installing\n    SelfUpdateInstalling { version: String },\n\n    /// Self-update completed\n    SelfUpdateCompleted {\n        old_version: String,\n        new_version: String,\n        duration_ms: u64,\n    },\n\n    /// Cleanup starting\n    CleanupStarting,\n\n    /// Cleanup progress\n    CleanupProgress {\n        items_processed: usize,\n        total_items: usize,\n    },\n\n    /// Cleanup completed\n    CleanupCompleted {\n        states_removed: usize,\n        packages_removed: usize,\n        duration_ms: u64,\n    },\n}",
      "variants": [
        {
          "name": "Installing",
          "start_line": 9,
          "doc": [
            "Package installing"
          ],
          "attributes": [],
          "payload": "{ name: String, version: Version }"
        },
        {
          "name": "Removing",
          "start_line": 12,
          "doc": [
            "Package removing"
          ],
          "attributes": [],
          "payload": "{ name: String, version: Version }"
        },
        {
          "name": "Removed",
          "start_line": 15,
          "doc": [
            "Package removed"
          ],
          "attributes": [],
          "payload": "{ name: String, version: Version }"
        },
        {
          "name": "Building",
          "start_line": 18,
          "doc": [
            "Package building"
          ],
          "attributes": [],
          "payload": "{ name: String, version: Version }"
        },
        {
          "name": "ListStarting",
          "start_line": 21,
          "doc": [
            "List operation starting"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "ListCompleted",
          "start_line": 24,
          "doc": [
            "List operation completed"
          ],
          "attributes": [],
          "payload": "{ count: usize }"
        },
        {
          "name": "SearchStarting",
          "start_line": 27,
          "doc": [
            "Search operation starting"
          ],
          "attributes": [],
          "payload": "{ query: String }"
        },
        {
          "name": "SearchCompleted",
          "start_line": 30,
          "doc": [
            "Search operation completed"
          ],
          "attributes": [],
          "payload": "{ query: String, count: usize }"
        },
        {
          "name": "HealthCheckStarting",
          "start_line": 33,
          "doc": [
            "Health check starting"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "HealthCheckStarted",
          "start_line": 36,
          "doc": [
            "Health check started"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "HealthCheckProgress",
          "start_line": 39,
          "doc": [
            "Health check progress"
          ],
          "attributes": [],
          "payload": "{\ncomponent: String,\nstatus: HealthStatus,\nmessage: Option<String>,\n}"
        },
        {
          "name": "HealthCheckCompleted",
          "start_line": 46,
          "doc": [
            "Health check completed"
          ],
          "attributes": [],
          "payload": "{ healthy: bool, issues: Vec<String> }"
        },
        {
          "name": "SelfUpdateStarting",
          "start_line": 49,
          "doc": [
            "Self-update starting"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "SelfUpdateCheckingVersion",
          "start_line": 52,
          "doc": [
            "Self-update checking version"
          ],
          "attributes": [],
          "payload": "{ current_version: String }"
        },
        {
          "name": "SelfUpdateVersionAvailable",
          "start_line": 55,
          "doc": [
            "Self-update version available"
          ],
          "attributes": [],
          "payload": "{\ncurrent_version: String,\nlatest_version: String,\n}"
        },
        {
          "name": "SelfUpdateAlreadyLatest",
          "start_line": 61,
          "doc": [
            "Self-update already latest"
          ],
          "attributes": [],
          "payload": "{ version: String }"
        },
        {
          "name": "SelfUpdateDownloading",
          "start_line": 64,
          "doc": [
            "Self-update downloading"
          ],
          "attributes": [],
          "payload": "{ version: String, url: String }"
        },
        {
          "name": "SelfUpdateVerifying",
          "start_line": 67,
          "doc": [
            "Self-update verifying"
          ],
          "attributes": [],
          "payload": "{ version: String }"
        },
        {
          "name": "SelfUpdateInstalling",
          "start_line": 70,
          "doc": [
            "Self-update installing"
          ],
          "attributes": [],
          "payload": "{ version: String }"
        },
        {
          "name": "SelfUpdateCompleted",
          "start_line": 73,
          "doc": [
            "Self-update completed"
          ],
          "attributes": [],
          "payload": "{\nold_version: String,\nnew_version: String,\nduration_ms: u64,\n}"
        },
        {
          "name": "CleanupStarting",
          "start_line": 80,
          "doc": [
            "Cleanup starting"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "CleanupProgress",
          "start_line": 83,
          "doc": [
            "Cleanup progress"
          ],
          "attributes": [],
          "payload": "{\nitems_processed: usize,\ntotal_items: usize,\n}"
        },
        {
          "name": "CleanupCompleted",
          "start_line": 89,
          "doc": [
            "Cleanup completed"
          ],
          "attributes": [],
          "payload": "{\nstates_removed: usize,\npackages_removed: usize,\nduration_ms: u64,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "HealthStatus",
      "module": "events::package",
      "path": "crates/events/src/events/package.rs",
      "start_line": 99,
      "doc": [
        "Health status for components"
      ],
      "definition": "pub enum HealthStatus {\n    Healthy,\n    Warning,\n    Error,\n}",
      "variants": [
        {
          "name": "Healthy",
          "start_line": 100,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Warning",
          "start_line": 101,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Error",
          "start_line": 102,
          "doc": [],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "PlatformEvent",
      "module": "events::platform",
      "path": "crates/events/src/events/platform.rs",
      "start_line": 9,
      "doc": [
        "Platform operation events for tracking platform-specific operations"
      ],
      "definition": "pub enum PlatformEvent {\n    /// Binary operation started (`install_name_tool`, `otool`, `codesign`)\n    BinaryOperationStarted {\n        /// Operation name (e.g., `get_install_name`, `sign_binary`)\n        operation: String,\n        /// Path to the binary being operated on\n        binary_path: String,\n        /// Additional context for the operation\n        context: HashMap<String, String>,\n    },\n\n    /// Binary operation completed successfully\n    BinaryOperationCompleted {\n        /// Operation name that completed\n        operation: String,\n        /// Path to the binary that was operated on\n        binary_path: String,\n        /// List of changes made during the operation\n        changes_made: Vec<String>,\n        /// Duration of the operation in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Binary operation failed\n    BinaryOperationFailed {\n        /// Operation name that failed\n        operation: String,\n        /// Path to the binary that was being operated on\n        binary_path: String,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Filesystem operation started (APFS clone, atomic operations)\n    FilesystemOperationStarted {\n        /// Operation name (e.g., `clone_file`, `atomic_rename`)\n        operation: String,\n        /// Source path (if applicable)\n        source_path: Option<String>,\n        /// Target path\n        target_path: String,\n        /// Additional operation context\n        context: HashMap<String, String>,\n    },\n\n    /// Filesystem operation completed successfully\n    FilesystemOperationCompleted {\n        /// Operation name that completed\n        operation: String,\n        /// List of paths affected by the operation\n        paths_affected: Vec<String>,\n        /// Duration of the operation in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Filesystem operation failed\n    FilesystemOperationFailed {\n        /// Operation name that failed\n        operation: String,\n        /// Paths involved in the failed operation\n        paths_involved: Vec<String>,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Process execution started\n    ProcessExecutionStarted {\n        /// Command being executed\n        command: String,\n        /// Command arguments\n        args: Vec<String>,\n        /// Working directory (if set)\n        working_dir: Option<String>,\n    },\n\n    /// Process execution completed\n    ProcessExecutionCompleted {\n        /// Command that was executed\n        command: String,\n        /// Exit code from the process\n        exit_code: i32,\n        /// Duration of execution in milliseconds\n        duration_ms: u64,\n        /// Size of stdout in bytes\n        stdout_bytes: usize,\n        /// Size of stderr in bytes\n        stderr_bytes: usize,\n    },\n\n    /// Process execution failed\n    ProcessExecutionFailed {\n        /// Command that failed\n        command: String,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Platform capability check started\n    CapabilityCheckStarted {\n        /// Capability being checked (e.g., `codesign_available`)\n        capability: String,\n    },\n\n    /// Platform capability check completed\n    CapabilityCheckCompleted {\n        /// Capability that was checked\n        capability: String,\n        /// Whether the capability is available\n        available: bool,\n        /// Additional details about the capability\n        details: HashMap<String, String>,\n    },\n\n    /// Tool discovery started\n    ToolDiscoveryStarted {\n        /// Name of the tool being discovered\n        tool: String,\n        /// Paths being searched for the tool\n        search_paths: Vec<std::path::PathBuf>,\n    },\n\n    /// Tool discovered successfully\n    ToolDiscovered {\n        /// Name of the tool that was discovered\n        tool: String,\n        /// Full path to the discovered tool\n        path: std::path::PathBuf,\n        /// Tool version if detectable\n        version: Option<String>,\n    },\n\n    /// Tool not found after searching\n    ToolNotFound {\n        /// Name of the tool that was not found\n        tool: String,\n        /// Paths that were searched\n        searched_paths: Vec<std::path::PathBuf>,\n        /// Installation suggestion for the tool\n        suggestion: String,\n    },\n}",
      "variants": [
        {
          "name": "BinaryOperationStarted",
          "start_line": 11,
          "doc": [
            "Binary operation started (`install_name_tool`, `otool`, `codesign`)"
          ],
          "attributes": [],
          "payload": "{\n/// Operation name (e.g., `get_install_name`, `sign_binary`)\noperation: String,\n/// Path to the binary being operated on\nbinary_path: String,\n/// Additional context for the operation\ncontext: HashMap<String, String>,\n}"
        },
        {
          "name": "BinaryOperationCompleted",
          "start_line": 21,
          "doc": [
            "Binary operation completed successfully"
          ],
          "attributes": [],
          "payload": "{\n/// Operation name that completed\noperation: String,\n/// Path to the binary that was operated on\nbinary_path: String,\n/// List of changes made during the operation\nchanges_made: Vec<String>,\n/// Duration of the operation in milliseconds\nduration_ms: u64,\n}"
        },
        {
          "name": "BinaryOperationFailed",
          "start_line": 33,
          "doc": [
            "Binary operation failed"
          ],
          "attributes": [],
          "payload": "{\n/// Operation name that failed\noperation: String,\n/// Path to the binary that was being operated on\nbinary_path: String,\n/// Error message\nerror_message: String,\n/// Duration before failure in milliseconds\nduration_ms: u64,\n}"
        },
        {
          "name": "FilesystemOperationStarted",
          "start_line": 45,
          "doc": [
            "Filesystem operation started (APFS clone, atomic operations)"
          ],
          "attributes": [],
          "payload": "{\n/// Operation name (e.g., `clone_file`, `atomic_rename`)\noperation: String,\n/// Source path (if applicable)\nsource_path: Option<String>,\n/// Target path\ntarget_path: String,\n/// Additional operation context\ncontext: HashMap<String, String>,\n}"
        },
        {
          "name": "FilesystemOperationCompleted",
          "start_line": 57,
          "doc": [
            "Filesystem operation completed successfully"
          ],
          "attributes": [],
          "payload": "{\n/// Operation name that completed\noperation: String,\n/// List of paths affected by the operation\npaths_affected: Vec<String>,\n/// Duration of the operation in milliseconds\nduration_ms: u64,\n}"
        },
        {
          "name": "FilesystemOperationFailed",
          "start_line": 67,
          "doc": [
            "Filesystem operation failed"
          ],
          "attributes": [],
          "payload": "{\n/// Operation name that failed\noperation: String,\n/// Paths involved in the failed operation\npaths_involved: Vec<String>,\n/// Error message\nerror_message: String,\n/// Duration before failure in milliseconds\nduration_ms: u64,\n}"
        },
        {
          "name": "ProcessExecutionStarted",
          "start_line": 79,
          "doc": [
            "Process execution started"
          ],
          "attributes": [],
          "payload": "{\n/// Command being executed\ncommand: String,\n/// Command arguments\nargs: Vec<String>,\n/// Working directory (if set)\nworking_dir: Option<String>,\n}"
        },
        {
          "name": "ProcessExecutionCompleted",
          "start_line": 89,
          "doc": [
            "Process execution completed"
          ],
          "attributes": [],
          "payload": "{\n/// Command that was executed\ncommand: String,\n/// Exit code from the process\nexit_code: i32,\n/// Duration of execution in milliseconds\nduration_ms: u64,\n/// Size of stdout in bytes\nstdout_bytes: usize,\n/// Size of stderr in bytes\nstderr_bytes: usize,\n}"
        },
        {
          "name": "ProcessExecutionFailed",
          "start_line": 103,
          "doc": [
            "Process execution failed"
          ],
          "attributes": [],
          "payload": "{\n/// Command that failed\ncommand: String,\n/// Error message\nerror_message: String,\n/// Duration before failure in milliseconds\nduration_ms: u64,\n}"
        },
        {
          "name": "CapabilityCheckStarted",
          "start_line": 113,
          "doc": [
            "Platform capability check started"
          ],
          "attributes": [],
          "payload": "{\n/// Capability being checked (e.g., `codesign_available`)\ncapability: String,\n}"
        },
        {
          "name": "CapabilityCheckCompleted",
          "start_line": 119,
          "doc": [
            "Platform capability check completed"
          ],
          "attributes": [],
          "payload": "{\n/// Capability that was checked\ncapability: String,\n/// Whether the capability is available\navailable: bool,\n/// Additional details about the capability\ndetails: HashMap<String, String>,\n}"
        },
        {
          "name": "ToolDiscoveryStarted",
          "start_line": 129,
          "doc": [
            "Tool discovery started"
          ],
          "attributes": [],
          "payload": "{\n/// Name of the tool being discovered\ntool: String,\n/// Paths being searched for the tool\nsearch_paths: Vec<std::path::PathBuf>,\n}"
        },
        {
          "name": "ToolDiscovered",
          "start_line": 137,
          "doc": [
            "Tool discovered successfully"
          ],
          "attributes": [],
          "payload": "{\n/// Name of the tool that was discovered\ntool: String,\n/// Full path to the discovered tool\npath: std::path::PathBuf,\n/// Tool version if detectable\nversion: Option<String>,\n}"
        },
        {
          "name": "ToolNotFound",
          "start_line": 147,
          "doc": [
            "Tool not found after searching"
          ],
          "attributes": [],
          "payload": "{\n/// Name of the tool that was not found\ntool: String,\n/// Paths that were searched\nsearched_paths: Vec<std::path::PathBuf>,\n/// Installation suggestion for the tool\nsuggestion: String,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ProgressEvent",
      "module": "events::progress",
      "path": "crates/events/src/events/progress.rs",
      "start_line": 9,
      "doc": [
        "Progress tracking events with sophisticated algorithms"
      ],
      "definition": "pub enum ProgressEvent {\n    /// Progress tracking started\n    Started {\n        id: String,\n        operation: String,\n        total: Option<u64>,\n        phases: Vec<ProgressPhase>,\n        parent_id: Option<String>,\n    },\n\n    /// Progress updated with calculated metrics\n    Updated {\n        id: String,\n        current: u64,\n        total: Option<u64>,\n        phase: Option<usize>,\n        speed: Option<f64>,\n        eta: Option<Duration>,\n        efficiency: Option<f64>,\n    },\n\n    /// Progress phase changed\n    PhaseChanged {\n        id: String,\n        phase: usize,\n        phase_name: String,\n    },\n\n    /// Progress completed successfully\n    Completed {\n        id: String,\n        duration: Duration,\n        final_speed: Option<f64>,\n        total_processed: u64,\n    },\n\n    /// Progress failed\n    Failed {\n        id: String,\n        error: String,\n        completed_items: u64,\n        partial_duration: Duration,\n    },\n\n    /// Progress paused\n    Paused {\n        id: String,\n        reason: String,\n        items_completed: u64,\n    },\n\n    /// Progress resumed\n    Resumed {\n        id: String,\n        pause_duration: Duration,\n    },\n\n    /// Nested progress - child operation started\n    ChildStarted {\n        parent_id: String,\n        child_id: String,\n        operation: String,\n        weight: f64, // Contribution to parent progress (0.0-1.0)\n    },\n\n    /// Nested progress - child operation completed\n    ChildCompleted {\n        parent_id: String,\n        child_id: String,\n        success: bool,\n    },\n\n    /// Batch progress aggregate\n    BatchProgress {\n        batch_id: String,\n        completed_items: usize,\n        failed_items: usize,\n        in_progress_items: usize,\n        queued_items: usize,\n        total_items: usize,\n        overall_progress: f64,\n        aggregate_speed: Option<f64>,\n        estimated_completion: Option<Duration>,\n    },\n\n    /// Progress statistics update\n    StatisticsUpdated {\n        id: String,\n        items_per_second: f64,\n        bytes_per_second: Option<f64>,\n        success_rate: f64,\n        error_rate: f64,\n        cache_hit_rate: Option<f64>,\n    },\n\n    /// Progress bottleneck detected\n    BottleneckDetected {\n        id: String,\n        bottleneck_type: String, // \"cpu\", \"memory\", \"network\", \"disk\"\n        severity: f64,           // 0.0-1.0\n        suggested_action: Option<String>,\n    },\n\n    /// Progress stalled detection\n    Stalled {\n        id: String,\n        stall_duration: Duration,\n        last_progress_time: std::time::SystemTime,\n        suspected_cause: Option<String>,\n    },\n\n    /// Progress estimate refined\n    EstimateRefined {\n        id: String,\n        new_eta: Duration,\n        confidence: f64, // 0.0-1.0\n        refinement_reason: String,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 11,
          "doc": [
            "Progress tracking started"
          ],
          "attributes": [],
          "payload": "{\nid: String,\noperation: String,\ntotal: Option<u64>,\nphases: Vec<ProgressPhase>,\nparent_id: Option<String>,\n}"
        },
        {
          "name": "Updated",
          "start_line": 20,
          "doc": [
            "Progress updated with calculated metrics"
          ],
          "attributes": [],
          "payload": "{\nid: String,\ncurrent: u64,\ntotal: Option<u64>,\nphase: Option<usize>,\nspeed: Option<f64>,\neta: Option<Duration>,\nefficiency: Option<f64>,\n}"
        },
        {
          "name": "PhaseChanged",
          "start_line": 31,
          "doc": [
            "Progress phase changed"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nphase: usize,\nphase_name: String,\n}"
        },
        {
          "name": "Completed",
          "start_line": 38,
          "doc": [
            "Progress completed successfully"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nduration: Duration,\nfinal_speed: Option<f64>,\ntotal_processed: u64,\n}"
        },
        {
          "name": "Failed",
          "start_line": 46,
          "doc": [
            "Progress failed"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nerror: String,\ncompleted_items: u64,\npartial_duration: Duration,\n}"
        },
        {
          "name": "Paused",
          "start_line": 54,
          "doc": [
            "Progress paused"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nreason: String,\nitems_completed: u64,\n}"
        },
        {
          "name": "Resumed",
          "start_line": 61,
          "doc": [
            "Progress resumed"
          ],
          "attributes": [],
          "payload": "{\nid: String,\npause_duration: Duration,\n}"
        },
        {
          "name": "ChildStarted",
          "start_line": 67,
          "doc": [
            "Nested progress - child operation started"
          ],
          "attributes": [],
          "payload": "{\nparent_id: String,\nchild_id: String,\noperation: String,\nweight: f64, // Contribution to parent progress (0.0-1.0)\n}"
        },
        {
          "name": "ChildCompleted",
          "start_line": 75,
          "doc": [
            "Nested progress - child operation completed"
          ],
          "attributes": [],
          "payload": "{\nparent_id: String,\nchild_id: String,\nsuccess: bool,\n}"
        },
        {
          "name": "BatchProgress",
          "start_line": 82,
          "doc": [
            "Batch progress aggregate"
          ],
          "attributes": [],
          "payload": "{\nbatch_id: String,\ncompleted_items: usize,\nfailed_items: usize,\nin_progress_items: usize,\nqueued_items: usize,\ntotal_items: usize,\noverall_progress: f64,\naggregate_speed: Option<f64>,\nestimated_completion: Option<Duration>,\n}"
        },
        {
          "name": "StatisticsUpdated",
          "start_line": 95,
          "doc": [
            "Progress statistics update"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nitems_per_second: f64,\nbytes_per_second: Option<f64>,\nsuccess_rate: f64,\nerror_rate: f64,\ncache_hit_rate: Option<f64>,\n}"
        },
        {
          "name": "BottleneckDetected",
          "start_line": 105,
          "doc": [
            "Progress bottleneck detected"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nbottleneck_type: String, // \"cpu\", \"memory\", \"network\", \"disk\"\nseverity: f64,           // 0.0-1.0\nsuggested_action: Option<String>,\n}"
        },
        {
          "name": "Stalled",
          "start_line": 113,
          "doc": [
            "Progress stalled detection"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nstall_duration: Duration,\nlast_progress_time: std::time::SystemTime,\nsuspected_cause: Option<String>,\n}"
        },
        {
          "name": "EstimateRefined",
          "start_line": 121,
          "doc": [
            "Progress estimate refined"
          ],
          "attributes": [],
          "payload": "{\nid: String,\nnew_eta: Duration,\nconfidence: f64, // 0.0-1.0\nrefinement_reason: String,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "PythonEvent",
      "module": "events::python",
      "path": "crates/events/src/events/python.rs",
      "start_line": 7,
      "doc": [
        "Python virtual environment events"
      ],
      "definition": "pub enum PythonEvent {\n    /// Python virtual environment creating\n    VenvCreating {\n        package: String,\n        version: Version,\n        venv_path: String,\n    },\n\n    /// Python virtual environment created\n    VenvCreated {\n        package: String,\n        version: Version,\n        venv_path: String,\n    },\n\n    /// Python wheel installing\n    WheelInstalling {\n        package: String,\n        version: Version,\n        wheel_file: String,\n    },\n\n    /// Python wheel installed\n    WheelInstalled { package: String, version: Version },\n\n    /// Python wrapper creating\n    WrapperCreating {\n        package: String,\n        executable: String,\n        wrapper_path: String,\n    },\n\n    /// Python wrapper created\n    WrapperCreated {\n        package: String,\n        executable: String,\n        wrapper_path: String,\n    },\n\n    /// Python virtual environment cloning\n    VenvCloning {\n        package: String,\n        version: Version,\n        from_path: String,\n        to_path: String,\n    },\n\n    /// Python virtual environment cloned\n    VenvCloned {\n        package: String,\n        version: Version,\n        from_path: String,\n        to_path: String,\n    },\n\n    /// Python virtual environment removing\n    VenvRemoving {\n        package: String,\n        version: Version,\n        venv_path: String,\n    },\n\n    /// Python virtual environment removed\n    VenvRemoved {\n        package: String,\n        version: Version,\n        venv_path: String,\n    },\n}",
      "variants": [
        {
          "name": "VenvCreating",
          "start_line": 9,
          "doc": [
            "Python virtual environment creating"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nvenv_path: String,\n}"
        },
        {
          "name": "VenvCreated",
          "start_line": 16,
          "doc": [
            "Python virtual environment created"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nvenv_path: String,\n}"
        },
        {
          "name": "WheelInstalling",
          "start_line": 23,
          "doc": [
            "Python wheel installing"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nwheel_file: String,\n}"
        },
        {
          "name": "WheelInstalled",
          "start_line": 30,
          "doc": [
            "Python wheel installed"
          ],
          "attributes": [],
          "payload": "{ package: String, version: Version }"
        },
        {
          "name": "WrapperCreating",
          "start_line": 33,
          "doc": [
            "Python wrapper creating"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nexecutable: String,\nwrapper_path: String,\n}"
        },
        {
          "name": "WrapperCreated",
          "start_line": 40,
          "doc": [
            "Python wrapper created"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nexecutable: String,\nwrapper_path: String,\n}"
        },
        {
          "name": "VenvCloning",
          "start_line": 47,
          "doc": [
            "Python virtual environment cloning"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfrom_path: String,\nto_path: String,\n}"
        },
        {
          "name": "VenvCloned",
          "start_line": 55,
          "doc": [
            "Python virtual environment cloned"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfrom_path: String,\nto_path: String,\n}"
        },
        {
          "name": "VenvRemoving",
          "start_line": 63,
          "doc": [
            "Python virtual environment removing"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nvenv_path: String,\n}"
        },
        {
          "name": "VenvRemoved",
          "start_line": 70,
          "doc": [
            "Python virtual environment removed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nvenv_path: String,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "QaEvent",
      "module": "events::qa",
      "path": "crates/events/src/events/qa.rs",
      "start_line": 7,
      "doc": [
        "Quality assurance events for artifact validation"
      ],
      "definition": "pub enum QaEvent {\n    /// QA pipeline started\n    PipelineStarted {\n        package: String,\n        version: String,\n        qa_level: String,\n    },\n\n    /// QA pipeline completed\n    PipelineCompleted {\n        package: String,\n        version: String,\n        total_checks: usize,\n        passed: usize,\n        failed: usize,\n        duration_seconds: u64,\n    },\n\n    /// QA check started\n    CheckStarted {\n        check_type: String,\n        check_name: String,\n    },\n\n    /// QA check completed\n    CheckCompleted {\n        check_type: String,\n        check_name: String,\n        findings_count: usize,\n        severity_counts: HashMap<String, usize>,\n    },\n\n    /// QA check failed\n    CheckFailed {\n        check_type: String,\n        check_name: String,\n        error: String,\n    },\n\n    /// QA finding reported\n    FindingReported {\n        check_type: String,\n        severity: String,\n        message: String,\n        file_path: Option<String>,\n        line: Option<usize>,\n    },\n\n    /// QA report generated\n    ReportGenerated {\n        format: String,\n        path: Option<String>,\n    },\n\n    /// QA validation phase started\n    ValidationPhaseStarted {\n        phase: String,\n        validators: Vec<String>,\n    },\n\n    /// QA validation phase completed\n    ValidationPhaseCompleted {\n        phase: String,\n        findings_count: usize,\n    },\n\n    /// QA patching phase started\n    PatchingPhaseStarted { patchers: Vec<String> },\n\n    /// QA patching phase completed\n    PatchingPhaseCompleted { patches_applied: usize },\n}",
      "variants": [
        {
          "name": "PipelineStarted",
          "start_line": 9,
          "doc": [
            "QA pipeline started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: String,\nqa_level: String,\n}"
        },
        {
          "name": "PipelineCompleted",
          "start_line": 16,
          "doc": [
            "QA pipeline completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: String,\ntotal_checks: usize,\npassed: usize,\nfailed: usize,\nduration_seconds: u64,\n}"
        },
        {
          "name": "CheckStarted",
          "start_line": 26,
          "doc": [
            "QA check started"
          ],
          "attributes": [],
          "payload": "{\ncheck_type: String,\ncheck_name: String,\n}"
        },
        {
          "name": "CheckCompleted",
          "start_line": 32,
          "doc": [
            "QA check completed"
          ],
          "attributes": [],
          "payload": "{\ncheck_type: String,\ncheck_name: String,\nfindings_count: usize,\nseverity_counts: HashMap<String, usize>,\n}"
        },
        {
          "name": "CheckFailed",
          "start_line": 40,
          "doc": [
            "QA check failed"
          ],
          "attributes": [],
          "payload": "{\ncheck_type: String,\ncheck_name: String,\nerror: String,\n}"
        },
        {
          "name": "FindingReported",
          "start_line": 47,
          "doc": [
            "QA finding reported"
          ],
          "attributes": [],
          "payload": "{\ncheck_type: String,\nseverity: String,\nmessage: String,\nfile_path: Option<String>,\nline: Option<usize>,\n}"
        },
        {
          "name": "ReportGenerated",
          "start_line": 56,
          "doc": [
            "QA report generated"
          ],
          "attributes": [],
          "payload": "{\nformat: String,\npath: Option<String>,\n}"
        },
        {
          "name": "ValidationPhaseStarted",
          "start_line": 62,
          "doc": [
            "QA validation phase started"
          ],
          "attributes": [],
          "payload": "{\nphase: String,\nvalidators: Vec<String>,\n}"
        },
        {
          "name": "ValidationPhaseCompleted",
          "start_line": 68,
          "doc": [
            "QA validation phase completed"
          ],
          "attributes": [],
          "payload": "{\nphase: String,\nfindings_count: usize,\n}"
        },
        {
          "name": "PatchingPhaseStarted",
          "start_line": 74,
          "doc": [
            "QA patching phase started"
          ],
          "attributes": [],
          "payload": "{ patchers: Vec<String> }"
        },
        {
          "name": "PatchingPhaseCompleted",
          "start_line": 77,
          "doc": [
            "QA patching phase completed"
          ],
          "attributes": [],
          "payload": "{ patches_applied: usize }"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "RepoEvent",
      "module": "events::repo",
      "path": "crates/events/src/events/repo.rs",
      "start_line": 6,
      "doc": [
        "Repository and index management events"
      ],
      "definition": "pub enum RepoEvent {\n    /// Repository synchronization starting\n    SyncStarting,\n\n    /// Repository synchronization started with URL\n    SyncStarted { url: String },\n\n    /// Repository synchronization progress\n    SyncProgress {\n        bytes_downloaded: u64,\n        total_bytes: Option<u64>,\n        current_file: Option<String>,\n    },\n\n    /// Repository synchronization completed\n    SyncCompleted {\n        packages_updated: usize,\n        duration_ms: u64,\n        bytes_transferred: u64,\n    },\n\n    /// Repository synchronization failed\n    SyncFailed {\n        url: String,\n        error: String,\n        retry_count: usize,\n    },\n\n    /// Index update starting\n    IndexUpdateStarting { url: String },\n\n    /// Index update progress\n    IndexUpdateProgress {\n        processed_entries: usize,\n        total_entries: Option<usize>,\n    },\n\n    /// Index update completed\n    IndexUpdateCompleted {\n        packages_added: usize,\n        packages_updated: usize,\n        packages_removed: usize,\n        duration_ms: u64,\n    },\n\n    /// Index update failed\n    IndexUpdateFailed { url: String, error: String },\n\n    /// Repository validation started\n    ValidationStarted { repository_count: usize },\n\n    /// Repository validation progress\n    ValidationProgress {\n        validated_repos: usize,\n        total_repos: usize,\n        current_repo: String,\n    },\n\n    /// Repository validation completed\n    ValidationCompleted {\n        valid_repos: usize,\n        invalid_repos: usize,\n        warnings: Vec<String>,\n    },\n\n    /// Repository cache updated\n    CacheUpdated {\n        cache_type: String, // \"metadata\", \"packages\", \"signatures\"\n        entries_updated: usize,\n        cache_size_bytes: u64,\n    },\n\n    /// Repository cache invalidated\n    CacheInvalidated {\n        cache_type: String,\n        reason: String,\n        entries_removed: usize,\n    },\n\n    /// Mirror switched\n    MirrorSwitched {\n        from_url: String,\n        to_url: String,\n        reason: String,\n    },\n\n    /// Mirror health check\n    MirrorHealthCheck {\n        url: String,\n        healthy: bool,\n        response_time_ms: u64,\n    },\n}",
      "variants": [
        {
          "name": "SyncStarting",
          "start_line": 8,
          "doc": [
            "Repository synchronization starting"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "SyncStarted",
          "start_line": 11,
          "doc": [
            "Repository synchronization started with URL"
          ],
          "attributes": [],
          "payload": "{ url: String }"
        },
        {
          "name": "SyncProgress",
          "start_line": 14,
          "doc": [
            "Repository synchronization progress"
          ],
          "attributes": [],
          "payload": "{\nbytes_downloaded: u64,\ntotal_bytes: Option<u64>,\ncurrent_file: Option<String>,\n}"
        },
        {
          "name": "SyncCompleted",
          "start_line": 21,
          "doc": [
            "Repository synchronization completed"
          ],
          "attributes": [],
          "payload": "{\npackages_updated: usize,\nduration_ms: u64,\nbytes_transferred: u64,\n}"
        },
        {
          "name": "SyncFailed",
          "start_line": 28,
          "doc": [
            "Repository synchronization failed"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\nerror: String,\nretry_count: usize,\n}"
        },
        {
          "name": "IndexUpdateStarting",
          "start_line": 35,
          "doc": [
            "Index update starting"
          ],
          "attributes": [],
          "payload": "{ url: String }"
        },
        {
          "name": "IndexUpdateProgress",
          "start_line": 38,
          "doc": [
            "Index update progress"
          ],
          "attributes": [],
          "payload": "{\nprocessed_entries: usize,\ntotal_entries: Option<usize>,\n}"
        },
        {
          "name": "IndexUpdateCompleted",
          "start_line": 44,
          "doc": [
            "Index update completed"
          ],
          "attributes": [],
          "payload": "{\npackages_added: usize,\npackages_updated: usize,\npackages_removed: usize,\nduration_ms: u64,\n}"
        },
        {
          "name": "IndexUpdateFailed",
          "start_line": 52,
          "doc": [
            "Index update failed"
          ],
          "attributes": [],
          "payload": "{ url: String, error: String }"
        },
        {
          "name": "ValidationStarted",
          "start_line": 55,
          "doc": [
            "Repository validation started"
          ],
          "attributes": [],
          "payload": "{ repository_count: usize }"
        },
        {
          "name": "ValidationProgress",
          "start_line": 58,
          "doc": [
            "Repository validation progress"
          ],
          "attributes": [],
          "payload": "{\nvalidated_repos: usize,\ntotal_repos: usize,\ncurrent_repo: String,\n}"
        },
        {
          "name": "ValidationCompleted",
          "start_line": 65,
          "doc": [
            "Repository validation completed"
          ],
          "attributes": [],
          "payload": "{\nvalid_repos: usize,\ninvalid_repos: usize,\nwarnings: Vec<String>,\n}"
        },
        {
          "name": "CacheUpdated",
          "start_line": 72,
          "doc": [
            "Repository cache updated"
          ],
          "attributes": [],
          "payload": "{\ncache_type: String, // \"metadata\", \"packages\", \"signatures\"\nentries_updated: usize,\ncache_size_bytes: u64,\n}"
        },
        {
          "name": "CacheInvalidated",
          "start_line": 79,
          "doc": [
            "Repository cache invalidated"
          ],
          "attributes": [],
          "payload": "{\ncache_type: String,\nreason: String,\nentries_removed: usize,\n}"
        },
        {
          "name": "MirrorSwitched",
          "start_line": 86,
          "doc": [
            "Mirror switched"
          ],
          "attributes": [],
          "payload": "{\nfrom_url: String,\nto_url: String,\nreason: String,\n}"
        },
        {
          "name": "MirrorHealthCheck",
          "start_line": 93,
          "doc": [
            "Mirror health check"
          ],
          "attributes": [],
          "payload": "{\nurl: String,\nhealthy: bool,\nresponse_time_ms: u64,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ResolverEvent",
      "module": "events::resolver",
      "path": "crates/events/src/events/resolver.rs",
      "start_line": 6,
      "doc": [
        "Resolver domain events for dependency resolution and SAT solving"
      ],
      "definition": "pub enum ResolverEvent {\n    /// High-level resolution flow started\n    ResolutionStarted {\n        runtime_deps: usize,\n        build_deps: usize,\n        local_files: usize,\n        timeout_seconds: u64,\n    },\n\n    /// Resolution completed successfully\n    ResolutionCompleted {\n        total_packages: usize,\n        execution_batches: usize,\n        duration_ms: u64,\n        packages_resolved: Vec<String>,\n    },\n\n    /// Resolution failed after all attempts\n    ResolutionFailed {\n        reason: String,\n        attempts: u32,\n        partial_solution: Option<Vec<String>>,\n    },\n\n    /// Resolution timed out\n    ResolutionTimedOut {\n        timeout_seconds: u64,\n        packages_processed: usize,\n        current_phase: String,\n    },\n\n    /// Installed package checking phase started\n    InstalledPackageCheckStarted { dependency_count: usize },\n\n    /// Installed package satisfies dependency\n    InstalledPackageSatisfied {\n        package: String,\n        version: String,\n        spec: String,\n        installation_path: Option<String>,\n    },\n\n    /// Installed package check failed\n    InstalledPackageCheckFailed {\n        package: String,\n        spec: String,\n        reason: String,\n    },\n\n    /// SAT solving phase started\n    SatSolvingStarted {\n        variables: usize,\n        clauses: usize,\n        required_packages: usize,\n        optional_packages: usize,\n    },\n\n    /// SAT solving progress update\n    SatSolvingProgress {\n        decisions: u64,\n        propagations: u64,\n        conflicts: u64,\n        learned_clauses: u64,\n        restarts: u64,\n        current_level: u32,\n    },\n\n    /// SAT conflict detected during solving\n    SatConflictDetected {\n        conflict_level: u32,\n        learned_clause_size: usize,\n        backtrack_level: u32,\n        conflicting_variables: Vec<String>,\n    },\n\n    /// SAT restart triggered by heuristic\n    SatRestartTriggered {\n        restart_count: u64,\n        conflicts_since_last: u64,\n        reason: String, // \"luby_sequence\", \"geometric\", \"threshold\"\n    },\n\n    /// SAT variable assignment made\n    SatVariableAssigned {\n        variable: String,\n        value: bool,\n        decision_level: u32,\n        reason: String, // \"decision\", \"unit_propagation\", \"conflict_analysis\"\n    },\n\n    /// SAT solving completed\n    SatSolvingCompleted {\n        solution_found: bool,\n        final_stats: SolverStats,\n        duration_ms: u64,\n        learned_clauses_retained: usize,\n    },\n\n    /// Dependency conflict detected\n    DependencyConflictDetected {\n        conflicting_packages: Vec<(String, String)>, // (package, version)\n        message: String,\n        conflict_type: DependencyConflictType,\n        suggestion_count: usize,\n    },\n\n    /// Conflict resolution suggestions generated\n    DependencyConflictSuggestions {\n        suggestions: Vec<String>,\n        automated_resolution_possible: bool,\n        confidence_score: f64,\n    },\n\n    /// Conflict analysis started\n    ConflictAnalysisStarted {\n        conflict_clause_size: usize,\n        current_level: u32,\n    },\n\n    /// Conflict analysis completed\n    ConflictAnalysisCompleted {\n        learned_clause_size: usize,\n        backtrack_level: u32,\n        analysis_duration_ms: u64,\n    },\n\n    /// Dependency graph construction started\n    DependencyGraphBuilding {\n        expected_nodes: usize,\n        expected_edges: usize,\n    },\n\n    /// Dependency graph construction completed\n    DependencyGraphBuilt {\n        node_count: usize,\n        edge_count: usize,\n        max_depth: usize,\n        strongly_connected_components: usize,\n    },\n\n    /// Topological sort started\n    TopologicalSortStarted {\n        node_count: usize,\n        edge_count: usize,\n    },\n\n    /// Topological sort completed\n    TopologicalSortCompleted {\n        execution_batches: usize,\n        parallel_capacity: usize,\n        critical_path_length: usize,\n    },\n\n    /// Circular dependency detected\n    CycleDetected {\n        cycle_packages: Vec<String>,\n        cycle_length: usize,\n        break_suggestions: Vec<String>,\n    },\n\n    /// Execution plan generated\n    ExecutionPlanGenerated {\n        batch_count: usize,\n        parallel_packages: usize,\n        sequential_packages: usize,\n        estimated_duration_minutes: Option<f64>,\n    },\n\n    /// Version constraint processing started\n    VersionConstraintProcessing {\n        package: String,\n        constraint_spec: String,\n        available_versions: usize,\n    },\n\n    /// Version constraint processing completed\n    VersionConstraintResolved {\n        package: String,\n        selected_version: String,\n        matching_versions: usize,\n        selection_reason: String, // \"latest\", \"constraint\", \"dependency\"\n    },\n\n    /// Transitive dependency discovered\n    TransitiveDependencyDiscovered {\n        parent_package: String,\n        dependency_package: String,\n        dependency_type: String, // \"runtime\", \"build\", \"optional\"\n        depth: u32,\n        version_constraint: String,\n    },\n\n    /// Dependency chain analysis\n    DependencyChainAnalyzed {\n        root_package: String,\n        chain_length: usize,\n        total_dependencies: usize,\n        unique_packages: usize,\n        potential_conflicts: usize,\n    },\n\n    /// Local package processing started\n    LocalPackageProcessingStarted {\n        file_path: String,\n        expected_format: String,\n    },\n\n    /// Local manifest extracted successfully\n    LocalManifestExtracted {\n        package_name: String,\n        version: String,\n        dependencies: usize,\n        file_path: String,\n        manifest_size: usize,\n    },\n\n    /// Local package processing failed\n    LocalPackageProcessingFailed {\n        file_path: String,\n        error: String,\n        stage: String, // \"extraction\", \"parsing\", \"validation\"\n    },\n\n    /// Constraint propagation started\n    ConstraintPropagationStarted {\n        active_constraints: usize,\n        unassigned_variables: usize,\n    },\n\n    /// Unit clause detected during propagation\n    UnitClauseDetected {\n        variable: String,\n        forced_value: bool,\n        clause_id: usize,\n    },\n\n    /// Constraint propagation completed\n    ConstraintPropagationCompleted {\n        propagated_assignments: usize,\n        new_unit_clauses: usize,\n        conflicts_detected: usize,\n    },\n\n    /// Solution validation started\n    SolutionValidationStarted {\n        packages_to_validate: usize,\n        constraints_to_check: usize,\n    },\n\n    /// Solution validation completed\n    SolutionValidationCompleted {\n        validation_passed: bool,\n        constraint_violations: usize,\n        warnings: usize,\n    },\n}",
      "variants": [
        {
          "name": "ResolutionStarted",
          "start_line": 8,
          "doc": [
            "High-level resolution flow started"
          ],
          "attributes": [],
          "payload": "{\nruntime_deps: usize,\nbuild_deps: usize,\nlocal_files: usize,\ntimeout_seconds: u64,\n}"
        },
        {
          "name": "ResolutionCompleted",
          "start_line": 16,
          "doc": [
            "Resolution completed successfully"
          ],
          "attributes": [],
          "payload": "{\ntotal_packages: usize,\nexecution_batches: usize,\nduration_ms: u64,\npackages_resolved: Vec<String>,\n}"
        },
        {
          "name": "ResolutionFailed",
          "start_line": 24,
          "doc": [
            "Resolution failed after all attempts"
          ],
          "attributes": [],
          "payload": "{\nreason: String,\nattempts: u32,\npartial_solution: Option<Vec<String>>,\n}"
        },
        {
          "name": "ResolutionTimedOut",
          "start_line": 31,
          "doc": [
            "Resolution timed out"
          ],
          "attributes": [],
          "payload": "{\ntimeout_seconds: u64,\npackages_processed: usize,\ncurrent_phase: String,\n}"
        },
        {
          "name": "InstalledPackageCheckStarted",
          "start_line": 38,
          "doc": [
            "Installed package checking phase started"
          ],
          "attributes": [],
          "payload": "{ dependency_count: usize }"
        },
        {
          "name": "InstalledPackageSatisfied",
          "start_line": 41,
          "doc": [
            "Installed package satisfies dependency"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: String,\nspec: String,\ninstallation_path: Option<String>,\n}"
        },
        {
          "name": "InstalledPackageCheckFailed",
          "start_line": 49,
          "doc": [
            "Installed package check failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nspec: String,\nreason: String,\n}"
        },
        {
          "name": "SatSolvingStarted",
          "start_line": 56,
          "doc": [
            "SAT solving phase started"
          ],
          "attributes": [],
          "payload": "{\nvariables: usize,\nclauses: usize,\nrequired_packages: usize,\noptional_packages: usize,\n}"
        },
        {
          "name": "SatSolvingProgress",
          "start_line": 64,
          "doc": [
            "SAT solving progress update"
          ],
          "attributes": [],
          "payload": "{\ndecisions: u64,\npropagations: u64,\nconflicts: u64,\nlearned_clauses: u64,\nrestarts: u64,\ncurrent_level: u32,\n}"
        },
        {
          "name": "SatConflictDetected",
          "start_line": 74,
          "doc": [
            "SAT conflict detected during solving"
          ],
          "attributes": [],
          "payload": "{\nconflict_level: u32,\nlearned_clause_size: usize,\nbacktrack_level: u32,\nconflicting_variables: Vec<String>,\n}"
        },
        {
          "name": "SatRestartTriggered",
          "start_line": 82,
          "doc": [
            "SAT restart triggered by heuristic"
          ],
          "attributes": [],
          "payload": "{\nrestart_count: u64,\nconflicts_since_last: u64,\nreason: String, // \"luby_sequence\", \"geometric\", \"threshold\"\n}"
        },
        {
          "name": "SatVariableAssigned",
          "start_line": 89,
          "doc": [
            "SAT variable assignment made"
          ],
          "attributes": [],
          "payload": "{\nvariable: String,\nvalue: bool,\ndecision_level: u32,\nreason: String, // \"decision\", \"unit_propagation\", \"conflict_analysis\"\n}"
        },
        {
          "name": "SatSolvingCompleted",
          "start_line": 97,
          "doc": [
            "SAT solving completed"
          ],
          "attributes": [],
          "payload": "{\nsolution_found: bool,\nfinal_stats: SolverStats,\nduration_ms: u64,\nlearned_clauses_retained: usize,\n}"
        },
        {
          "name": "DependencyConflictDetected",
          "start_line": 105,
          "doc": [
            "Dependency conflict detected"
          ],
          "attributes": [],
          "payload": "{\nconflicting_packages: Vec<(String, String)>, // (package, version)\nmessage: String,\nconflict_type: DependencyConflictType,\nsuggestion_count: usize,\n}"
        },
        {
          "name": "DependencyConflictSuggestions",
          "start_line": 113,
          "doc": [
            "Conflict resolution suggestions generated"
          ],
          "attributes": [],
          "payload": "{\nsuggestions: Vec<String>,\nautomated_resolution_possible: bool,\nconfidence_score: f64,\n}"
        },
        {
          "name": "ConflictAnalysisStarted",
          "start_line": 120,
          "doc": [
            "Conflict analysis started"
          ],
          "attributes": [],
          "payload": "{\nconflict_clause_size: usize,\ncurrent_level: u32,\n}"
        },
        {
          "name": "ConflictAnalysisCompleted",
          "start_line": 126,
          "doc": [
            "Conflict analysis completed"
          ],
          "attributes": [],
          "payload": "{\nlearned_clause_size: usize,\nbacktrack_level: u32,\nanalysis_duration_ms: u64,\n}"
        },
        {
          "name": "DependencyGraphBuilding",
          "start_line": 133,
          "doc": [
            "Dependency graph construction started"
          ],
          "attributes": [],
          "payload": "{\nexpected_nodes: usize,\nexpected_edges: usize,\n}"
        },
        {
          "name": "DependencyGraphBuilt",
          "start_line": 139,
          "doc": [
            "Dependency graph construction completed"
          ],
          "attributes": [],
          "payload": "{\nnode_count: usize,\nedge_count: usize,\nmax_depth: usize,\nstrongly_connected_components: usize,\n}"
        },
        {
          "name": "TopologicalSortStarted",
          "start_line": 147,
          "doc": [
            "Topological sort started"
          ],
          "attributes": [],
          "payload": "{\nnode_count: usize,\nedge_count: usize,\n}"
        },
        {
          "name": "TopologicalSortCompleted",
          "start_line": 153,
          "doc": [
            "Topological sort completed"
          ],
          "attributes": [],
          "payload": "{\nexecution_batches: usize,\nparallel_capacity: usize,\ncritical_path_length: usize,\n}"
        },
        {
          "name": "CycleDetected",
          "start_line": 160,
          "doc": [
            "Circular dependency detected"
          ],
          "attributes": [],
          "payload": "{\ncycle_packages: Vec<String>,\ncycle_length: usize,\nbreak_suggestions: Vec<String>,\n}"
        },
        {
          "name": "ExecutionPlanGenerated",
          "start_line": 167,
          "doc": [
            "Execution plan generated"
          ],
          "attributes": [],
          "payload": "{\nbatch_count: usize,\nparallel_packages: usize,\nsequential_packages: usize,\nestimated_duration_minutes: Option<f64>,\n}"
        },
        {
          "name": "VersionConstraintProcessing",
          "start_line": 175,
          "doc": [
            "Version constraint processing started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nconstraint_spec: String,\navailable_versions: usize,\n}"
        },
        {
          "name": "VersionConstraintResolved",
          "start_line": 182,
          "doc": [
            "Version constraint processing completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nselected_version: String,\nmatching_versions: usize,\nselection_reason: String, // \"latest\", \"constraint\", \"dependency\"\n}"
        },
        {
          "name": "TransitiveDependencyDiscovered",
          "start_line": 190,
          "doc": [
            "Transitive dependency discovered"
          ],
          "attributes": [],
          "payload": "{\nparent_package: String,\ndependency_package: String,\ndependency_type: String, // \"runtime\", \"build\", \"optional\"\ndepth: u32,\nversion_constraint: String,\n}"
        },
        {
          "name": "DependencyChainAnalyzed",
          "start_line": 199,
          "doc": [
            "Dependency chain analysis"
          ],
          "attributes": [],
          "payload": "{\nroot_package: String,\nchain_length: usize,\ntotal_dependencies: usize,\nunique_packages: usize,\npotential_conflicts: usize,\n}"
        },
        {
          "name": "LocalPackageProcessingStarted",
          "start_line": 208,
          "doc": [
            "Local package processing started"
          ],
          "attributes": [],
          "payload": "{\nfile_path: String,\nexpected_format: String,\n}"
        },
        {
          "name": "LocalManifestExtracted",
          "start_line": 214,
          "doc": [
            "Local manifest extracted successfully"
          ],
          "attributes": [],
          "payload": "{\npackage_name: String,\nversion: String,\ndependencies: usize,\nfile_path: String,\nmanifest_size: usize,\n}"
        },
        {
          "name": "LocalPackageProcessingFailed",
          "start_line": 223,
          "doc": [
            "Local package processing failed"
          ],
          "attributes": [],
          "payload": "{\nfile_path: String,\nerror: String,\nstage: String, // \"extraction\", \"parsing\", \"validation\"\n}"
        },
        {
          "name": "ConstraintPropagationStarted",
          "start_line": 230,
          "doc": [
            "Constraint propagation started"
          ],
          "attributes": [],
          "payload": "{\nactive_constraints: usize,\nunassigned_variables: usize,\n}"
        },
        {
          "name": "UnitClauseDetected",
          "start_line": 236,
          "doc": [
            "Unit clause detected during propagation"
          ],
          "attributes": [],
          "payload": "{\nvariable: String,\nforced_value: bool,\nclause_id: usize,\n}"
        },
        {
          "name": "ConstraintPropagationCompleted",
          "start_line": 243,
          "doc": [
            "Constraint propagation completed"
          ],
          "attributes": [],
          "payload": "{\npropagated_assignments: usize,\nnew_unit_clauses: usize,\nconflicts_detected: usize,\n}"
        },
        {
          "name": "SolutionValidationStarted",
          "start_line": 250,
          "doc": [
            "Solution validation started"
          ],
          "attributes": [],
          "payload": "{\npackages_to_validate: usize,\nconstraints_to_check: usize,\n}"
        },
        {
          "name": "SolutionValidationCompleted",
          "start_line": 256,
          "doc": [
            "Solution validation completed"
          ],
          "attributes": [],
          "payload": "{\nvalidation_passed: bool,\nconstraint_violations: usize,\nwarnings: usize,\n}"
        }
      ]
    },
    {
      "kind": "struct",
      "name": "SolverStats",
      "module": "events::resolver",
      "path": "crates/events/src/events/resolver.rs",
      "start_line": 265,
      "doc": [
        "SAT solver statistics for detailed diagnostics"
      ],
      "definition": "pub struct SolverStats {\n    pub decisions: u64,\n    pub propagations: u64,\n    pub conflicts: u64,\n    pub learned_clauses: u64,\n    pub restarts: u64,\n    pub deleted_clauses: u64,\n    pub max_decision_level: u32,\n    pub total_literals: usize,\n    pub unit_clauses: usize,\n    pub binary_clauses: usize,\n}"
    },
    {
      "kind": "enum",
      "name": "DependencyConflictType",
      "module": "events::resolver",
      "path": "crates/events/src/events/resolver.rs",
      "start_line": 281,
      "doc": [
        "Types of dependency conflicts for categorization"
      ],
      "definition": "pub enum DependencyConflictType {\n    /// Version constraints cannot be satisfied simultaneously\n    VersionIncompatibility,\n    /// Packages that cannot be installed together\n    MutualExclusion,\n    /// Circular dependency chain detected\n    CircularDependency,\n    /// Required dependency is not available\n    MissingDependency,\n    /// User constraint violated by solution\n    ConstraintViolation,\n    /// Platform or architecture incompatibility\n    PlatformIncompatibility,\n}",
      "variants": [
        {
          "name": "VersionIncompatibility",
          "start_line": 283,
          "doc": [
            "Version constraints cannot be satisfied simultaneously"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "MutualExclusion",
          "start_line": 285,
          "doc": [
            "Packages that cannot be installed together"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "CircularDependency",
          "start_line": 287,
          "doc": [
            "Circular dependency chain detected"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "MissingDependency",
          "start_line": 289,
          "doc": [
            "Required dependency is not available"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "ConstraintViolation",
          "start_line": 291,
          "doc": [
            "User constraint violated by solution"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "PlatformIncompatibility",
          "start_line": 293,
          "doc": [
            "Platform or architecture incompatibility"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "StateEvent",
      "module": "events::state",
      "path": "crates/events/src/events/state.rs",
      "start_line": 8,
      "doc": [
        "State management events for atomic operations and rollback"
      ],
      "definition": "pub enum StateEvent {\n    /// State initialization started\n    Initializing {\n        state_id: StateId,\n        operation: String,\n        estimated_duration: Option<Duration>,\n    },\n\n    /// State created successfully\n    Created {\n        state_id: StateId,\n        parent_id: Option<StateId>,\n        operation: String,\n    },\n\n    /// State activation in progress\n    Activating {\n        state_id: StateId,\n        from_state: Option<StateId>,\n    },\n\n    /// State activated successfully\n    Activated {\n        state_id: StateId,\n        from_state: Option<StateId>,\n    },\n\n    /// State transition preparation\n    TransitionPreparing {\n        from: StateId,\n        to: StateId,\n        operation: String,\n        packages_affected: usize,\n    },\n\n    /// State transition validation\n    TransitionValidating {\n        from: StateId,\n        to: StateId,\n        validation_checks: usize,\n    },\n\n    /// State transition validation complete\n    TransitionValidationComplete {\n        from: StateId,\n        to: StateId,\n        checks_passed: usize,\n        warnings: usize,\n    },\n\n    /// State transition executing\n    TransitionExecuting {\n        from: StateId,\n        to: StateId,\n        operation: String,\n    },\n\n    /// State transition completed successfully\n    TransitionCompleted {\n        from: StateId,\n        to: StateId,\n        operation: String,\n        duration: Duration,\n    },\n\n    /// State transition failed\n    TransitionFailed {\n        from: StateId,\n        to: StateId,\n        operation: String,\n        error: String,\n        rollback_available: bool,\n    },\n\n    /// Rollback initiated\n    RollbackInitiated {\n        from: StateId,\n        to: StateId,\n        reason: String,\n        automatic: bool,\n    },\n\n    /// Rollback validation in progress\n    RollbackValidating {\n        target_state: StateId,\n        safety_checks: usize,\n    },\n\n    /// Rollback executing\n    RollbackExecuting {\n        from: StateId,\n        to: StateId,\n        packages_affected: usize,\n    },\n\n    /// Rollback completed successfully\n    RollbackCompleted {\n        from: StateId,\n        to: StateId,\n        duration: Duration,\n        packages_reverted: usize,\n    },\n\n    /// Rollback failed\n    RollbackFailed {\n        from: StateId,\n        to: StateId,\n        error: String,\n        recovery_options: Vec<String>,\n    },\n\n    /// State cleanup started\n    CleanupStarted {\n        states_to_remove: usize,\n        estimated_space_freed: u64,\n    },\n\n    /// State cleanup progress\n    CleanupProgress {\n        states_processed: usize,\n        total_states: usize,\n        space_freed: u64,\n    },\n\n    /// State cleanup completed\n    CleanupCompleted {\n        states_pruned: usize,\n        states_removed: usize,\n        space_freed: u64,\n        duration: Duration,\n    },\n\n    /// Two-phase commit started\n    TwoPhaseCommitStarting {\n        state_id: StateId,\n        parent_state_id: StateId,\n        operation: String,\n    },\n\n    /// Two-phase commit phase one started\n    TwoPhaseCommitPhaseOneStarting {\n        state_id: StateId,\n        operation: String,\n    },\n\n    /// Two-phase commit phase one completed\n    TwoPhaseCommitPhaseOneCompleted {\n        state_id: StateId,\n        operation: String,\n    },\n\n    /// Two-phase commit phase two started\n    TwoPhaseCommitPhaseTwoStarting {\n        state_id: StateId,\n        operation: String,\n    },\n\n    /// Two-phase commit phase two completed\n    TwoPhaseCommitPhaseTwoCompleted {\n        state_id: StateId,\n        operation: String,\n    },\n\n    /// Two-phase commit completed\n    TwoPhaseCommitCompleted {\n        state_id: StateId,\n        parent_state_id: StateId,\n        operation: String,\n    },\n\n    /// Two-phase commit failed\n    TwoPhaseCommitFailed {\n        state_id: StateId,\n        operation: String,\n        error: String,\n        phase: String,\n    },\n}",
      "variants": [
        {
          "name": "Initializing",
          "start_line": 10,
          "doc": [
            "State initialization started"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\noperation: String,\nestimated_duration: Option<Duration>,\n}"
        },
        {
          "name": "Created",
          "start_line": 17,
          "doc": [
            "State created successfully"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\nparent_id: Option<StateId>,\noperation: String,\n}"
        },
        {
          "name": "Activating",
          "start_line": 24,
          "doc": [
            "State activation in progress"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\nfrom_state: Option<StateId>,\n}"
        },
        {
          "name": "Activated",
          "start_line": 30,
          "doc": [
            "State activated successfully"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\nfrom_state: Option<StateId>,\n}"
        },
        {
          "name": "TransitionPreparing",
          "start_line": 36,
          "doc": [
            "State transition preparation"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\noperation: String,\npackages_affected: usize,\n}"
        },
        {
          "name": "TransitionValidating",
          "start_line": 44,
          "doc": [
            "State transition validation"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\nvalidation_checks: usize,\n}"
        },
        {
          "name": "TransitionValidationComplete",
          "start_line": 51,
          "doc": [
            "State transition validation complete"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\nchecks_passed: usize,\nwarnings: usize,\n}"
        },
        {
          "name": "TransitionExecuting",
          "start_line": 59,
          "doc": [
            "State transition executing"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\noperation: String,\n}"
        },
        {
          "name": "TransitionCompleted",
          "start_line": 66,
          "doc": [
            "State transition completed successfully"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\noperation: String,\nduration: Duration,\n}"
        },
        {
          "name": "TransitionFailed",
          "start_line": 74,
          "doc": [
            "State transition failed"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\noperation: String,\nerror: String,\nrollback_available: bool,\n}"
        },
        {
          "name": "RollbackInitiated",
          "start_line": 83,
          "doc": [
            "Rollback initiated"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\nreason: String,\nautomatic: bool,\n}"
        },
        {
          "name": "RollbackValidating",
          "start_line": 91,
          "doc": [
            "Rollback validation in progress"
          ],
          "attributes": [],
          "payload": "{\ntarget_state: StateId,\nsafety_checks: usize,\n}"
        },
        {
          "name": "RollbackExecuting",
          "start_line": 97,
          "doc": [
            "Rollback executing"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\npackages_affected: usize,\n}"
        },
        {
          "name": "RollbackCompleted",
          "start_line": 104,
          "doc": [
            "Rollback completed successfully"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\nduration: Duration,\npackages_reverted: usize,\n}"
        },
        {
          "name": "RollbackFailed",
          "start_line": 112,
          "doc": [
            "Rollback failed"
          ],
          "attributes": [],
          "payload": "{\nfrom: StateId,\nto: StateId,\nerror: String,\nrecovery_options: Vec<String>,\n}"
        },
        {
          "name": "CleanupStarted",
          "start_line": 120,
          "doc": [
            "State cleanup started"
          ],
          "attributes": [],
          "payload": "{\nstates_to_remove: usize,\nestimated_space_freed: u64,\n}"
        },
        {
          "name": "CleanupProgress",
          "start_line": 126,
          "doc": [
            "State cleanup progress"
          ],
          "attributes": [],
          "payload": "{\nstates_processed: usize,\ntotal_states: usize,\nspace_freed: u64,\n}"
        },
        {
          "name": "CleanupCompleted",
          "start_line": 133,
          "doc": [
            "State cleanup completed"
          ],
          "attributes": [],
          "payload": "{\nstates_pruned: usize,\nstates_removed: usize,\nspace_freed: u64,\nduration: Duration,\n}"
        },
        {
          "name": "TwoPhaseCommitStarting",
          "start_line": 141,
          "doc": [
            "Two-phase commit started"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\nparent_state_id: StateId,\noperation: String,\n}"
        },
        {
          "name": "TwoPhaseCommitPhaseOneStarting",
          "start_line": 148,
          "doc": [
            "Two-phase commit phase one started"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\noperation: String,\n}"
        },
        {
          "name": "TwoPhaseCommitPhaseOneCompleted",
          "start_line": 154,
          "doc": [
            "Two-phase commit phase one completed"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\noperation: String,\n}"
        },
        {
          "name": "TwoPhaseCommitPhaseTwoStarting",
          "start_line": 160,
          "doc": [
            "Two-phase commit phase two started"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\noperation: String,\n}"
        },
        {
          "name": "TwoPhaseCommitPhaseTwoCompleted",
          "start_line": 166,
          "doc": [
            "Two-phase commit phase two completed"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\noperation: String,\n}"
        },
        {
          "name": "TwoPhaseCommitCompleted",
          "start_line": 172,
          "doc": [
            "Two-phase commit completed"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\nparent_state_id: StateId,\noperation: String,\n}"
        },
        {
          "name": "TwoPhaseCommitFailed",
          "start_line": 179,
          "doc": [
            "Two-phase commit failed"
          ],
          "attributes": [],
          "payload": "{\nstate_id: StateId,\noperation: String,\nerror: String,\nphase: String,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UninstallEvent",
      "module": "events::uninstall",
      "path": "crates/events/src/events/uninstall.rs",
      "start_line": 9,
      "doc": [
        "Uninstallation domain events - maps to install crate `UninstallOperation` and `sps2 uninstall` command"
      ],
      "definition": "pub enum UninstallEvent {\n    /// Uninstallation operation started\n    Started {\n        package: String,\n        version: Version,\n        force_removal: bool,\n        skip_dependency_check: bool,\n    },\n\n    /// Uninstallation completed successfully\n    Completed {\n        package: String,\n        version: Version,\n        files_removed: usize,\n        space_freed: u64,\n        duration: Duration,\n        dependents_updated: usize,\n    },\n\n    /// Uninstallation failed\n    Failed {\n        package: String,\n        version: Version,\n        phase: UninstallPhase,\n        error: String,\n        partial_removal: bool,\n        manual_cleanup_required: bool,\n    },\n\n    /// Dependency checking phase started\n    DependencyCheckStarted {\n        package: String,\n        version: Version,\n        check_depth: u32,\n    },\n\n    /// Dependency check progress\n    DependencyCheckProgress {\n        package: String,\n        packages_checked: usize,\n        dependents_found: usize,\n        current_package: Option<String>,\n    },\n\n    /// Dependency check completed\n    DependencyCheckCompleted {\n        package: String,\n        version: Version,\n        direct_dependents: Vec<String>,\n        indirect_dependents: Vec<String>,\n        safe_to_remove: bool,\n        orphaned_packages: Vec<String>,\n    },\n\n    /// Dependency check failed\n    DependencyCheckFailed {\n        package: String,\n        version: Version,\n        error: String,\n        blocking_dependents: Vec<String>,\n    },\n\n    /// Blocking dependents detected\n    DependentsDetected {\n        package: String,\n        version: Version,\n        blocking_dependents: Vec<(String, Version, String)>, // (name, version, reason)\n        suggestions: Vec<String>,\n    },\n\n    /// Pre-removal validation started\n    ValidationStarted {\n        package: String,\n        version: Version,\n        validation_checks: Vec<String>,\n    },\n\n    /// Pre-removal validation completed\n    ValidationCompleted {\n        package: String,\n        version: Version,\n        checks_passed: usize,\n        warnings: Vec<String>,\n        can_proceed: bool,\n    },\n\n    /// Pre-removal validation failed\n    ValidationFailed {\n        package: String,\n        version: Version,\n        failed_check: String,\n        error: String,\n        force_override_available: bool,\n    },\n\n    /// Removal preparation started\n    PreparationStarted {\n        package: String,\n        version: Version,\n        files_to_remove: usize,\n        backup_required: bool,\n    },\n\n    /// Preparation completed\n    PreparationCompleted {\n        package: String,\n        version: Version,\n        backup_created: Option<PathBuf>,\n        removal_plan: RemovalPlan,\n    },\n\n    /// File removal execution started\n    RemovalExecutionStarted {\n        package: String,\n        version: Version,\n        files_to_remove: usize,\n        estimated_space_freed: u64,\n    },\n\n    /// File removal progress\n    RemovalProgress {\n        package: String,\n        files_removed: usize,\n        total_files: usize,\n        current_file: Option<PathBuf>,\n        space_freed: u64,\n    },\n\n    /// File removal execution completed\n    RemovalExecutionCompleted {\n        package: String,\n        version: Version,\n        files_removed: usize,\n        space_freed: u64,\n        directories_cleaned: usize,\n    },\n\n    /// Metadata cleanup started\n    MetadataCleanupStarted {\n        package: String,\n        version: Version,\n        database_records: usize,\n    },\n\n    /// Metadata cleanup completed\n    MetadataCleanupCompleted {\n        package: String,\n        version: Version,\n        records_removed: usize,\n        indexes_updated: usize,\n    },\n\n    /// Orphaned package detected\n    OrphanDetected {\n        package: String,\n        version: Version,\n        reason: String,\n        auto_removal_eligible: bool,\n    },\n\n    /// Orphaned packages cleanup started\n    OrphanCleanupStarted {\n        orphaned_packages: Vec<String>,\n        estimated_space_freed: u64,\n    },\n\n    /// Orphaned packages cleanup completed\n    OrphanCleanupCompleted {\n        removed_packages: Vec<String>,\n        space_freed: u64,\n        duration: Duration,\n    },\n\n    /// Batch uninstall started\n    BatchStarted {\n        packages: Vec<String>,\n        operation_id: String,\n        dependency_order: bool,\n        remove_orphans: bool,\n    },\n\n    /// Batch uninstall progress\n    BatchProgress {\n        operation_id: String,\n        completed_packages: usize,\n        failed_packages: usize,\n        remaining_packages: usize,\n        current_package: Option<String>,\n        space_freed_total: u64,\n    },\n\n    /// Batch uninstall completed\n    BatchCompleted {\n        operation_id: String,\n        successful_packages: Vec<String>,\n        failed_packages: Vec<(String, String)>, // (package, error)\n        orphans_removed: Vec<String>,\n        total_duration: Duration,\n        total_space_freed: u64,\n    },\n\n    /// Batch uninstall failed\n    BatchFailed {\n        operation_id: String,\n        error: String,\n        completed_packages: Vec<String>,\n        failed_packages: Vec<(String, String)>,\n        cleanup_status: CleanupStatus,\n    },\n\n    /// Removal conflict detected\n    ConflictDetected {\n        package: String,\n        version: Version,\n        conflict_type: RemovalConflictType,\n        affected_files: Vec<PathBuf>,\n        resolution_options: Vec<String>,\n    },\n\n    /// Conflict resolution applied\n    ConflictResolution {\n        package: String,\n        version: Version,\n        resolution_strategy: String,\n        files_preserved: usize,\n        backup_location: Option<PathBuf>,\n    },\n\n    /// Post-removal verification started\n    PostRemovalVerification {\n        package: String,\n        version: Version,\n        verification_checks: Vec<String>,\n    },\n\n    /// Post-removal verification completed\n    PostRemovalVerified {\n        package: String,\n        version: Version,\n        verification_passed: bool,\n        residual_files: Vec<PathBuf>,\n        system_integrity_ok: bool,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 11,
          "doc": [
            "Uninstallation operation started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nforce_removal: bool,\nskip_dependency_check: bool,\n}"
        },
        {
          "name": "Completed",
          "start_line": 19,
          "doc": [
            "Uninstallation completed successfully"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_removed: usize,\nspace_freed: u64,\nduration: Duration,\ndependents_updated: usize,\n}"
        },
        {
          "name": "Failed",
          "start_line": 29,
          "doc": [
            "Uninstallation failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nphase: UninstallPhase,\nerror: String,\npartial_removal: bool,\nmanual_cleanup_required: bool,\n}"
        },
        {
          "name": "DependencyCheckStarted",
          "start_line": 39,
          "doc": [
            "Dependency checking phase started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ncheck_depth: u32,\n}"
        },
        {
          "name": "DependencyCheckProgress",
          "start_line": 46,
          "doc": [
            "Dependency check progress"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\npackages_checked: usize,\ndependents_found: usize,\ncurrent_package: Option<String>,\n}"
        },
        {
          "name": "DependencyCheckCompleted",
          "start_line": 54,
          "doc": [
            "Dependency check completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ndirect_dependents: Vec<String>,\nindirect_dependents: Vec<String>,\nsafe_to_remove: bool,\norphaned_packages: Vec<String>,\n}"
        },
        {
          "name": "DependencyCheckFailed",
          "start_line": 64,
          "doc": [
            "Dependency check failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nerror: String,\nblocking_dependents: Vec<String>,\n}"
        },
        {
          "name": "DependentsDetected",
          "start_line": 72,
          "doc": [
            "Blocking dependents detected"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nblocking_dependents: Vec<(String, Version, String)>, // (name, version, reason)\nsuggestions: Vec<String>,\n}"
        },
        {
          "name": "ValidationStarted",
          "start_line": 80,
          "doc": [
            "Pre-removal validation started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nvalidation_checks: Vec<String>,\n}"
        },
        {
          "name": "ValidationCompleted",
          "start_line": 87,
          "doc": [
            "Pre-removal validation completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nchecks_passed: usize,\nwarnings: Vec<String>,\ncan_proceed: bool,\n}"
        },
        {
          "name": "ValidationFailed",
          "start_line": 96,
          "doc": [
            "Pre-removal validation failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfailed_check: String,\nerror: String,\nforce_override_available: bool,\n}"
        },
        {
          "name": "PreparationStarted",
          "start_line": 105,
          "doc": [
            "Removal preparation started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_to_remove: usize,\nbackup_required: bool,\n}"
        },
        {
          "name": "PreparationCompleted",
          "start_line": 113,
          "doc": [
            "Preparation completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nbackup_created: Option<PathBuf>,\nremoval_plan: RemovalPlan,\n}"
        },
        {
          "name": "RemovalExecutionStarted",
          "start_line": 121,
          "doc": [
            "File removal execution started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_to_remove: usize,\nestimated_space_freed: u64,\n}"
        },
        {
          "name": "RemovalProgress",
          "start_line": 129,
          "doc": [
            "File removal progress"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfiles_removed: usize,\ntotal_files: usize,\ncurrent_file: Option<PathBuf>,\nspace_freed: u64,\n}"
        },
        {
          "name": "RemovalExecutionCompleted",
          "start_line": 138,
          "doc": [
            "File removal execution completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nfiles_removed: usize,\nspace_freed: u64,\ndirectories_cleaned: usize,\n}"
        },
        {
          "name": "MetadataCleanupStarted",
          "start_line": 147,
          "doc": [
            "Metadata cleanup started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\ndatabase_records: usize,\n}"
        },
        {
          "name": "MetadataCleanupCompleted",
          "start_line": 154,
          "doc": [
            "Metadata cleanup completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nrecords_removed: usize,\nindexes_updated: usize,\n}"
        },
        {
          "name": "OrphanDetected",
          "start_line": 162,
          "doc": [
            "Orphaned package detected"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nreason: String,\nauto_removal_eligible: bool,\n}"
        },
        {
          "name": "OrphanCleanupStarted",
          "start_line": 170,
          "doc": [
            "Orphaned packages cleanup started"
          ],
          "attributes": [],
          "payload": "{\norphaned_packages: Vec<String>,\nestimated_space_freed: u64,\n}"
        },
        {
          "name": "OrphanCleanupCompleted",
          "start_line": 176,
          "doc": [
            "Orphaned packages cleanup completed"
          ],
          "attributes": [],
          "payload": "{\nremoved_packages: Vec<String>,\nspace_freed: u64,\nduration: Duration,\n}"
        },
        {
          "name": "BatchStarted",
          "start_line": 183,
          "doc": [
            "Batch uninstall started"
          ],
          "attributes": [],
          "payload": "{\npackages: Vec<String>,\noperation_id: String,\ndependency_order: bool,\nremove_orphans: bool,\n}"
        },
        {
          "name": "BatchProgress",
          "start_line": 191,
          "doc": [
            "Batch uninstall progress"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ncompleted_packages: usize,\nfailed_packages: usize,\nremaining_packages: usize,\ncurrent_package: Option<String>,\nspace_freed_total: u64,\n}"
        },
        {
          "name": "BatchCompleted",
          "start_line": 201,
          "doc": [
            "Batch uninstall completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nsuccessful_packages: Vec<String>,\nfailed_packages: Vec<(String, String)>, // (package, error)\norphans_removed: Vec<String>,\ntotal_duration: Duration,\ntotal_space_freed: u64,\n}"
        },
        {
          "name": "BatchFailed",
          "start_line": 211,
          "doc": [
            "Batch uninstall failed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror: String,\ncompleted_packages: Vec<String>,\nfailed_packages: Vec<(String, String)>,\ncleanup_status: CleanupStatus,\n}"
        },
        {
          "name": "ConflictDetected",
          "start_line": 220,
          "doc": [
            "Removal conflict detected"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nconflict_type: RemovalConflictType,\naffected_files: Vec<PathBuf>,\nresolution_options: Vec<String>,\n}"
        },
        {
          "name": "ConflictResolution",
          "start_line": 229,
          "doc": [
            "Conflict resolution applied"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nresolution_strategy: String,\nfiles_preserved: usize,\nbackup_location: Option<PathBuf>,\n}"
        },
        {
          "name": "PostRemovalVerification",
          "start_line": 238,
          "doc": [
            "Post-removal verification started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nverification_checks: Vec<String>,\n}"
        },
        {
          "name": "PostRemovalVerified",
          "start_line": 245,
          "doc": [
            "Post-removal verification completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nversion: Version,\nverification_passed: bool,\nresidual_files: Vec<PathBuf>,\nsystem_integrity_ok: bool,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UninstallPhase",
      "module": "events::uninstall",
      "path": "crates/events/src/events/uninstall.rs",
      "start_line": 257,
      "doc": [
        "Uninstallation phases for error reporting and progress tracking"
      ],
      "definition": "pub enum UninstallPhase {\n    /// Checking package dependencies\n    DependencyCheck,\n    /// Pre-removal validation\n    Validation,\n    /// Preparing for removal\n    Preparation,\n    /// Removing files from disk\n    RemovalExecution,\n    /// Cleaning up metadata\n    MetadataCleanup,\n    /// Verifying removal completion\n    PostRemovalVerification,\n}",
      "variants": [
        {
          "name": "DependencyCheck",
          "start_line": 259,
          "doc": [
            "Checking package dependencies"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Validation",
          "start_line": 261,
          "doc": [
            "Pre-removal validation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Preparation",
          "start_line": 263,
          "doc": [
            "Preparing for removal"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "RemovalExecution",
          "start_line": 265,
          "doc": [
            "Removing files from disk"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "MetadataCleanup",
          "start_line": 267,
          "doc": [
            "Cleaning up metadata"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "PostRemovalVerification",
          "start_line": 269,
          "doc": [
            "Verifying removal completion"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "RemovalConflictType",
      "module": "events::uninstall",
      "path": "crates/events/src/events/uninstall.rs",
      "start_line": 275,
      "doc": [
        "Types of removal conflicts"
      ],
      "definition": "pub enum RemovalConflictType {\n    /// File is shared with another package\n    SharedFile,\n    /// File has been modified since installation\n    ModifiedFile,\n    /// Directory is not empty after removal\n    NonEmptyDirectory,\n    /// Permission denied for removal\n    PermissionDenied,\n    /// File is currently in use\n    FileInUse,\n}",
      "variants": [
        {
          "name": "SharedFile",
          "start_line": 277,
          "doc": [
            "File is shared with another package"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "ModifiedFile",
          "start_line": 279,
          "doc": [
            "File has been modified since installation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "NonEmptyDirectory",
          "start_line": 281,
          "doc": [
            "Directory is not empty after removal"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "PermissionDenied",
          "start_line": 283,
          "doc": [
            "Permission denied for removal"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "FileInUse",
          "start_line": 285,
          "doc": [
            "File is currently in use"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "RemovalPlan",
      "module": "events::uninstall",
      "path": "crates/events/src/events/uninstall.rs",
      "start_line": 290,
      "doc": [
        "Removal execution plan"
      ],
      "definition": "pub struct RemovalPlan {\n    pub files_to_remove: Vec<PathBuf>,\n    pub directories_to_check: Vec<PathBuf>,\n    pub shared_files_to_preserve: Vec<PathBuf>,\n    pub backup_required: bool,\n    pub estimated_duration: Duration,\n    pub estimated_space_freed: u64,\n}"
    },
    {
      "kind": "enum",
      "name": "CleanupStatus",
      "module": "events::uninstall",
      "path": "crates/events/src/events/uninstall.rs",
      "start_line": 302,
      "doc": [
        "Cleanup status for batch operations"
      ],
      "definition": "pub enum CleanupStatus {\n    /// All cleanup completed successfully\n    Complete,\n    /// Partial cleanup completed\n    Partial,\n    /// Cleanup failed, manual intervention required\n    Failed,\n    /// Cleanup not attempted\n    NotAttempted,\n}",
      "variants": [
        {
          "name": "Complete",
          "start_line": 304,
          "doc": [
            "All cleanup completed successfully"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Partial",
          "start_line": 306,
          "doc": [
            "Partial cleanup completed"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Failed",
          "start_line": 308,
          "doc": [
            "Cleanup failed, manual intervention required"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "NotAttempted",
          "start_line": 310,
          "doc": [
            "Cleanup not attempted"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UpdateEvent",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 8,
      "doc": [
        "Update domain events - maps to ops/update.rs and `sps2 update/upgrade` commands"
      ],
      "definition": "pub enum UpdateEvent {\n    /// Update operation started\n    Started {\n        operation_type: UpdateOperationType,\n        packages_specified: Vec<String>,\n        check_all_packages: bool,\n        ignore_constraints: bool,\n    },\n\n    /// Update operation completed\n    Completed {\n        operation_type: UpdateOperationType,\n        packages_updated: Vec<UpdateResult>,\n        packages_unchanged: Vec<String>,\n        total_duration: Duration,\n        space_difference: i64, // Can be negative if packages got smaller\n    },\n\n    /// Update operation failed\n    Failed {\n        operation_type: UpdateOperationType,\n        error: String,\n        packages_updated: Vec<UpdateResult>,\n        packages_failed: Vec<(String, String)>, // (package, error)\n    },\n\n    /// Update planning phase started\n    PlanningStarted {\n        packages_to_check: Vec<String>,\n        include_dependencies: bool,\n        constraint_strategy: ConstraintStrategy,\n    },\n\n    /// Update planning progress\n    PlanningProgress {\n        packages_checked: usize,\n        total_packages: usize,\n        updates_available: usize,\n        current_package: Option<String>,\n    },\n\n    /// Update plan generated\n    PlanGenerated {\n        updates_available: Vec<AvailableUpdate>,\n        dependency_updates: Vec<AvailableUpdate>,\n        conflicts_detected: usize,\n        total_estimated_size: u64,\n        estimated_duration: Duration,\n    },\n\n    /// Update planning failed\n    PlanningFailed {\n        error: String,\n        partial_results: Vec<AvailableUpdate>,\n        unresolved_packages: Vec<String>,\n    },\n\n    /// Package update started\n    PackageUpdateStarted {\n        package: String,\n        from_version: Version,\n        to_version: Version,\n        update_type: PackageUpdateType,\n    },\n\n    /// Package update progress\n    PackageUpdateProgress {\n        package: String,\n        phase: UpdatePhase,\n        progress_percent: f64,\n        current_operation: String,\n    },\n\n    /// Package update completed\n    PackageUpdateCompleted {\n        package: String,\n        from_version: Version,\n        to_version: Version,\n        files_changed: usize,\n        size_difference: i64,\n        duration: Duration,\n    },\n\n    /// Package update failed\n    PackageUpdateFailed {\n        package: String,\n        from_version: Version,\n        to_version: Version,\n        phase: UpdatePhase,\n        error: String,\n        rollback_attempted: bool,\n        rollback_successful: Option<bool>,\n    },\n\n    /// Constraint analysis started\n    ConstraintAnalysisStarted {\n        packages: Vec<String>,\n        constraint_type: ConstraintStrategy,\n    },\n\n    /// Constraint conflict detected\n    ConstraintConflictDetected {\n        package: String,\n        requested_version: Version,\n        available_version: Version,\n        constraint_source: String,\n        resolution_options: Vec<String>,\n    },\n\n    /// Constraint override applied\n    ConstraintOverrideApplied {\n        package: String,\n        original_constraint: String,\n        new_constraint: String,\n        reason: String,\n    },\n\n    /// Batch update started\n    BatchStarted {\n        packages: Vec<String>,\n        operation_id: String,\n        update_strategy: BatchUpdateStrategy,\n        concurrent_limit: usize,\n    },\n\n    /// Batch update progress\n    BatchProgress {\n        operation_id: String,\n        completed_updates: usize,\n        failed_updates: usize,\n        in_progress_updates: usize,\n        remaining_updates: usize,\n        current_package: Option<String>,\n    },\n\n    /// Batch update completed\n    BatchCompleted {\n        operation_id: String,\n        successful_updates: Vec<UpdateResult>,\n        failed_updates: Vec<(String, String)>,\n        skipped_packages: Vec<String>,\n        total_duration: Duration,\n        total_size_change: i64,\n    },\n\n    /// Batch update failed\n    BatchFailed {\n        operation_id: String,\n        error: String,\n        completed_updates: Vec<UpdateResult>,\n        failed_updates: Vec<(String, String)>,\n        rollback_status: RollbackStatus,\n    },\n\n    /// Upgrade path analysis (for major version changes)\n    UpgradePathAnalysisStarted {\n        package: String,\n        from_version: Version,\n        target_version: Option<Version>, // None means latest\n    },\n\n    /// Upgrade path found\n    UpgradePathFound {\n        package: String,\n        from_version: Version,\n        to_version: Version,\n        intermediate_versions: Vec<Version>,\n        breaking_changes: Vec<String>,\n        migration_required: bool,\n    },\n\n    /// Breaking changes detected\n    BreakingChangesDetected {\n        package: String,\n        from_version: Version,\n        to_version: Version,\n        breaking_changes: Vec<BreakingChange>,\n        migration_strategy: Option<String>,\n    },\n\n    /// Dependency cascade update started\n    DependencyCascadeStarted {\n        root_package: String,\n        affected_dependencies: Vec<String>,\n        cascade_depth: usize,\n    },\n\n    /// Dependency cascade progress\n    DependencyCascadeProgress {\n        root_package: String,\n        dependencies_updated: usize,\n        total_dependencies: usize,\n        current_dependency: Option<String>,\n    },\n\n    /// Dependency cascade completed\n    DependencyCascadeCompleted {\n        root_package: String,\n        dependencies_updated: Vec<UpdateResult>,\n        dependencies_skipped: Vec<String>,\n        compatibility_preserved: bool,\n    },\n\n    /// Rollback initiated due to update failure\n    RollbackStarted {\n        packages: Vec<String>,\n        reason: String,\n        rollback_to_snapshot: Option<String>,\n    },\n\n    /// Rollback progress\n    RollbackProgress {\n        packages_restored: usize,\n        total_packages: usize,\n        current_package: Option<String>,\n    },\n\n    /// Rollback completed\n    RollbackCompleted {\n        packages_restored: Vec<String>,\n        restoration_successful: bool,\n        duration: Duration,\n    },\n\n    /// Rollback failed\n    RollbackFailed {\n        error: String,\n        packages_restored: Vec<String>,\n        packages_failed: Vec<String>,\n        system_integrity: SystemIntegrityStatus,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 10,
          "doc": [
            "Update operation started"
          ],
          "attributes": [],
          "payload": "{\noperation_type: UpdateOperationType,\npackages_specified: Vec<String>,\ncheck_all_packages: bool,\nignore_constraints: bool,\n}"
        },
        {
          "name": "Completed",
          "start_line": 18,
          "doc": [
            "Update operation completed"
          ],
          "attributes": [],
          "payload": "{\noperation_type: UpdateOperationType,\npackages_updated: Vec<UpdateResult>,\npackages_unchanged: Vec<String>,\ntotal_duration: Duration,\nspace_difference: i64, // Can be negative if packages got smaller\n}"
        },
        {
          "name": "Failed",
          "start_line": 27,
          "doc": [
            "Update operation failed"
          ],
          "attributes": [],
          "payload": "{\noperation_type: UpdateOperationType,\nerror: String,\npackages_updated: Vec<UpdateResult>,\npackages_failed: Vec<(String, String)>, // (package, error)\n}"
        },
        {
          "name": "PlanningStarted",
          "start_line": 35,
          "doc": [
            "Update planning phase started"
          ],
          "attributes": [],
          "payload": "{\npackages_to_check: Vec<String>,\ninclude_dependencies: bool,\nconstraint_strategy: ConstraintStrategy,\n}"
        },
        {
          "name": "PlanningProgress",
          "start_line": 42,
          "doc": [
            "Update planning progress"
          ],
          "attributes": [],
          "payload": "{\npackages_checked: usize,\ntotal_packages: usize,\nupdates_available: usize,\ncurrent_package: Option<String>,\n}"
        },
        {
          "name": "PlanGenerated",
          "start_line": 50,
          "doc": [
            "Update plan generated"
          ],
          "attributes": [],
          "payload": "{\nupdates_available: Vec<AvailableUpdate>,\ndependency_updates: Vec<AvailableUpdate>,\nconflicts_detected: usize,\ntotal_estimated_size: u64,\nestimated_duration: Duration,\n}"
        },
        {
          "name": "PlanningFailed",
          "start_line": 59,
          "doc": [
            "Update planning failed"
          ],
          "attributes": [],
          "payload": "{\nerror: String,\npartial_results: Vec<AvailableUpdate>,\nunresolved_packages: Vec<String>,\n}"
        },
        {
          "name": "PackageUpdateStarted",
          "start_line": 66,
          "doc": [
            "Package update started"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfrom_version: Version,\nto_version: Version,\nupdate_type: PackageUpdateType,\n}"
        },
        {
          "name": "PackageUpdateProgress",
          "start_line": 74,
          "doc": [
            "Package update progress"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nphase: UpdatePhase,\nprogress_percent: f64,\ncurrent_operation: String,\n}"
        },
        {
          "name": "PackageUpdateCompleted",
          "start_line": 82,
          "doc": [
            "Package update completed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfrom_version: Version,\nto_version: Version,\nfiles_changed: usize,\nsize_difference: i64,\nduration: Duration,\n}"
        },
        {
          "name": "PackageUpdateFailed",
          "start_line": 92,
          "doc": [
            "Package update failed"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfrom_version: Version,\nto_version: Version,\nphase: UpdatePhase,\nerror: String,\nrollback_attempted: bool,\nrollback_successful: Option<bool>,\n}"
        },
        {
          "name": "ConstraintAnalysisStarted",
          "start_line": 103,
          "doc": [
            "Constraint analysis started"
          ],
          "attributes": [],
          "payload": "{\npackages: Vec<String>,\nconstraint_type: ConstraintStrategy,\n}"
        },
        {
          "name": "ConstraintConflictDetected",
          "start_line": 109,
          "doc": [
            "Constraint conflict detected"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nrequested_version: Version,\navailable_version: Version,\nconstraint_source: String,\nresolution_options: Vec<String>,\n}"
        },
        {
          "name": "ConstraintOverrideApplied",
          "start_line": 118,
          "doc": [
            "Constraint override applied"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\noriginal_constraint: String,\nnew_constraint: String,\nreason: String,\n}"
        },
        {
          "name": "BatchStarted",
          "start_line": 126,
          "doc": [
            "Batch update started"
          ],
          "attributes": [],
          "payload": "{\npackages: Vec<String>,\noperation_id: String,\nupdate_strategy: BatchUpdateStrategy,\nconcurrent_limit: usize,\n}"
        },
        {
          "name": "BatchProgress",
          "start_line": 134,
          "doc": [
            "Batch update progress"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\ncompleted_updates: usize,\nfailed_updates: usize,\nin_progress_updates: usize,\nremaining_updates: usize,\ncurrent_package: Option<String>,\n}"
        },
        {
          "name": "BatchCompleted",
          "start_line": 144,
          "doc": [
            "Batch update completed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nsuccessful_updates: Vec<UpdateResult>,\nfailed_updates: Vec<(String, String)>,\nskipped_packages: Vec<String>,\ntotal_duration: Duration,\ntotal_size_change: i64,\n}"
        },
        {
          "name": "BatchFailed",
          "start_line": 154,
          "doc": [
            "Batch update failed"
          ],
          "attributes": [],
          "payload": "{\noperation_id: String,\nerror: String,\ncompleted_updates: Vec<UpdateResult>,\nfailed_updates: Vec<(String, String)>,\nrollback_status: RollbackStatus,\n}"
        },
        {
          "name": "UpgradePathAnalysisStarted",
          "start_line": 163,
          "doc": [
            "Upgrade path analysis (for major version changes)"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfrom_version: Version,\ntarget_version: Option<Version>, // None means latest\n}"
        },
        {
          "name": "UpgradePathFound",
          "start_line": 170,
          "doc": [
            "Upgrade path found"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfrom_version: Version,\nto_version: Version,\nintermediate_versions: Vec<Version>,\nbreaking_changes: Vec<String>,\nmigration_required: bool,\n}"
        },
        {
          "name": "BreakingChangesDetected",
          "start_line": 180,
          "doc": [
            "Breaking changes detected"
          ],
          "attributes": [],
          "payload": "{\npackage: String,\nfrom_version: Version,\nto_version: Version,\nbreaking_changes: Vec<BreakingChange>,\nmigration_strategy: Option<String>,\n}"
        },
        {
          "name": "DependencyCascadeStarted",
          "start_line": 189,
          "doc": [
            "Dependency cascade update started"
          ],
          "attributes": [],
          "payload": "{\nroot_package: String,\naffected_dependencies: Vec<String>,\ncascade_depth: usize,\n}"
        },
        {
          "name": "DependencyCascadeProgress",
          "start_line": 196,
          "doc": [
            "Dependency cascade progress"
          ],
          "attributes": [],
          "payload": "{\nroot_package: String,\ndependencies_updated: usize,\ntotal_dependencies: usize,\ncurrent_dependency: Option<String>,\n}"
        },
        {
          "name": "DependencyCascadeCompleted",
          "start_line": 204,
          "doc": [
            "Dependency cascade completed"
          ],
          "attributes": [],
          "payload": "{\nroot_package: String,\ndependencies_updated: Vec<UpdateResult>,\ndependencies_skipped: Vec<String>,\ncompatibility_preserved: bool,\n}"
        },
        {
          "name": "RollbackStarted",
          "start_line": 212,
          "doc": [
            "Rollback initiated due to update failure"
          ],
          "attributes": [],
          "payload": "{\npackages: Vec<String>,\nreason: String,\nrollback_to_snapshot: Option<String>,\n}"
        },
        {
          "name": "RollbackProgress",
          "start_line": 219,
          "doc": [
            "Rollback progress"
          ],
          "attributes": [],
          "payload": "{\npackages_restored: usize,\ntotal_packages: usize,\ncurrent_package: Option<String>,\n}"
        },
        {
          "name": "RollbackCompleted",
          "start_line": 226,
          "doc": [
            "Rollback completed"
          ],
          "attributes": [],
          "payload": "{\npackages_restored: Vec<String>,\nrestoration_successful: bool,\nduration: Duration,\n}"
        },
        {
          "name": "RollbackFailed",
          "start_line": 233,
          "doc": [
            "Rollback failed"
          ],
          "attributes": [],
          "payload": "{\nerror: String,\npackages_restored: Vec<String>,\npackages_failed: Vec<String>,\nsystem_integrity: SystemIntegrityStatus,\n}"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UpdateOperationType",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 244,
      "doc": [
        "Types of update operations"
      ],
      "definition": "pub enum UpdateOperationType {\n    /// Standard update within version constraints\n    Update,\n    /// Upgrade ignoring upper bound constraints\n    Upgrade,\n    /// Downgrade to previous version\n    Downgrade,\n    /// Reinstall same version (refresh)\n    Reinstall,\n}",
      "variants": [
        {
          "name": "Update",
          "start_line": 246,
          "doc": [
            "Standard update within version constraints"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Upgrade",
          "start_line": 248,
          "doc": [
            "Upgrade ignoring upper bound constraints"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Downgrade",
          "start_line": 250,
          "doc": [
            "Downgrade to previous version"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Reinstall",
          "start_line": 252,
          "doc": [
            "Reinstall same version (refresh)"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "PackageUpdateType",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 258,
      "doc": [
        "Package update types based on semantic versioning"
      ],
      "definition": "pub enum PackageUpdateType {\n    /// Patch version update (x.y.Z)\n    Patch,\n    /// Minor version update (x.Y.z)\n    Minor,\n    /// Major version update (X.y.z)\n    Major,\n    /// Pre-release version\n    PreRelease,\n}",
      "variants": [
        {
          "name": "Patch",
          "start_line": 260,
          "doc": [
            "Patch version update (x.y.Z)"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Minor",
          "start_line": 262,
          "doc": [
            "Minor version update (x.Y.z)"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Major",
          "start_line": 264,
          "doc": [
            "Major version update (X.y.z)"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "PreRelease",
          "start_line": 266,
          "doc": [
            "Pre-release version"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UpdatePhase",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 272,
      "doc": [
        "Update execution phases"
      ],
      "definition": "pub enum UpdatePhase {\n    /// Planning and validation\n    Planning,\n    /// Downloading new version\n    Acquisition,\n    /// Backing up current version\n    Backup,\n    /// Installing new version\n    Installation,\n    /// Verifying update\n    Verification,\n    /// Cleaning up old version\n    Cleanup,\n}",
      "variants": [
        {
          "name": "Planning",
          "start_line": 274,
          "doc": [
            "Planning and validation"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Acquisition",
          "start_line": 276,
          "doc": [
            "Downloading new version"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Backup",
          "start_line": 278,
          "doc": [
            "Backing up current version"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Installation",
          "start_line": 280,
          "doc": [
            "Installing new version"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Verification",
          "start_line": 282,
          "doc": [
            "Verifying update"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Cleanup",
          "start_line": 284,
          "doc": [
            "Cleaning up old version"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ConstraintStrategy",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 290,
      "doc": [
        "Constraint handling strategies"
      ],
      "definition": "pub enum ConstraintStrategy {\n    /// Respect all version constraints\n    Strict,\n    /// Ignore upper bound constraints (upgrade mode)\n    IgnoreUpperBounds,\n    /// Allow pre-release versions\n    AllowPreRelease,\n    /// Force update regardless of constraints\n    Force,\n}",
      "variants": [
        {
          "name": "Strict",
          "start_line": 292,
          "doc": [
            "Respect all version constraints"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "IgnoreUpperBounds",
          "start_line": 294,
          "doc": [
            "Ignore upper bound constraints (upgrade mode)"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "AllowPreRelease",
          "start_line": 296,
          "doc": [
            "Allow pre-release versions"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Force",
          "start_line": 298,
          "doc": [
            "Force update regardless of constraints"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "BatchUpdateStrategy",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 304,
      "doc": [
        "Batch update strategies"
      ],
      "definition": "pub enum BatchUpdateStrategy {\n    /// Update packages in dependency order\n    DependencyOrder,\n    /// Update packages in parallel where possible\n    Parallel,\n    /// Update packages one by one in specified order\n    Sequential,\n    /// Update only if all updates can succeed\n    AllOrNothing,\n}",
      "variants": [
        {
          "name": "DependencyOrder",
          "start_line": 306,
          "doc": [
            "Update packages in dependency order"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Parallel",
          "start_line": 308,
          "doc": [
            "Update packages in parallel where possible"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Sequential",
          "start_line": 310,
          "doc": [
            "Update packages one by one in specified order"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "AllOrNothing",
          "start_line": 312,
          "doc": [
            "Update only if all updates can succeed"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "UpdateResult",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 317,
      "doc": [
        "Update result for completed package updates"
      ],
      "definition": "pub struct UpdateResult {\n    pub package: String,\n    pub from_version: Version,\n    pub to_version: Version,\n    pub update_type: PackageUpdateType,\n    pub duration: Duration,\n    pub size_change: i64,\n}"
    },
    {
      "kind": "struct",
      "name": "AvailableUpdate",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 328,
      "doc": [
        "Available update information"
      ],
      "definition": "pub struct AvailableUpdate {\n    pub package: String,\n    pub current_version: Version,\n    pub available_version: Version,\n    pub update_type: PackageUpdateType,\n    pub size_change: Option<i64>,\n    pub breaking_changes: Vec<String>,\n    pub urgency: UpdateUrgency,\n}"
    },
    {
      "kind": "enum",
      "name": "UpdateUrgency",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 341,
      "doc": [
        "Update urgency levels"
      ],
      "definition": "pub enum UpdateUrgency {\n    /// Security or critical bug fix\n    Critical,\n    /// Important bug fix or feature\n    High,\n    /// Standard feature update\n    Normal,\n    /// Minor improvement or enhancement\n    Low,\n}",
      "variants": [
        {
          "name": "Critical",
          "start_line": 343,
          "doc": [
            "Security or critical bug fix"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "High",
          "start_line": 345,
          "doc": [
            "Important bug fix or feature"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Normal",
          "start_line": 347,
          "doc": [
            "Standard feature update"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Low",
          "start_line": 349,
          "doc": [
            "Minor improvement or enhancement"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "BreakingChange",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 354,
      "doc": [
        "Breaking change information"
      ],
      "definition": "pub struct BreakingChange {\n    pub change_type: String,\n    pub description: String,\n    pub migration_hint: Option<String>,\n    pub affected_apis: Vec<String>,\n}"
    },
    {
      "kind": "enum",
      "name": "RollbackStatus",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 364,
      "doc": [
        "Rollback status for batch operations"
      ],
      "definition": "pub enum RollbackStatus {\n    /// No rollback needed\n    NotRequired,\n    /// Rollback completed successfully\n    Completed,\n    /// Rollback partially completed\n    Partial,\n    /// Rollback failed\n    Failed,\n    /// Rollback in progress\n    InProgress,\n}",
      "variants": [
        {
          "name": "NotRequired",
          "start_line": 366,
          "doc": [
            "No rollback needed"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Completed",
          "start_line": 368,
          "doc": [
            "Rollback completed successfully"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Partial",
          "start_line": 370,
          "doc": [
            "Rollback partially completed"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Failed",
          "start_line": 372,
          "doc": [
            "Rollback failed"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "InProgress",
          "start_line": 374,
          "doc": [
            "Rollback in progress"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "enum",
      "name": "SystemIntegrityStatus",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 380,
      "doc": [
        "System integrity status after operations"
      ],
      "definition": "pub enum SystemIntegrityStatus {\n    /// System is in a consistent state\n    Consistent,\n    /// System has minor inconsistencies but is functional\n    MinorInconsistencies,\n    /// System has major inconsistencies\n    MajorInconsistencies,\n    /// System integrity cannot be determined\n    Unknown,\n}",
      "variants": [
        {
          "name": "Consistent",
          "start_line": 382,
          "doc": [
            "System is in a consistent state"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "MinorInconsistencies",
          "start_line": 384,
          "doc": [
            "System has minor inconsistencies but is functional"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "MajorInconsistencies",
          "start_line": 386,
          "doc": [
            "System has major inconsistencies"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Unknown",
          "start_line": 388,
          "doc": [
            "System integrity cannot be determined"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "EventMeta",
      "module": "meta",
      "path": "crates/events/src/meta.rs",
      "start_line": 16,
      "doc": [
        "Structured metadata that accompanies every event emission.",
        "",
        "This wrapper gives consumers enough context to correlate events across",
        "domains, attach them to tracing spans, and provide stable identifiers for",
        "telemetry pipelines."
      ],
      "definition": "pub struct EventMeta {\n    /// Unique identifier for this specific event.\n    pub event_id: Uuid,\n    /// Parent event (when modelling hierarchical operations / progress).\n    pub parent_id: Option<Uuid>,\n    /// High-level correlation identifier (operation id, package key, etc.).\n    pub correlation_id: Option<String>,\n    /// Timestamp captured at emission time.\n    pub timestamp: DateTime<Utc>,\n    /// Severity used for routing to logging systems and alerting.\n    pub level: EventLevel,\n    /// Subsystem/component that originated the event.\n    pub source: EventSource,\n    /// Optional free-form labels for downstream enrichment (kept small on purpose).\n    #[serde(default, skip_serializing_if = \"BTreeMap::is_empty\")]\n    pub labels: BTreeMap<String, String>,\n}"
    },
    {
      "kind": "enum",
      "name": "EventLevel",
      "module": "meta",
      "path": "crates/events/src/meta.rs",
      "start_line": 80,
      "doc": [
        "Lightweight severity levels used by the event system."
      ],
      "definition": "pub enum EventLevel {\n    Trace,\n    Debug,\n    Info,\n    Warn,\n    Error,\n}",
      "variants": [
        {
          "name": "Trace",
          "start_line": 81,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Debug",
          "start_line": 82,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Info",
          "start_line": 83,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Warn",
          "start_line": 84,
          "doc": [],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Error",
          "start_line": 85,
          "doc": [],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "EventSource",
      "module": "meta",
      "path": "crates/events/src/meta.rs",
      "start_line": 115,
      "doc": [
        "Component/feature that originated the event."
      ],
      "definition": "pub struct EventSource(Cow<'static, str>);"
    },
    {
      "kind": "struct",
      "name": "ProgressConfig",
      "module": "progress::config",
      "path": "crates/events/src/progress/config.rs",
      "start_line": 20,
      "doc": [
        "Configuration for progress tracking algorithms"
      ],
      "definition": "pub struct ProgressConfig {\n    /// Number of samples for moving average (default: 10)\n    pub speed_window_size: usize,\n    /// Maximum samples to retain in history (default: 1000)\n    pub max_history_samples: usize,\n    /// Update frequency for smooth UI (default: 100ms)\n    pub update_interval: Duration,\n    /// Outlier rejection multiplier (default: 2.0)\n    pub outlier_threshold: f64,\n    /// Exponential moving average alpha (default: 0.3)\n    pub ema_alpha: f64,\n    /// Minimum samples needed for reliable ETA (default: 3)\n    pub min_samples_for_eta: usize,\n}"
    },
    {
      "kind": "struct",
      "name": "ProgressPhase",
      "module": "progress::config",
      "path": "crates/events/src/progress/config.rs",
      "start_line": 50,
      "doc": [
        "A phase in a multi-stage operation"
      ],
      "definition": "pub struct ProgressPhase {\n    /// Human-readable name of the phase\n    pub name: String,\n    /// Weight of this phase relative to others (0.0-1.0)\n    pub weight: f64,\n    /// Optional estimated duration for this phase\n    pub estimated_duration: Option<Duration>,\n    /// Optional human-readable description of the phase\n    pub description: Option<String>,\n}"
    },
    {
      "kind": "enum",
      "name": "TrendDirection",
      "module": "progress::config",
      "path": "crates/events/src/progress/config.rs",
      "start_line": 90,
      "doc": [
        "Direction of speed trend"
      ],
      "definition": "pub enum TrendDirection {\n    /// Speed is increasing\n    Accelerating,\n    /// Speed is decreasing  \n    Decelerating,\n    /// Speed is relatively stable\n    Stable,\n}",
      "variants": [
        {
          "name": "Accelerating",
          "start_line": 92,
          "doc": [
            "Speed is increasing"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Decelerating",
          "start_line": 94,
          "doc": [
            "Speed is decreasing"
          ],
          "attributes": [],
          "payload": ""
        },
        {
          "name": "Stable",
          "start_line": 96,
          "doc": [
            "Speed is relatively stable"
          ],
          "attributes": [],
          "payload": ""
        }
      ]
    },
    {
      "kind": "struct",
      "name": "ProgressManager",
      "module": "progress::manager",
      "path": "crates/events/src/progress/manager.rs",
      "start_line": 23,
      "doc": [
        "Thread-safe progress tracker manager"
      ],
      "definition": "pub struct ProgressManager {\n    trackers: Arc<Mutex<std::collections::HashMap<String, ProgressTracker>>>,\n}"
    },
    {
      "kind": "struct",
      "name": "DownloadProgressConfig",
      "module": "progress::mod",
      "path": "crates/events/src/progress/mod.rs",
      "start_line": 257,
      "doc": [
        "Configuration for download progress tracking"
      ],
      "definition": "    pub struct DownloadProgressConfig {\n        /// Human-readable operation description (e.g., \"Downloading jq package\")\n        pub operation_name: String,\n\n        /// Total bytes to download (enables percentage calculation and ETA)\n        /// Set to None for unknown size downloads\n        pub total_bytes: Option<u64>,\n\n        /// Package name for display purposes (optional)\n        /// Used in progress messages: \"Downloading {`package_name`}\"\n        pub package_name: Option<String>,\n\n        /// Source URL for debugging and logging\n        pub url: String,\n    }"
    },
    {
      "kind": "struct",
      "name": "InstallProgressConfig",
      "module": "progress::mod",
      "path": "crates/events/src/progress/mod.rs",
      "start_line": 275,
      "doc": [
        "Configuration for install progress tracking"
      ],
      "definition": "    pub struct InstallProgressConfig {\n        /// Human-readable operation description (e.g., \"Installing packages\")\n        pub operation_name: String,\n\n        /// Number of packages to install (used for progress calculation)\n        pub package_count: u64,\n\n        /// Whether to include dependency resolution phase (adds 10% weight)\n        /// Set to true for fresh installs, false for pre-resolved packages\n        pub include_dependency_resolution: bool,\n    }"
    },
    {
      "kind": "struct",
      "name": "UpdateProgressConfig",
      "module": "progress::mod",
      "path": "crates/events/src/progress/mod.rs",
      "start_line": 289,
      "doc": [
        "Configuration for update/upgrade progress tracking"
      ],
      "definition": "    pub struct UpdateProgressConfig {\n        /// Human-readable operation description (e.g., \"Updating packages\")\n        pub operation_name: String,\n\n        /// Number of packages to update/upgrade (used for progress calculation)\n        pub package_count: u64,\n\n        /// Whether this is an upgrade (true) or update (false)\n        /// Affects progress messaging and phase weights\n        pub is_upgrade: bool,\n    }"
    },
    {
      "kind": "struct",
      "name": "UninstallProgressConfig",
      "module": "progress::mod",
      "path": "crates/events/src/progress/mod.rs",
      "start_line": 303,
      "doc": [
        "Configuration for uninstall progress tracking"
      ],
      "definition": "    pub struct UninstallProgressConfig {\n        /// Human-readable operation description (e.g., \"Uninstalling packages\")\n        pub operation_name: String,\n\n        /// Number of packages to uninstall (used for progress calculation)\n        pub package_count: u64,\n    }"
    },
    {
      "kind": "struct",
      "name": "VulnDbUpdateProgressConfig",
      "module": "progress::mod",
      "path": "crates/events/src/progress/mod.rs",
      "start_line": 313,
      "doc": [
        "Configuration for vulnerability database update progress tracking"
      ],
      "definition": "    pub struct VulnDbUpdateProgressConfig {\n        /// Human-readable operation description (e.g., \"Updating vulnerability database\")\n        pub operation_name: String,\n\n        /// Number of vulnerability sources to update (e.g., NVD, OSV, GitHub = 3)\n        pub sources_count: u64,\n    }"
    },
    {
      "kind": "struct",
      "name": "SpeedSample",
      "module": "progress::speed",
      "path": "crates/events/src/progress/speed.rs",
      "start_line": 22,
      "doc": [
        "Sample point for speed calculation"
      ],
      "definition": "pub(crate) struct SpeedSample {\n    /// Timestamp when sample was taken\n    pub timestamp: Instant,\n    /// Total bytes/items processed at this time\n    pub progress: u64,\n    /// Time delta since last sample\n    pub delta_time: Duration,\n    /// Progress delta since last sample\n    pub delta_progress: u64,\n    /// Instantaneous speed for this sample\n    pub speed: f64,\n}"
    },
    {
      "kind": "struct",
      "name": "SpeedBuffer",
      "module": "progress::speed",
      "path": "crates/events/src/progress/speed.rs",
      "start_line": 38,
      "doc": [
        "Efficient ring buffer for speed samples with automatic pruning"
      ],
      "definition": "pub(crate) struct SpeedBuffer {\n    /// Fixed-size ring buffer for recent samples\n    pub samples: VecDeque<SpeedSample>,\n    /// Maximum number of samples to keep\n    max_size: usize,\n    /// Sum of speeds for quick average calculation\n    speed_sum: f64,\n    /// Last recorded progress value\n    last_progress: u64,\n    /// Last sample timestamp\n    last_timestamp: Instant,\n}"
    },
    {
      "kind": "struct",
      "name": "ProgressTracker",
      "module": "progress::tracker",
      "path": "crates/events/src/progress/tracker.rs",
      "start_line": 22,
      "doc": [
        "Core progress tracker with sophisticated algorithms"
      ],
      "definition": "pub struct ProgressTracker {\n    /// Unique identifier for this tracker\n    id: String,\n    /// Human-readable operation name\n    operation: String,\n    /// Total amount of work (bytes, items, etc.)\n    total: Option<u64>,\n    /// Current progress\n    current: u64,\n    /// Phases for multi-stage operations\n    pub phases: Vec<ProgressPhase>,\n    /// Current active phase\n    pub current_phase: usize,\n    /// Speed calculation buffer\n    speed_buffer: SpeedBuffer,\n    /// Configuration for algorithms\n    config: ProgressConfig,\n    /// When tracking started\n    start_time: Instant,\n    /// Last update time\n    last_update: Instant,\n    /// Exponential moving average state\n    ema_speed: Option<f64>,\n    /// Whether tracker has been completed\n    pub(crate) completed: bool,\n}"
    },
    {
      "kind": "struct",
      "name": "ProgressUpdate",
      "module": "progress::update",
      "path": "crates/events/src/progress/update.rs",
      "start_line": 20,
      "doc": [
        "Result of a progress update with calculated metrics"
      ],
      "definition": "pub struct ProgressUpdate {\n    /// Tracker ID\n    pub id: String,\n    /// Current progress\n    pub progress: u64,\n    /// Total amount of work\n    pub total: Option<u64>,\n    /// Current phase index\n    pub phase: Option<usize>,\n    /// Smoothed speed (units per second)\n    pub speed: Option<f64>,\n    /// Estimated time to completion\n    pub eta: Option<Duration>,\n    /// Speed trend direction\n    pub trend: TrendDirection,\n}"
    }
  ]
}