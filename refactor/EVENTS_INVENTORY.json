{
  "base": "crates/events/src",
  "items": [
    {
      "kind": "enum",
      "name": "AcquisitionEvent",
      "module": "events::acquisition",
      "path": "crates/events/src/events/acquisition.rs",
      "start_line": 7,
      "doc": [],
      "definition": "pub enum AcquisitionEvent {\n    /// Package acquisition started\n    Started {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n    },\n\n    /// Package acquisition completed successfully\n    Completed {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        size: u64,\n    },\n\n    /// Package acquisition failed\n    Failed {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        retryable: bool,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 9,
          "doc": [
            "Package acquisition started"
          ],
          "definition": "Started {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n    },"
        },
        {
          "name": "Completed",
          "start_line": 16,
          "doc": [
            "Package acquisition completed successfully"
          ],
          "definition": "Completed {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        size: u64,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 24,
          "doc": [
            "Package acquisition failed"
          ],
          "definition": "Failed {\n        package: String,\n        version: Version,\n        source: AcquisitionSource,\n        retryable: bool,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "AuditEvent",
      "module": "events::audit",
      "path": "crates/events/src/events/audit.rs",
      "start_line": 6,
      "doc": [],
      "definition": "pub enum AuditEvent {\n    /// Audit scan started\n    ScanStarted { package_count: usize },\n\n    /// Audit of a single package completed\n    ScanPackageCompleted {\n        package: String,\n        vulnerabilities_found: usize,\n    },\n\n    /// Audit scan completed\n    ScanCompleted {\n        packages_scanned: usize,\n        vulnerabilities_found: usize,\n        critical_count: usize,\n    },\n\n    /// Audit scan failed\n    ScanFailed { retryable: bool },\n\n    /// Vulnerability database update started\n    VulnDbUpdateStarted,\n\n    /// Vulnerability database update completed\n    VulnDbUpdateCompleted {\n        total_vulnerabilities: usize,\n        sources_updated: usize,\n        duration_ms: u64,\n    },\n\n    /// Vulnerability database update failed\n    VulnDbUpdateFailed { retryable: bool },\n}",
      "variants": [
        {
          "name": "ScanStarted",
          "start_line": 8,
          "doc": [
            "Audit scan started"
          ],
          "definition": "ScanStarted { package_count: usize },"
        },
        {
          "name": "ScanPackageCompleted",
          "start_line": 11,
          "doc": [
            "Audit of a single package completed"
          ],
          "definition": "ScanPackageCompleted {\n        package: String,\n        vulnerabilities_found: usize,\n    },"
        },
        {
          "name": "ScanCompleted",
          "start_line": 17,
          "doc": [
            "Audit scan completed"
          ],
          "definition": "ScanCompleted {\n        packages_scanned: usize,\n        vulnerabilities_found: usize,\n        critical_count: usize,\n    },"
        },
        {
          "name": "ScanFailed",
          "start_line": 24,
          "doc": [
            "Audit scan failed"
          ],
          "definition": "ScanFailed { retryable: bool },"
        },
        {
          "name": "VulnDbUpdateStarted",
          "start_line": 27,
          "doc": [
            "Vulnerability database update started"
          ],
          "definition": "VulnDbUpdateStarted,"
        },
        {
          "name": "VulnDbUpdateCompleted",
          "start_line": 30,
          "doc": [
            "Vulnerability database update completed"
          ],
          "definition": "VulnDbUpdateCompleted {\n        total_vulnerabilities: usize,\n        sources_updated: usize,\n        duration_ms: u64,\n    },"
        },
        {
          "name": "VulnDbUpdateFailed",
          "start_line": 37,
          "doc": [
            "Vulnerability database update failed"
          ],
          "definition": "VulnDbUpdateFailed { retryable: bool },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "BuildEvent",
      "module": "events::build",
      "path": "crates/events/src/events/build.rs",
      "start_line": 31,
      "doc": [],
      "definition": "pub enum BuildEvent {\n    /// Build session started with comprehensive context\n    SessionStarted {\n        session_id: String,\n        package: String,\n        version: Version,\n        build_system: BuildSystem,\n        cache_enabled: bool,\n    },\n\n    /// Build phase started\n    PhaseStarted {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        estimated_duration: Option<Duration>,\n    },\n\n    /// Build phase completed\n    PhaseCompleted {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        duration: Duration,\n    },\n\n    /// Build command started\n    CommandStarted {\n        session_id: String,\n        package: String,\n        command_id: String,\n        build_system: BuildSystem,\n        command: String,\n        working_dir: PathBuf,\n        timeout: Option<Duration>,\n    },\n\n    /// Real-time build output\n    StepOutput {\n        session_id: String,\n        package: String,\n        command_id: String,\n        line: String,\n        is_stderr: bool,\n    },\n\n    /// Build completed successfully\n    Completed {\n        session_id: String,\n        package: String,\n        version: Version,\n        path: PathBuf,\n        duration: Duration,\n    },\n\n    /// Build failed\n    Failed {\n        session_id: String,\n        package: String,\n        version: Version,\n        error: String,\n        phase: Option<BuildPhase>,\n        recovery_suggestions: Vec<String>,\n    },\n\n    /// Build warning encountered\n    Warning {\n        session_id: String,\n        package: String,\n        message: String,\n        source: Option<String>,\n    },\n\n    /// Build cache cleaned\n    CacheCleaned {\n        removed_items: usize,\n        freed_bytes: u64,\n    },\n\n    /// Build cleaned up\n    Cleaned { session_id: String, package: String },\n\n    /// Build resource usage update\n    ResourceUsage {\n        session_id: String,\n        package: String,\n        cpu_percent: f64,\n        memory_mb: u64,\n        disk_usage_mb: u64,\n    },\n\n    /// Build orchestration phase started (recipe parsing, env setup, etc.)\n    OrchestrationPhaseStarted {\n        phase: String,\n        description: Option<String>,\n    },\n\n    /// Build orchestration phase completed\n    OrchestrationPhaseCompleted {\n        phase: String,\n        success: bool,\n        duration: Option<Duration>,\n    },\n}",
      "variants": [
        {
          "name": "SessionStarted",
          "start_line": 33,
          "doc": [
            "Build session started with comprehensive context"
          ],
          "definition": "SessionStarted {\n        session_id: String,\n        package: String,\n        version: Version,\n        build_system: BuildSystem,\n        cache_enabled: bool,\n    },"
        },
        {
          "name": "PhaseStarted",
          "start_line": 42,
          "doc": [
            "Build phase started"
          ],
          "definition": "PhaseStarted {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        estimated_duration: Option<Duration>,\n    },"
        },
        {
          "name": "PhaseCompleted",
          "start_line": 50,
          "doc": [
            "Build phase completed"
          ],
          "definition": "PhaseCompleted {\n        session_id: String,\n        package: String,\n        phase: BuildPhase,\n        duration: Duration,\n    },"
        },
        {
          "name": "CommandStarted",
          "start_line": 58,
          "doc": [
            "Build command started"
          ],
          "definition": "CommandStarted {\n        session_id: String,\n        package: String,\n        command_id: String,\n        build_system: BuildSystem,\n        command: String,\n        working_dir: PathBuf,\n        timeout: Option<Duration>,\n    },"
        },
        {
          "name": "StepOutput",
          "start_line": 69,
          "doc": [
            "Real-time build output"
          ],
          "definition": "StepOutput {\n        session_id: String,\n        package: String,\n        command_id: String,\n        line: String,\n        is_stderr: bool,\n    },"
        },
        {
          "name": "Completed",
          "start_line": 78,
          "doc": [
            "Build completed successfully"
          ],
          "definition": "Completed {\n        session_id: String,\n        package: String,\n        version: Version,\n        path: PathBuf,\n        duration: Duration,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 87,
          "doc": [
            "Build failed"
          ],
          "definition": "Failed {\n        session_id: String,\n        package: String,\n        version: Version,\n        error: String,\n        phase: Option<BuildPhase>,\n        recovery_suggestions: Vec<String>,\n    },"
        },
        {
          "name": "Warning",
          "start_line": 97,
          "doc": [
            "Build warning encountered"
          ],
          "definition": "Warning {\n        session_id: String,\n        package: String,\n        message: String,\n        source: Option<String>,\n    },"
        },
        {
          "name": "CacheCleaned",
          "start_line": 105,
          "doc": [
            "Build cache cleaned"
          ],
          "definition": "CacheCleaned {\n        removed_items: usize,\n        freed_bytes: u64,\n    },"
        },
        {
          "name": "Cleaned",
          "start_line": 111,
          "doc": [
            "Build cleaned up"
          ],
          "definition": "Cleaned { session_id: String, package: String },"
        },
        {
          "name": "ResourceUsage",
          "start_line": 114,
          "doc": [
            "Build resource usage update"
          ],
          "definition": "ResourceUsage {\n        session_id: String,\n        package: String,\n        cpu_percent: f64,\n        memory_mb: u64,\n        disk_usage_mb: u64,\n    },"
        },
        {
          "name": "OrchestrationPhaseStarted",
          "start_line": 123,
          "doc": [
            "Build orchestration phase started (recipe parsing, env setup, etc.)"
          ],
          "definition": "OrchestrationPhaseStarted {\n        phase: String,\n        description: Option<String>,\n    },"
        },
        {
          "name": "OrchestrationPhaseCompleted",
          "start_line": 129,
          "doc": [
            "Build orchestration phase completed"
          ],
          "definition": "OrchestrationPhaseCompleted {\n        phase: String,\n        success: bool,\n        duration: Option<Duration>,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "DownloadEvent",
      "module": "events::download",
      "path": "crates/events/src/events/download.rs",
      "start_line": 5,
      "doc": [],
      "definition": "pub enum DownloadEvent {\n    /// A download began.\n    Started {\n        url: String,\n        package: Option<String>,\n        total_bytes: Option<u64>,\n    },\n\n    /// The download finished successfully.\n    Completed {\n        url: String,\n        package: Option<String>,\n        bytes_downloaded: u64,\n    },\n\n    /// The download failed.\n    Failed {\n        url: String,\n        package: Option<String>,\n        failure: super::FailureContext,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 7,
          "doc": [
            "A download began."
          ],
          "definition": "Started {\n        url: String,\n        package: Option<String>,\n        total_bytes: Option<u64>,\n    },"
        },
        {
          "name": "Completed",
          "start_line": 14,
          "doc": [
            "The download finished successfully."
          ],
          "definition": "Completed {\n        url: String,\n        package: Option<String>,\n        bytes_downloaded: u64,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 21,
          "doc": [
            "The download failed."
          ],
          "definition": "Failed {\n        url: String,\n        package: Option<String>,\n        failure: super::FailureContext,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "GeneralEvent",
      "module": "events::general",
      "path": "crates/events/src/events/general.rs",
      "start_line": 7,
      "doc": [],
      "definition": "pub enum GeneralEvent {\n    /// Generic warning message with optional context\n    Warning {\n        message: String,\n        context: Option<String>,\n    },\n\n    /// Generic error message with optional details\n    Error {\n        message: String,\n        details: Option<String>,\n    },\n\n    /// Debug logging with structured context\n    DebugLog {\n        message: String,\n        context: HashMap<String, String>,\n    },\n\n    /// Generic operation started notification\n    OperationStarted { operation: String },\n\n    /// Generic operation completion with success status\n    OperationCompleted { operation: String, success: bool },\n\n    /// Generic operation failure with error details\n    OperationFailed {\n        operation: String,\n        failure: super::FailureContext,\n    },\n\n    /// Check mode preview of planned action\n    CheckModePreview {\n        operation: String,\n        action: String,\n        details: std::collections::HashMap<String, String>,\n    },\n\n    /// Check mode summary of all planned changes\n    CheckModeSummary {\n        operation: String,\n        total_changes: usize,\n        categories: std::collections::HashMap<String, usize>,\n    },\n}",
      "variants": [
        {
          "name": "Warning",
          "start_line": 9,
          "doc": [
            "Generic warning message with optional context"
          ],
          "definition": "Warning {\n        message: String,\n        context: Option<String>,\n    },"
        },
        {
          "name": "Error",
          "start_line": 15,
          "doc": [
            "Generic error message with optional details"
          ],
          "definition": "Error {\n        message: String,\n        details: Option<String>,\n    },"
        },
        {
          "name": "DebugLog",
          "start_line": 21,
          "doc": [
            "Debug logging with structured context"
          ],
          "definition": "DebugLog {\n        message: String,\n        context: HashMap<String, String>,\n    },"
        },
        {
          "name": "OperationStarted",
          "start_line": 27,
          "doc": [
            "Generic operation started notification"
          ],
          "definition": "OperationStarted { operation: String },"
        },
        {
          "name": "OperationCompleted",
          "start_line": 30,
          "doc": [
            "Generic operation completion with success status"
          ],
          "definition": "OperationCompleted { operation: String, success: bool },"
        },
        {
          "name": "OperationFailed",
          "start_line": 33,
          "doc": [
            "Generic operation failure with error details"
          ],
          "definition": "OperationFailed {\n        operation: String,\n        failure: super::FailureContext,\n    },"
        },
        {
          "name": "CheckModePreview",
          "start_line": 39,
          "doc": [
            "Check mode preview of planned action"
          ],
          "definition": "CheckModePreview {\n        operation: String,\n        action: String,\n        details: std::collections::HashMap<String, String>,\n    },"
        },
        {
          "name": "CheckModeSummary",
          "start_line": 46,
          "doc": [
            "Check mode summary of all planned changes"
          ],
          "definition": "CheckModeSummary {\n        operation: String,\n        total_changes: usize,\n        categories: std::collections::HashMap<String, usize>,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "GuardEvent",
      "module": "events::guard",
      "path": "crates/events/src/events/guard.rs",
      "start_line": 22,
      "doc": [],
      "definition": "pub enum GuardEvent {\n    /// Guard verification started\n    VerificationStarted {\n        scope: String,\n        level: String,\n        packages_count: usize,\n        files_count: Option<usize>,\n    },\n\n    /// Guard discrepancy found\n    DiscrepancyFound(GuardDiscrepancyParams),\n\n    /// Guard verification completed\n    VerificationCompleted {\n        total_discrepancies: usize,\n        by_severity: HashMap<String, usize>,\n        duration_ms: u64,\n        cache_hit_rate: f64,\n        coverage_percent: f64,\n        scope_description: String,\n    },\n\n    /// Guard verification failed\n    VerificationFailed {\n        retryable: bool,\n        packages_verified: usize,\n        files_verified: usize,\n        duration_ms: u64,\n    },\n\n    /// Guard healing started\n    HealingStarted {\n        discrepancies_count: usize,\n        auto_heal_count: usize,\n        confirmation_required_count: usize,\n        manual_intervention_count: usize,\n    },\n\n    /// Guard healing result\n    HealingResult {\n        discrepancy_type: String,\n        file_path: String,\n        success: bool,\n        healing_action: String,\n        error: Option<String>,\n        duration_ms: u64,\n    },\n\n    /// Guard healing completed\n    HealingCompleted {\n        healed_count: usize,\n        failed_count: usize,\n        skipped_count: usize,\n        duration_ms: u64,\n    },\n\n    /// Guard healing failed\n    HealingFailed {\n        retryable: bool,\n        completed_healing: usize,\n        failed_healing: usize,\n        duration_ms: u64,\n    },\n}",
      "variants": [
        {
          "name": "VerificationStarted",
          "start_line": 24,
          "doc": [
            "Guard verification started"
          ],
          "definition": "VerificationStarted {\n        scope: String,\n        level: String,\n        packages_count: usize,\n        files_count: Option<usize>,\n    },"
        },
        {
          "name": "DiscrepancyFound",
          "start_line": 32,
          "doc": [
            "Guard discrepancy found"
          ],
          "definition": "DiscrepancyFound(GuardDiscrepancyParams),"
        },
        {
          "name": "VerificationCompleted",
          "start_line": 35,
          "doc": [
            "Guard verification completed"
          ],
          "definition": "VerificationCompleted {\n        total_discrepancies: usize,\n        by_severity: HashMap<String, usize>,\n        duration_ms: u64,\n        cache_hit_rate: f64,\n        coverage_percent: f64,\n        scope_description: String,\n    },"
        },
        {
          "name": "VerificationFailed",
          "start_line": 45,
          "doc": [
            "Guard verification failed"
          ],
          "definition": "VerificationFailed {\n        retryable: bool,\n        packages_verified: usize,\n        files_verified: usize,\n        duration_ms: u64,\n    },"
        },
        {
          "name": "HealingStarted",
          "start_line": 53,
          "doc": [
            "Guard healing started"
          ],
          "definition": "HealingStarted {\n        discrepancies_count: usize,\n        auto_heal_count: usize,\n        confirmation_required_count: usize,\n        manual_intervention_count: usize,\n    },"
        },
        {
          "name": "HealingResult",
          "start_line": 61,
          "doc": [
            "Guard healing result"
          ],
          "definition": "HealingResult {\n        discrepancy_type: String,\n        file_path: String,\n        success: bool,\n        healing_action: String,\n        error: Option<String>,\n        duration_ms: u64,\n    },"
        },
        {
          "name": "HealingCompleted",
          "start_line": 71,
          "doc": [
            "Guard healing completed"
          ],
          "definition": "HealingCompleted {\n        healed_count: usize,\n        failed_count: usize,\n        skipped_count: usize,\n        duration_ms: u64,\n    },"
        },
        {
          "name": "HealingFailed",
          "start_line": 79,
          "doc": [
            "Guard healing failed"
          ],
          "definition": "HealingFailed {\n        retryable: bool,\n        completed_healing: usize,\n        failed_healing: usize,\n        duration_ms: u64,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "InstallEvent",
      "module": "events::install",
      "path": "crates/events/src/events/install.rs",
      "start_line": 6,
      "doc": [],
      "definition": "pub enum InstallEvent {\n    /// Installation operation started for a package\n    Started { package: String, version: Version },\n\n    /// Installation completed successfully\n    Completed {\n        package: String,\n        version: Version,\n        files_installed: usize,\n    },\n\n    /// Installation failed\n    Failed {\n        package: String,\n        version: Version,\n        failure: super::FailureContext,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 8,
          "doc": [
            "Installation operation started for a package"
          ],
          "definition": "Started { package: String, version: Version },"
        },
        {
          "name": "Completed",
          "start_line": 11,
          "doc": [
            "Installation completed successfully"
          ],
          "definition": "Completed {\n        package: String,\n        version: Version,\n        files_installed: usize,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 18,
          "doc": [
            "Installation failed"
          ],
          "definition": "Failed {\n        package: String,\n        version: Version,\n        failure: super::FailureContext,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "AppEvent",
      "module": "events",
      "path": "crates/events/src/events/mod.rs",
      "start_line": 89,
      "doc": [],
      "definition": "pub enum AppEvent {\n    /// General utility events (warnings, errors, operations)\n    General(GeneralEvent),\n\n    /// Download-specific events (HTTP downloads, progress, retries)\n    Download(DownloadEvent),\n\n    /// Build system events (compilation, caching, sessions)\n    Build(BuildEvent),\n\n    /// State management events (transactions, rollbacks)\n    State(StateEvent),\n\n    /// Package installation events (staging, installation, validation)\n    Install(InstallEvent),\n\n    /// Package uninstallation events (removal, dependency checking)\n    Uninstall(UninstallEvent),\n\n    /// Package update/upgrade events (update planning, batch updates)\n    Update(UpdateEvent),\n\n    /// Package acquisition events (download, cache, verification)\n    Acquisition(AcquisitionEvent),\n\n    /// Progress tracking events (sophisticated progress algorithms)\n    Progress(ProgressEvent),\n\n    /// Repository and index events (sync, mirroring)\n    Repo(RepoEvent),\n\n    /// Resolver events (dependency resolution, SAT solving)\n    Resolver(ResolverEvent),\n\n    /// Guard events (filesystem integrity, healing)\n    Guard(GuardEvent),\n\n    /// Quality assurance events (artifact validation)\n    Qa(QaEvent),\n\n    /// Audit and vulnerability scanning events\n    Audit(AuditEvent),\n\n    /// Package operation events (high-level package operations)\n    Package(PackageEvent),\n\n    /// Platform-specific operation events (binary, filesystem, process operations)\n    Platform(PlatformEvent),\n}",
      "variants": [
        {
          "name": "General",
          "start_line": 91,
          "doc": [
            "General utility events (warnings, errors, operations)"
          ],
          "definition": "General(GeneralEvent),"
        },
        {
          "name": "Download",
          "start_line": 94,
          "doc": [
            "Download-specific events (HTTP downloads, progress, retries)"
          ],
          "definition": "Download(DownloadEvent),"
        },
        {
          "name": "Build",
          "start_line": 97,
          "doc": [
            "Build system events (compilation, caching, sessions)"
          ],
          "definition": "Build(BuildEvent),"
        },
        {
          "name": "State",
          "start_line": 100,
          "doc": [
            "State management events (transactions, rollbacks)"
          ],
          "definition": "State(StateEvent),"
        },
        {
          "name": "Install",
          "start_line": 103,
          "doc": [
            "Package installation events (staging, installation, validation)"
          ],
          "definition": "Install(InstallEvent),"
        },
        {
          "name": "Uninstall",
          "start_line": 106,
          "doc": [
            "Package uninstallation events (removal, dependency checking)"
          ],
          "definition": "Uninstall(UninstallEvent),"
        },
        {
          "name": "Update",
          "start_line": 109,
          "doc": [
            "Package update/upgrade events (update planning, batch updates)"
          ],
          "definition": "Update(UpdateEvent),"
        },
        {
          "name": "Acquisition",
          "start_line": 112,
          "doc": [
            "Package acquisition events (download, cache, verification)"
          ],
          "definition": "Acquisition(AcquisitionEvent),"
        },
        {
          "name": "Progress",
          "start_line": 115,
          "doc": [
            "Progress tracking events (sophisticated progress algorithms)"
          ],
          "definition": "Progress(ProgressEvent),"
        },
        {
          "name": "Repo",
          "start_line": 118,
          "doc": [
            "Repository and index events (sync, mirroring)"
          ],
          "definition": "Repo(RepoEvent),"
        },
        {
          "name": "Resolver",
          "start_line": 121,
          "doc": [
            "Resolver events (dependency resolution, SAT solving)"
          ],
          "definition": "Resolver(ResolverEvent),"
        },
        {
          "name": "Guard",
          "start_line": 124,
          "doc": [
            "Guard events (filesystem integrity, healing)"
          ],
          "definition": "Guard(GuardEvent),"
        },
        {
          "name": "Qa",
          "start_line": 127,
          "doc": [
            "Quality assurance events (artifact validation)"
          ],
          "definition": "Qa(QaEvent),"
        },
        {
          "name": "Audit",
          "start_line": 130,
          "doc": [
            "Audit and vulnerability scanning events"
          ],
          "definition": "Audit(AuditEvent),"
        },
        {
          "name": "Package",
          "start_line": 133,
          "doc": [
            "Package operation events (high-level package operations)"
          ],
          "definition": "Package(PackageEvent),"
        },
        {
          "name": "Platform",
          "start_line": 136,
          "doc": [
            "Platform-specific operation events (binary, filesystem, process operations)"
          ],
          "definition": "Platform(PlatformEvent),"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "PackageEvent",
      "module": "events::package",
      "path": "crates/events/src/events/package.rs",
      "start_line": 6,
      "doc": [],
      "definition": "pub enum PackageEvent {\n    /// List operation starting\n    ListStarting,\n\n    /// List operation completed\n    ListCompleted { count: usize },\n\n    /// Search operation starting\n    SearchStarting { query: String },\n\n    /// Search operation completed\n    SearchCompleted { query: String, count: usize },\n\n    /// Health check starting\n    HealthCheckStarting,\n\n    /// Health check completed\n    HealthCheckCompleted { healthy: bool, issues: Vec<String> },\n\n    /// Self-update starting\n    SelfUpdateStarting,\n\n    /// Self-update checking version\n    SelfUpdateCheckingVersion { current_version: String },\n\n    /// Self-update version available\n    SelfUpdateVersionAvailable {\n        current_version: String,\n        latest_version: String,\n    },\n\n    /// Self-update already latest\n    SelfUpdateAlreadyLatest { version: String },\n\n    /// Self-update downloading\n    SelfUpdateDownloading { version: String, url: String },\n\n    /// Self-update verifying\n    SelfUpdateVerifying { version: String },\n\n    /// Self-update installing\n    SelfUpdateInstalling { version: String },\n\n    /// Self-update completed\n    SelfUpdateCompleted {\n        old_version: String,\n        new_version: String,\n        duration_ms: u64,\n    },\n\n    /// Cleanup starting\n    CleanupStarting,\n\n    /// Cleanup completed\n    CleanupCompleted {\n        states_removed: usize,\n        packages_removed: usize,\n        duration_ms: u64,\n    },\n}",
      "variants": [
        {
          "name": "ListStarting",
          "start_line": 8,
          "doc": [
            "List operation starting"
          ],
          "definition": "ListStarting,"
        },
        {
          "name": "ListCompleted",
          "start_line": 11,
          "doc": [
            "List operation completed"
          ],
          "definition": "ListCompleted { count: usize },"
        },
        {
          "name": "SearchStarting",
          "start_line": 14,
          "doc": [
            "Search operation starting"
          ],
          "definition": "SearchStarting { query: String },"
        },
        {
          "name": "SearchCompleted",
          "start_line": 17,
          "doc": [
            "Search operation completed"
          ],
          "definition": "SearchCompleted { query: String, count: usize },"
        },
        {
          "name": "HealthCheckStarting",
          "start_line": 20,
          "doc": [
            "Health check starting"
          ],
          "definition": "HealthCheckStarting,"
        },
        {
          "name": "HealthCheckCompleted",
          "start_line": 23,
          "doc": [
            "Health check completed"
          ],
          "definition": "HealthCheckCompleted { healthy: bool, issues: Vec<String> },"
        },
        {
          "name": "SelfUpdateStarting",
          "start_line": 26,
          "doc": [
            "Self-update starting"
          ],
          "definition": "SelfUpdateStarting,"
        },
        {
          "name": "SelfUpdateCheckingVersion",
          "start_line": 29,
          "doc": [
            "Self-update checking version"
          ],
          "definition": "SelfUpdateCheckingVersion { current_version: String },"
        },
        {
          "name": "SelfUpdateVersionAvailable",
          "start_line": 32,
          "doc": [
            "Self-update version available"
          ],
          "definition": "SelfUpdateVersionAvailable {\n        current_version: String,\n        latest_version: String,\n    },"
        },
        {
          "name": "SelfUpdateAlreadyLatest",
          "start_line": 38,
          "doc": [
            "Self-update already latest"
          ],
          "definition": "SelfUpdateAlreadyLatest { version: String },"
        },
        {
          "name": "SelfUpdateDownloading",
          "start_line": 41,
          "doc": [
            "Self-update downloading"
          ],
          "definition": "SelfUpdateDownloading { version: String, url: String },"
        },
        {
          "name": "SelfUpdateVerifying",
          "start_line": 44,
          "doc": [
            "Self-update verifying"
          ],
          "definition": "SelfUpdateVerifying { version: String },"
        },
        {
          "name": "SelfUpdateInstalling",
          "start_line": 47,
          "doc": [
            "Self-update installing"
          ],
          "definition": "SelfUpdateInstalling { version: String },"
        },
        {
          "name": "SelfUpdateCompleted",
          "start_line": 50,
          "doc": [
            "Self-update completed"
          ],
          "definition": "SelfUpdateCompleted {\n        old_version: String,\n        new_version: String,\n        duration_ms: u64,\n    },"
        },
        {
          "name": "CleanupStarting",
          "start_line": 57,
          "doc": [
            "Cleanup starting"
          ],
          "definition": "CleanupStarting,"
        },
        {
          "name": "CleanupCompleted",
          "start_line": 60,
          "doc": [
            "Cleanup completed"
          ],
          "definition": "CleanupCompleted {\n        states_removed: usize,\n        packages_removed: usize,\n        duration_ms: u64,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "PlatformEvent",
      "module": "events::platform",
      "path": "crates/events/src/events/platform.rs",
      "start_line": 9,
      "doc": [],
      "definition": "pub enum PlatformEvent {\n    /// Binary operation started (`install_name_tool`, `otool`, `codesign`)\n    BinaryOperationStarted {\n        /// Operation name (e.g., `get_install_name`, `sign_binary`)\n        operation: String,\n        /// Path to the binary being operated on\n        binary_path: String,\n        /// Additional context for the operation\n        context: HashMap<String, String>,\n    },\n\n    /// Binary operation completed successfully\n    BinaryOperationCompleted {\n        /// Operation name that completed\n        operation: String,\n        /// Path to the binary that was operated on\n        binary_path: String,\n        /// List of changes made during the operation\n        changes_made: Vec<String>,\n        /// Duration of the operation in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Binary operation failed\n    BinaryOperationFailed {\n        /// Operation name that failed\n        operation: String,\n        /// Path to the binary that was being operated on\n        binary_path: String,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Filesystem operation started (APFS clone, atomic operations)\n    FilesystemOperationStarted {\n        /// Operation name (e.g., `clone_file`, `atomic_rename`)\n        operation: String,\n        /// Source path (if applicable)\n        source_path: Option<String>,\n        /// Target path\n        target_path: String,\n        /// Additional operation context\n        context: HashMap<String, String>,\n    },\n\n    /// Filesystem operation completed successfully\n    FilesystemOperationCompleted {\n        /// Operation name that completed\n        operation: String,\n        /// List of paths affected by the operation\n        paths_affected: Vec<String>,\n        /// Duration of the operation in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Filesystem operation failed\n    FilesystemOperationFailed {\n        /// Operation name that failed\n        operation: String,\n        /// Paths involved in the failed operation\n        paths_involved: Vec<String>,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Process execution started\n    ProcessExecutionStarted {\n        /// Command being executed\n        command: String,\n        /// Command arguments\n        args: Vec<String>,\n        /// Working directory (if set)\n        working_dir: Option<String>,\n    },\n\n    /// Process execution completed\n    ProcessExecutionCompleted {\n        /// Command that was executed\n        command: String,\n        /// Exit code from the process\n        exit_code: i32,\n        /// Duration of execution in milliseconds\n        duration_ms: u64,\n        /// Size of stdout in bytes\n        stdout_bytes: usize,\n        /// Size of stderr in bytes\n        stderr_bytes: usize,\n    },\n\n    /// Process execution failed\n    ProcessExecutionFailed {\n        /// Command that failed\n        command: String,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },\n\n    /// Tool discovery started\n    ToolDiscoveryStarted {\n        /// Name of the tool being discovered\n        tool: String,\n        /// Paths being searched for the tool\n        search_paths: Vec<std::path::PathBuf>,\n    },\n\n    /// Tool discovered successfully\n    ToolDiscovered {\n        /// Name of the tool that was discovered\n        tool: String,\n        /// Full path to the discovered tool\n        path: std::path::PathBuf,\n        /// Tool version if detectable\n        version: Option<String>,\n    },\n\n    /// Tool not found after searching\n    ToolNotFound {\n        /// Name of the tool that was not found\n        tool: String,\n        /// Paths that were searched\n        searched_paths: Vec<std::path::PathBuf>,\n        /// Installation suggestion for the tool\n        suggestion: String,\n    },\n}",
      "variants": [
        {
          "name": "BinaryOperationStarted",
          "start_line": 11,
          "doc": [
            "Binary operation started (`install_name_tool`, `otool`, `codesign`)"
          ],
          "definition": "BinaryOperationStarted {\n        /// Operation name (e.g., `get_install_name`, `sign_binary`)\n        operation: String,\n        /// Path to the binary being operated on\n        binary_path: String,\n        /// Additional context for the operation\n        context: HashMap<String, String>,\n    },"
        },
        {
          "name": "BinaryOperationCompleted",
          "start_line": 21,
          "doc": [
            "Binary operation completed successfully"
          ],
          "definition": "BinaryOperationCompleted {\n        /// Operation name that completed\n        operation: String,\n        /// Path to the binary that was operated on\n        binary_path: String,\n        /// List of changes made during the operation\n        changes_made: Vec<String>,\n        /// Duration of the operation in milliseconds\n        duration_ms: u64,\n    },"
        },
        {
          "name": "BinaryOperationFailed",
          "start_line": 33,
          "doc": [
            "Binary operation failed"
          ],
          "definition": "BinaryOperationFailed {\n        /// Operation name that failed\n        operation: String,\n        /// Path to the binary that was being operated on\n        binary_path: String,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },"
        },
        {
          "name": "FilesystemOperationStarted",
          "start_line": 45,
          "doc": [
            "Filesystem operation started (APFS clone, atomic operations)"
          ],
          "definition": "FilesystemOperationStarted {\n        /// Operation name (e.g., `clone_file`, `atomic_rename`)\n        operation: String,\n        /// Source path (if applicable)\n        source_path: Option<String>,\n        /// Target path\n        target_path: String,\n        /// Additional operation context\n        context: HashMap<String, String>,\n    },"
        },
        {
          "name": "FilesystemOperationCompleted",
          "start_line": 57,
          "doc": [
            "Filesystem operation completed successfully"
          ],
          "definition": "FilesystemOperationCompleted {\n        /// Operation name that completed\n        operation: String,\n        /// List of paths affected by the operation\n        paths_affected: Vec<String>,\n        /// Duration of the operation in milliseconds\n        duration_ms: u64,\n    },"
        },
        {
          "name": "FilesystemOperationFailed",
          "start_line": 67,
          "doc": [
            "Filesystem operation failed"
          ],
          "definition": "FilesystemOperationFailed {\n        /// Operation name that failed\n        operation: String,\n        /// Paths involved in the failed operation\n        paths_involved: Vec<String>,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },"
        },
        {
          "name": "ProcessExecutionStarted",
          "start_line": 79,
          "doc": [
            "Process execution started"
          ],
          "definition": "ProcessExecutionStarted {\n        /// Command being executed\n        command: String,\n        /// Command arguments\n        args: Vec<String>,\n        /// Working directory (if set)\n        working_dir: Option<String>,\n    },"
        },
        {
          "name": "ProcessExecutionCompleted",
          "start_line": 89,
          "doc": [
            "Process execution completed"
          ],
          "definition": "ProcessExecutionCompleted {\n        /// Command that was executed\n        command: String,\n        /// Exit code from the process\n        exit_code: i32,\n        /// Duration of execution in milliseconds\n        duration_ms: u64,\n        /// Size of stdout in bytes\n        stdout_bytes: usize,\n        /// Size of stderr in bytes\n        stderr_bytes: usize,\n    },"
        },
        {
          "name": "ProcessExecutionFailed",
          "start_line": 103,
          "doc": [
            "Process execution failed"
          ],
          "definition": "ProcessExecutionFailed {\n        /// Command that failed\n        command: String,\n        /// Error message\n        error_message: String,\n        /// Duration before failure in milliseconds\n        duration_ms: u64,\n    },"
        },
        {
          "name": "ToolDiscoveryStarted",
          "start_line": 113,
          "doc": [
            "Tool discovery started"
          ],
          "definition": "ToolDiscoveryStarted {\n        /// Name of the tool being discovered\n        tool: String,\n        /// Paths being searched for the tool\n        search_paths: Vec<std::path::PathBuf>,\n    },"
        },
        {
          "name": "ToolDiscovered",
          "start_line": 121,
          "doc": [
            "Tool discovered successfully"
          ],
          "definition": "ToolDiscovered {\n        /// Name of the tool that was discovered\n        tool: String,\n        /// Full path to the discovered tool\n        path: std::path::PathBuf,\n        /// Tool version if detectable\n        version: Option<String>,\n    },"
        },
        {
          "name": "ToolNotFound",
          "start_line": 131,
          "doc": [
            "Tool not found after searching"
          ],
          "definition": "ToolNotFound {\n        /// Name of the tool that was not found\n        tool: String,\n        /// Paths that were searched\n        searched_paths: Vec<std::path::PathBuf>,\n        /// Installation suggestion for the tool\n        suggestion: String,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ProgressEvent",
      "module": "events::progress",
      "path": "crates/events/src/events/progress.rs",
      "start_line": 9,
      "doc": [],
      "definition": "pub enum ProgressEvent {\n    /// Progress tracking started\n    Started {\n        id: String,\n        operation: String,\n        total: Option<u64>,\n        phases: Vec<ProgressPhase>,\n        parent_id: Option<String>,\n    },\n\n    /// Progress updated with calculated metrics\n    Updated {\n        id: String,\n        current: u64,\n        total: Option<u64>,\n        phase: Option<usize>,\n        speed: Option<f64>,\n        eta: Option<Duration>,\n        efficiency: Option<f64>,\n    },\n\n    /// Progress phase changed\n    PhaseChanged {\n        id: String,\n        phase: usize,\n        phase_name: String,\n    },\n\n    /// Progress completed successfully\n    Completed {\n        id: String,\n        duration: Duration,\n        final_speed: Option<f64>,\n        total_processed: u64,\n    },\n\n    /// Progress failed\n    Failed {\n        id: String,\n        failure: super::FailureContext,\n        completed_items: u64,\n        partial_duration: Duration,\n    },\n\n    /// Progress paused\n    Paused {\n        id: String,\n        reason: String,\n        items_completed: u64,\n    },\n\n    /// Progress resumed\n    Resumed {\n        id: String,\n        pause_duration: Duration,\n    },\n\n    /// Nested progress - child operation started\n    ChildStarted {\n        parent_id: String,\n        child_id: String,\n        operation: String,\n        weight: f64, // Contribution to parent progress (0.0-1.0)\n    },\n\n    /// Nested progress - child operation completed\n    ChildCompleted {\n        parent_id: String,\n        child_id: String,\n        success: bool,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 11,
          "doc": [
            "Progress tracking started"
          ],
          "definition": "Started {\n        id: String,\n        operation: String,\n        total: Option<u64>,\n        phases: Vec<ProgressPhase>,\n        parent_id: Option<String>,\n    },"
        },
        {
          "name": "Updated",
          "start_line": 20,
          "doc": [
            "Progress updated with calculated metrics"
          ],
          "definition": "Updated {\n        id: String,\n        current: u64,\n        total: Option<u64>,\n        phase: Option<usize>,\n        speed: Option<f64>,\n        eta: Option<Duration>,\n        efficiency: Option<f64>,\n    },"
        },
        {
          "name": "PhaseChanged",
          "start_line": 31,
          "doc": [
            "Progress phase changed"
          ],
          "definition": "PhaseChanged {\n        id: String,\n        phase: usize,\n        phase_name: String,\n    },"
        },
        {
          "name": "Completed",
          "start_line": 38,
          "doc": [
            "Progress completed successfully"
          ],
          "definition": "Completed {\n        id: String,\n        duration: Duration,\n        final_speed: Option<f64>,\n        total_processed: u64,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 46,
          "doc": [
            "Progress failed"
          ],
          "definition": "Failed {\n        id: String,\n        failure: super::FailureContext,\n        completed_items: u64,\n        partial_duration: Duration,\n    },"
        },
        {
          "name": "Paused",
          "start_line": 54,
          "doc": [
            "Progress paused"
          ],
          "definition": "Paused {\n        id: String,\n        reason: String,\n        items_completed: u64,\n    },"
        },
        {
          "name": "Resumed",
          "start_line": 61,
          "doc": [
            "Progress resumed"
          ],
          "definition": "Resumed {\n        id: String,\n        pause_duration: Duration,\n    },"
        },
        {
          "name": "ChildStarted",
          "start_line": 67,
          "doc": [
            "Nested progress - child operation started"
          ],
          "definition": "ChildStarted {\n        parent_id: String,\n        child_id: String,\n        operation: String,\n        weight: f64, // Contribution to parent progress (0.0-1.0)\n    },"
        },
        {
          "name": "ChildCompleted",
          "start_line": 75,
          "doc": [
            "Nested progress - child operation completed"
          ],
          "definition": "ChildCompleted {\n        parent_id: String,\n        child_id: String,\n        success: bool,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "QaEvent",
      "module": "events::qa",
      "path": "crates/events/src/events/qa.rs",
      "start_line": 7,
      "doc": [],
      "definition": "pub enum QaEvent {\n    /// QA pipeline started\n    PipelineStarted {\n        package: String,\n        version: String,\n        qa_level: String,\n    },\n\n    /// QA pipeline completed\n    PipelineCompleted {\n        package: String,\n        version: String,\n        total_checks: usize,\n        passed: usize,\n        failed: usize,\n        duration_seconds: u64,\n    },\n\n    /// QA check started\n    CheckStarted {\n        check_type: String,\n        check_name: String,\n    },\n\n    /// QA check completed\n    CheckCompleted {\n        check_type: String,\n        check_name: String,\n        findings_count: usize,\n        severity_counts: HashMap<String, usize>,\n    },\n\n    /// QA check failed\n    CheckFailed {\n        check_type: String,\n        check_name: String,\n        error: String,\n    },\n\n    /// QA finding reported\n    FindingReported {\n        check_type: String,\n        severity: String,\n        message: String,\n        file_path: Option<String>,\n        line: Option<usize>,\n    },\n}",
      "variants": [
        {
          "name": "PipelineStarted",
          "start_line": 9,
          "doc": [
            "QA pipeline started"
          ],
          "definition": "PipelineStarted {\n        package: String,\n        version: String,\n        qa_level: String,\n    },"
        },
        {
          "name": "PipelineCompleted",
          "start_line": 16,
          "doc": [
            "QA pipeline completed"
          ],
          "definition": "PipelineCompleted {\n        package: String,\n        version: String,\n        total_checks: usize,\n        passed: usize,\n        failed: usize,\n        duration_seconds: u64,\n    },"
        },
        {
          "name": "CheckStarted",
          "start_line": 26,
          "doc": [
            "QA check started"
          ],
          "definition": "CheckStarted {\n        check_type: String,\n        check_name: String,\n    },"
        },
        {
          "name": "CheckCompleted",
          "start_line": 32,
          "doc": [
            "QA check completed"
          ],
          "definition": "CheckCompleted {\n        check_type: String,\n        check_name: String,\n        findings_count: usize,\n        severity_counts: HashMap<String, usize>,\n    },"
        },
        {
          "name": "CheckFailed",
          "start_line": 40,
          "doc": [
            "QA check failed"
          ],
          "definition": "CheckFailed {\n        check_type: String,\n        check_name: String,\n        error: String,\n    },"
        },
        {
          "name": "FindingReported",
          "start_line": 47,
          "doc": [
            "QA finding reported"
          ],
          "definition": "FindingReported {\n        check_type: String,\n        severity: String,\n        message: String,\n        file_path: Option<String>,\n        line: Option<usize>,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "RepoEvent",
      "module": "events::repo",
      "path": "crates/events/src/events/repo.rs",
      "start_line": 6,
      "doc": [],
      "definition": "pub enum RepoEvent {\n    /// Repository synchronization started\n    SyncStarted { url: Option<String> },\n\n    /// Repository synchronization completed\n    SyncCompleted {\n        packages_updated: usize,\n        duration_ms: u64,\n        bytes_transferred: u64,\n    },\n\n    /// Repository synchronization failed\n    SyncFailed {\n        url: Option<String>,\n        retryable: bool,\n    },\n}",
      "variants": [
        {
          "name": "SyncStarted",
          "start_line": 8,
          "doc": [
            "Repository synchronization started"
          ],
          "definition": "SyncStarted { url: Option<String> },"
        },
        {
          "name": "SyncCompleted",
          "start_line": 11,
          "doc": [
            "Repository synchronization completed"
          ],
          "definition": "SyncCompleted {\n        packages_updated: usize,\n        duration_ms: u64,\n        bytes_transferred: u64,\n    },"
        },
        {
          "name": "SyncFailed",
          "start_line": 18,
          "doc": [
            "Repository synchronization failed"
          ],
          "definition": "SyncFailed {\n        url: Option<String>,\n        retryable: bool,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ResolverEvent",
      "module": "events::resolver",
      "path": "crates/events/src/events/resolver.rs",
      "start_line": 6,
      "doc": [],
      "definition": "pub enum ResolverEvent {\n    /// High-level resolution flow started\n    ResolutionStarted {\n        runtime_deps: usize,\n        build_deps: usize,\n        local_files: usize,\n    },\n\n    /// Resolution completed successfully\n    ResolutionCompleted {\n        total_packages: usize,\n        duration_ms: u64,\n    },\n\n    /// Resolution failed\n    ResolutionFailed { reason: ResolutionFailureReason },\n}",
      "variants": [
        {
          "name": "ResolutionStarted",
          "start_line": 8,
          "doc": [
            "High-level resolution flow started"
          ],
          "definition": "ResolutionStarted {\n        runtime_deps: usize,\n        build_deps: usize,\n        local_files: usize,\n    },"
        },
        {
          "name": "ResolutionCompleted",
          "start_line": 15,
          "doc": [
            "Resolution completed successfully"
          ],
          "definition": "ResolutionCompleted {\n        total_packages: usize,\n        duration_ms: u64,\n    },"
        },
        {
          "name": "ResolutionFailed",
          "start_line": 21,
          "doc": [
            "Resolution failed"
          ],
          "definition": "ResolutionFailed { reason: ResolutionFailureReason },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "StateEvent",
      "module": "events::state",
      "path": "crates/events/src/events/state.rs",
      "start_line": 8,
      "doc": [],
      "definition": "pub enum StateEvent {\n    /// A state transition started.\n    TransitionStarted {\n        operation: String,\n        source: Option<StateId>,\n        target: StateId,\n    },\n\n    /// A state transition completed successfully.\n    TransitionCompleted {\n        operation: String,\n        source: Option<StateId>,\n        target: StateId,\n        duration: Option<Duration>,\n    },\n\n    /// A state transition failed.\n    TransitionFailed {\n        operation: String,\n        source: Option<StateId>,\n        target: Option<StateId>,\n        retryable: bool,\n    },\n\n    /// A rollback operation started.\n    RollbackStarted { from: StateId, to: StateId },\n\n    /// A rollback operation completed.\n    RollbackCompleted {\n        from: StateId,\n        to: StateId,\n        duration: Option<Duration>,\n    },\n\n    /// Cleanup pass started.\n    CleanupStarted { planned_states: usize },\n\n    /// Cleanup pass completed.\n    CleanupCompleted {\n        removed_states: usize,\n        space_freed: u64,\n    },\n}",
      "variants": [
        {
          "name": "TransitionStarted",
          "start_line": 10,
          "doc": [
            "A state transition started."
          ],
          "definition": "TransitionStarted {\n        operation: String,\n        source: Option<StateId>,\n        target: StateId,\n    },"
        },
        {
          "name": "TransitionCompleted",
          "start_line": 17,
          "doc": [
            "A state transition completed successfully."
          ],
          "definition": "TransitionCompleted {\n        operation: String,\n        source: Option<StateId>,\n        target: StateId,\n        duration: Option<Duration>,\n    },"
        },
        {
          "name": "TransitionFailed",
          "start_line": 25,
          "doc": [
            "A state transition failed."
          ],
          "definition": "TransitionFailed {\n        operation: String,\n        source: Option<StateId>,\n        target: Option<StateId>,\n        retryable: bool,\n    },"
        },
        {
          "name": "RollbackStarted",
          "start_line": 33,
          "doc": [
            "A rollback operation started."
          ],
          "definition": "RollbackStarted { from: StateId, to: StateId },"
        },
        {
          "name": "RollbackCompleted",
          "start_line": 36,
          "doc": [
            "A rollback operation completed."
          ],
          "definition": "RollbackCompleted {\n        from: StateId,\n        to: StateId,\n        duration: Option<Duration>,\n    },"
        },
        {
          "name": "CleanupStarted",
          "start_line": 43,
          "doc": [
            "Cleanup pass started."
          ],
          "definition": "CleanupStarted { planned_states: usize },"
        },
        {
          "name": "CleanupCompleted",
          "start_line": 46,
          "doc": [
            "Cleanup pass completed."
          ],
          "definition": "CleanupCompleted {\n        removed_states: usize,\n        space_freed: u64,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UninstallEvent",
      "module": "events::uninstall",
      "path": "crates/events/src/events/uninstall.rs",
      "start_line": 7,
      "doc": [],
      "definition": "pub enum UninstallEvent {\n    /// Uninstallation started\n    Started { package: String, version: Version },\n\n    /// Uninstallation completed successfully\n    Completed {\n        package: String,\n        version: Version,\n        files_removed: usize,\n    },\n\n    /// Uninstallation failed\n    Failed {\n        package: Option<String>,\n        version: Option<Version>,\n        failure: super::FailureContext,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 9,
          "doc": [
            "Uninstallation started"
          ],
          "definition": "Started { package: String, version: Version },"
        },
        {
          "name": "Completed",
          "start_line": 12,
          "doc": [
            "Uninstallation completed successfully"
          ],
          "definition": "Completed {\n        package: String,\n        version: Version,\n        files_removed: usize,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 19,
          "doc": [
            "Uninstallation failed"
          ],
          "definition": "Failed {\n        package: Option<String>,\n        version: Option<Version>,\n        failure: super::FailureContext,\n    },"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "UpdateEvent",
      "module": "events::update",
      "path": "crates/events/src/events/update.rs",
      "start_line": 8,
      "doc": [],
      "definition": "pub enum UpdateEvent {\n    /// Update operation started\n    Started {\n        operation_type: UpdateOperationType,\n        packages_specified: Vec<String>,\n        check_all_packages: bool,\n        ignore_constraints: bool,\n    },\n\n    /// Update planning phase started\n    PlanningStarted {\n        packages_to_check: Vec<String>,\n        include_dependencies: bool,\n    },\n\n    /// Update operation completed\n    Completed {\n        operation_type: UpdateOperationType,\n        packages_updated: Vec<UpdateResult>,\n        packages_unchanged: Vec<String>,\n        total_duration: Duration,\n        space_difference: i64,\n    },\n\n    /// Update operation failed\n    Failed {\n        operation_type: UpdateOperationType,\n        failure: super::FailureContext,\n        packages_updated: Vec<UpdateResult>,\n        packages_failed: Vec<(String, String)>, // (package, error)\n    },\n\n    /// Batch update started\n    BatchStarted {\n        packages: Vec<String>,\n        operation_id: String,\n        concurrent_limit: usize,\n    },\n\n    /// Batch update completed\n    BatchCompleted {\n        operation_id: String,\n        successful_updates: Vec<UpdateResult>,\n        failed_updates: Vec<(String, String)>,\n        skipped_packages: Vec<String>,\n        total_duration: Duration,\n        total_size_change: i64,\n    },\n}",
      "variants": [
        {
          "name": "Started",
          "start_line": 10,
          "doc": [
            "Update operation started"
          ],
          "definition": "Started {\n        operation_type: UpdateOperationType,\n        packages_specified: Vec<String>,\n        check_all_packages: bool,\n        ignore_constraints: bool,\n    },"
        },
        {
          "name": "PlanningStarted",
          "start_line": 18,
          "doc": [
            "Update planning phase started"
          ],
          "definition": "PlanningStarted {\n        packages_to_check: Vec<String>,\n        include_dependencies: bool,\n    },"
        },
        {
          "name": "Completed",
          "start_line": 24,
          "doc": [
            "Update operation completed"
          ],
          "definition": "Completed {\n        operation_type: UpdateOperationType,\n        packages_updated: Vec<UpdateResult>,\n        packages_unchanged: Vec<String>,\n        total_duration: Duration,\n        space_difference: i64,\n    },"
        },
        {
          "name": "Failed",
          "start_line": 33,
          "doc": [
            "Update operation failed"
          ],
          "definition": "Failed {\n        operation_type: UpdateOperationType,\n        failure: super::FailureContext,\n        packages_updated: Vec<UpdateResult>,\n        packages_failed: Vec<(String, String)>, // (package, error)\n    },"
        },
        {
          "name": "BatchStarted",
          "start_line": 41,
          "doc": [
            "Batch update started"
          ],
          "definition": "BatchStarted {\n        packages: Vec<String>,\n        operation_id: String,\n        concurrent_limit: usize,\n    },"
        },
        {
          "name": "BatchCompleted",
          "start_line": 48,
          "doc": [
            "Batch update completed"
          ],
          "definition": "BatchCompleted {\n        operation_id: String,\n        successful_updates: Vec<UpdateResult>,\n        failed_updates: Vec<(String, String)>,\n        skipped_packages: Vec<String>,\n        total_duration: Duration,\n        total_size_change: i64,\n    },"
        }
      ]
    }
  ]
}
