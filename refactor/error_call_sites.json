[
  {
    "error_type": "AuditError",
    "variant": "CriticalVulnerabilitiesFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/audit/src/scanner.rs",
        "line": 278,
        "line_text": "return Err(AuditError::CriticalVulnerabilitiesFound {",
        "qualifier": "AuditError"
      }
    ]
  },
  {
    "error_type": "AuditError",
    "variant": "CveFetchError",
    "count": 11,
    "occurrences": [
      {
        "path": "crates/audit/src/vulndb/sources/github.rs",
        "line": 26,
        "line_text": ".map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/github.rs",
        "line": 32,
        "line_text": "return Err(AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/github.rs",
        "line": 42,
        "line_text": ".map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/nvd.rs",
        "line": 26,
        "line_text": ".map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/nvd.rs",
        "line": 32,
        "line_text": "return Err(AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/nvd.rs",
        "line": 42,
        "line_text": ".map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/osv.rs",
        "line": 20,
        "line_text": ".map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/osv.rs",
        "line": 26,
        "line_text": "return Err(AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/osv.rs",
        "line": 36,
        "line_text": ".map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/osv.rs",
        "line": 46,
        "line_text": "let mut archive = zip::ZipArchive::new(zip_file).map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/sources/osv.rs",
        "line": 52,
        "line_text": "let mut file = archive.by_index(i).map_err(|e| AuditError::CveFetchError {",
        "qualifier": "AuditError"
      }
    ]
  },
  {
    "error_type": "AuditError",
    "variant": "DatabaseError",
    "count": 11,
    "occurrences": [
      {
        "path": "crates/audit/src/vulndb/manager.rs",
        "line": 62,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/manager.rs",
        "line": 88,
        "line_text": ".ok_or_else(|| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/manager.rs",
        "line": 141,
        "line_text": ".ok_or_else(|| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 20,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 41,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 63,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 81,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 122,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 134,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/schema.rs",
        "line": 142,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/vulndb/statistics.rs",
        "line": 36,
        "line_text": ".map_err(|e| AuditError::DatabaseError {",
        "qualifier": "AuditError"
      }
    ]
  },
  {
    "error_type": "AuditError",
    "variant": "InvalidData",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/audit/src/lib.rs",
        "line": 107,
        "line_text": "sps2_errors::AuditError::InvalidData {",
        "qualifier": "sps2_errors::AuditError"
      }
    ]
  },
  {
    "error_type": "AuditError",
    "variant": "SbomParseError",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/audit/src/sbom_parser.rs",
        "line": 26,
        "line_text": "serde_json::from_slice(sbom_data).map_err(|e| AuditError::SbomParseError {",
        "qualifier": "AuditError"
      },
      {
        "path": "crates/audit/src/sbom_parser.rs",
        "line": 36,
        "line_text": "Err(AuditError::SbomParseError {",
        "qualifier": "AuditError"
      }
    ]
  },
  {
    "error_type": "AuditError",
    "variant": "ScanError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/audit/src/scanner.rs",
        "line": 219,
        "line_text": ".map_err(|_| AuditError::ScanError {",
        "qualifier": "AuditError"
      }
    ]
  },
  {
    "error_type": "AuditError",
    "variant": "ScanTimeout",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/audit/src/scanner.rs",
        "line": 228,
        "line_text": "Err(_) => Err(AuditError::ScanTimeout {",
        "qualifier": "AuditError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "BuildTimeout",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/builder/src/utils/timeout.rs",
        "line": 19,
        "line_text": "BuildError::BuildTimeout {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "CommandParseError",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 23,
        "line_text": "return Err(BuildError::CommandParseError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 33,
        "line_text": "return Err(BuildError::CommandParseError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 167,
        "line_text": "return Err(BuildError::CommandParseError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 214,
        "line_text": "return Err(BuildError::CommandParseError {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "CompilationFailed",
    "count": 16,
    "occurrences": [
      {
        "path": "crates/builder/src/build_systems/autotools.rs",
        "line": 276,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cargo.rs",
        "line": 292,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cmake.rs",
        "line": 238,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/go.rs",
        "line": 279,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/meson.rs",
        "line": 205,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/nodejs.rs",
        "line": 477,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/nodejs.rs",
        "line": 508,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 197,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 278,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 298,
        "line_text": "Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 439,
        "line_text": "Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 495,
        "line_text": "return Err(BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 511,
        "line_text": "let file = std::fs::File::open(wheel_path).map_err(|e| BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 515,
        "line_text": "let mut archive = ZipArchive::new(file).map_err(|e| BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 523,
        "line_text": ".map_err(|e| BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 530,
        "line_text": ".map_err(|e| BuildError::CompilationFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "CompileFailed",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/builder/src/environment/execution.rs",
        "line": 98,
        "line_text": ".map_err(|e| BuildError::CompileFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/execution.rs",
        "line": 120,
        "line_text": "return Err(BuildError::CompileFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/execution.rs",
        "line": 192,
        "line_text": ".map_err(|e| BuildError::CompileFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "ConfigureFailed",
    "count": 15,
    "occurrences": [
      {
        "path": "crates/builder/src/build_systems/autotools.rs",
        "line": 75,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/autotools.rs",
        "line": 234,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cargo.rs",
        "line": 254,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cargo.rs",
        "line": 263,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cmake.rs",
        "line": 197,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/go.rs",
        "line": 50,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/go.rs",
        "line": 224,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/meson.rs",
        "line": 161,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/nodejs.rs",
        "line": 403,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/nodejs.rs",
        "line": 426,
        "line_text": ".ok_or_else(|| BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/nodejs.rs",
        "line": 430,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 71,
        "line_text": "Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 129,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 247,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 665,
        "line_text": "return Err(BuildError::ConfigureFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DangerousCommand",
    "count": 21,
    "occurrences": [
      {
        "path": "crates/builder/src/security/parser.rs",
        "line": 96,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/security/parser.rs",
        "line": 110,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/security/parser.rs",
        "line": 128,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 74,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 94,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 102,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 117,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 156,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 194,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 221,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 231,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 274,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 205,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 222,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 232,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 262,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 311,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 349,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 370,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 386,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/parser.rs",
        "line": 415,
        "line_text": "return Err(BuildError::DangerousCommand {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DangerousExecution",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/builder/src/security/context.rs",
        "line": 140,
        "line_text": "Err(BuildError::DangerousExecution {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DangerousWrite",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/builder/src/security/context.rs",
        "line": 126,
        "line_text": "Err(BuildError::DangerousWrite {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DisallowedCommand",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/builder/src/stages/executors.rs",
        "line": 177,
        "line_text": "return Err(sps2_errors::BuildError::DisallowedCommand {",
        "qualifier": "sps2_errors::BuildError"
      },
      {
        "path": "crates/builder/src/stages/executors.rs",
        "line": 251,
        "line_text": "return Err(sps2_errors::BuildError::DisallowedCommand {",
        "qualifier": "sps2_errors::BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DraftMetadataFailed",
    "count": 30,
    "occurrences": [
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 64,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 71,
        "line_text": "BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 77,
        "line_text": "toml::from_str(&contents).map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 108,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 115,
        "line_text": "BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 121,
        "line_text": "serde_json::from_str(&contents).map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 188,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 197,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 202,
        "line_text": "toml::from_str(&contents).map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 244,
        "line_text": "Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 254,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 263,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 278,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 303,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 312,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 318,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 325,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 332,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 353,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 362,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 369,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 376,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 383,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 410,
        "line_text": "return Err(BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 419,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 427,
        "line_text": ".map_err(|e| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 434,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 441,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 463,
        "line_text": ".ok_or_else(|| BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/metadata.rs",
        "line": 469,
        "line_text": "BuildError::DraftMetadataFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DraftSourceFailed",
    "count": 30,
    "occurrences": [
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 15,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 36,
        "line_text": "Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 50,
        "line_text": "Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 62,
        "line_text": "Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 68,
        "line_text": "_ => Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 104,
        "line_text": "let temp_file = tempfile::NamedTempFile::new().map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 117,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 124,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 137,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 144,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 154,
        "line_text": "let tar = File::open(&temp_path_for_task).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 161,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 168,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 180,
        "line_text": "let tar = File::open(&archive_path).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 187,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 194,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 204,
        "line_text": "let file = File::open(&archive_path).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 209,
        "line_text": "zip::ZipArchive::new(file).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 216,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 226,
        "line_text": "std::fs::create_dir_all(&outpath).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 232,
        "line_text": "std::fs::create_dir_all(p).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 238,
        "line_text": "File::create(&outpath).map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 242,
        "line_text": "BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/archive.rs",
        "line": 261,
        "line_text": ".map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 58,
        "line_text": "return Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 65,
        "line_text": "return Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 84,
        "line_text": "let temp_dir = TempDir::new().map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 138,
        "line_text": "let temp_dir = TempDir::new().map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 179,
        "line_text": "return Err(BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 190,
        "line_text": "let temp_dir = TempDir::new().map_err(|e| BuildError::DraftSourceFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "DraftTemplateFailed",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/drafter/src/yaml.rs",
        "line": 30,
        "line_text": "BuildError::DraftTemplateFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "ExtractionFailed",
    "count": 21,
    "occurrences": [
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 907,
        "line_text": "let file = File::open(&path_buf).map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 911,
        "line_text": "let mut archive = ZipArchive::new(file).map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 921,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 943,
        "line_text": "BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 951,
        "line_text": "BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 958,
        "line_text": "File::create(&outpath).map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 962,
        "line_text": "BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 982,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 998,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1009,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1016,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1027,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1035,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1043,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1052,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1089,
        "line_text": "File::open(&temp_path_for_task).map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1111,
        "line_text": "std::fs::create_dir_all(parent).map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1118,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1126,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1543,
        "line_text": ".map_err(|e| BuildError::ExtractionFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 79,
        "line_text": "BuildError::ExtractionFailed { message }",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "Failed",
    "count": 37,
    "occurrences": [
      {
        "path": "crates/builder/src/artifact_qa/mod.rs",
        "line": 204,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1164,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/directories.rs",
        "line": 23,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/directories.rs",
        "line": 33,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 198,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 205,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 214,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 230,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 239,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 247,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 261,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 268,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 277,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 422,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 429,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 438,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 455,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 462,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 471,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 484,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 493,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 501,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 40,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 50,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 63,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 73,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/archive.rs",
        "line": 56,
        "line_text": ".map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/mod.rs",
        "line": 128,
        "line_text": "let manifest_string = toml::to_string(&manifest).map_err(|e| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/mod.rs",
        "line": 165,
        "line_text": "let package_dir = staging_dir.parent().ok_or_else(|| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/mod.rs",
        "line": 237,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/mod.rs",
        "line": 351,
        "line_text": ".ok_or_else(|| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/mod.rs",
        "line": 357,
        "line_text": ".ok_or_else(|| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/mod.rs",
        "line": 382,
        "line_text": "let wheel_filename = wheel_src.file_name().ok_or_else(|| BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/utils/format.rs",
        "line": 38,
        "line_text": "return Err(BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 72,
        "line_text": "BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 81,
        "line_text": "PlatformError::FilesystemOperationFailed { message, .. } => BuildError::Failed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 84,
        "line_text": "_ => BuildError::Failed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "FetchFailed",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 118,
        "line_text": ".map_err(|_e| BuildError::FetchFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 151,
        "line_text": ".map_err(|_e| BuildError::FetchFailed { url: url.clone() })?;",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "GitCloneFailed",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 302,
        "line_text": "return Err(BuildError::GitCloneFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 116,
        "line_text": "return Err(BuildError::GitCloneFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "HashMismatch",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 156,
        "line_text": "return Err(BuildError::HashMismatch {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 194,
        "line_text": "return Err(BuildError::HashMismatch {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 230,
        "line_text": "return Err(BuildError::HashMismatch {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "InstallFailed",
    "count": 13,
    "occurrences": [
      {
        "path": "crates/builder/src/artifact_qa/patchers/python_isolation.rs",
        "line": 22,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/artifact_qa/patchers/python_isolation.rs",
        "line": 40,
        "line_text": "Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/autotools.rs",
        "line": 357,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cargo.rs",
        "line": 365,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cargo.rs",
        "line": 392,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/cmake.rs",
        "line": 357,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/go.rs",
        "line": 346,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/meson.rs",
        "line": 279,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 823,
        "line_text": "BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 832,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 859,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 931,
        "line_text": "return Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/build_systems/python.rs",
        "line": 949,
        "line_text": "Err(BuildError::InstallFailed {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "InvalidPath",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/builder/src/security/path_resolver.rs",
        "line": 86,
        "line_text": ".ok_or_else(|| BuildError::InvalidPath {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/command.rs",
        "line": 126,
        "line_text": "return Err(BuildError::InvalidPath {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 181,
        "line_text": "return Err(BuildError::InvalidPath {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 190,
        "line_text": "return Err(BuildError::InvalidPath {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "InvalidUrl",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 106,
        "line_text": ".ok_or_else(|| BuildError::InvalidUrl {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 262,
        "line_text": ".ok_or_else(|| BuildError::InvalidUrl {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 93,
        "line_text": ".ok_or_else(|| BuildError::InvalidUrl {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/source.rs",
        "line": 146,
        "line_text": ".ok_or_else(|| BuildError::InvalidUrl {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "InvalidUrlValidation",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 135,
        "line_text": "return Err(BuildError::InvalidUrlValidation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 144,
        "line_text": "return Err(BuildError::InvalidUrlValidation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 153,
        "line_text": "return Err(BuildError::InvalidUrlValidation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/validation/mod.rs",
        "line": 167,
        "line_text": "return Err(BuildError::InvalidUrlValidation {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "MissingBuildDep",
    "count": 7,
    "occurrences": [
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 23,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 98,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 105,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 112,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 161,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 173,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/dependencies.rs",
        "line": 223,
        "line_text": "return Err(BuildError::MissingBuildDep {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "NoBuildSystemDetected",
    "count": 11,
    "occurrences": [
      {
        "path": "crates/builder/src/build_systems/mod.rs",
        "line": 102,
        "line_text": "Err(sps2_errors::BuildError::NoBuildSystemDetected {",
        "qualifier": "sps2_errors::BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 63,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 71,
        "line_text": "BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 92,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 100,
        "line_text": "BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 146,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 165,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 173,
        "line_text": "BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 243,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 291,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/drafter/src/detector.rs",
        "line": 310,
        "line_text": "return Err(BuildError::NoBuildSystemDetected {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "PathEscapeAttempt",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/builder/src/security/context.rs",
        "line": 114,
        "line_text": "Err(BuildError::PathEscapeAttempt {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/security/path_resolver.rs",
        "line": 98,
        "line_text": "return Err(BuildError::PathEscapeAttempt {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "PathTraversalAttempt",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/builder/src/security/path_resolver.rs",
        "line": 44,
        "line_text": "return Err(BuildError::PathTraversalAttempt {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/security/path_resolver.rs",
        "line": 149,
        "line_text": "return Err(BuildError::PathTraversalAttempt {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "RecipeError",
    "count": 6,
    "occurrences": [
      {
        "path": "crates/builder/src/core/api.rs",
        "line": 1156,
        "line_text": ".ok_or_else(|| BuildError::RecipeError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/recipe/parser.rs",
        "line": 20,
        "line_text": ".map_err(|e| BuildError::RecipeError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/recipe/parser.rs",
        "line": 37,
        "line_text": "serde_yaml2::from_str(content).map_err(|e| BuildError::RecipeError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/recipe/parser.rs",
        "line": 54,
        "line_text": "return Err(BuildError::RecipeError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/recipe/parser.rs",
        "line": 61,
        "line_text": "return Err(BuildError::RecipeError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/recipe/parser.rs",
        "line": 75,
        "line_text": "return Err(BuildError::RecipeError {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "SandboxViolation",
    "count": 16,
    "occurrences": [
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 352,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 363,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 369,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 379,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 385,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 397,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/hermetic.rs",
        "line": 403,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 101,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 120,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 128,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 139,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 147,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 164,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 181,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 195,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/environment/isolation.rs",
        "line": 222,
        "line_text": "return Err(BuildError::SandboxViolation {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "SbomError",
    "count": 8,
    "occurrences": [
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 116,
        "line_text": "return Err(BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 190,
        "line_text": ".map_err(|e| BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 195,
        "line_text": "return Err(BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 243,
        "line_text": ".map_err(|e| BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 248,
        "line_text": "return Err(BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 269,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 290,
        "line_text": "return Err(BuildError::SbomError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/sbom.rs",
        "line": 312,
        "line_text": "return Err(BuildError::SbomError {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "SigningError",
    "count": 23,
    "occurrences": [
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 37,
        "line_text": "BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 43,
        "line_text": "return Err(BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 50,
        "line_text": "return Err(BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 59,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 64,
        "line_text": "let sk_box_str = String::from_utf8(key_data).map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 69,
        "line_text": "SecretKeyBox::from_string(&sk_box_str).map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 80,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 87,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 112,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 120,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 148,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 155,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 161,
        "line_text": "SignatureBox::from_string(&sig_data).map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 187,
        "line_text": "KeyPair::generate_unencrypted_keypair().map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 203,
        "line_text": "KeyPair::generate_unencrypted_keypair().map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 207,
        "line_text": "let sk_box = sk.to_box(password).map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 226,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 232,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 247,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 260,
        "line_text": "let pk_box = public_key.to_box().map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/builder/src/packaging/signing.rs",
        "line": 266,
        "line_text": ".map_err(|e| BuildError::SigningError {",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 65,
        "line_text": "PlatformError::SigningFailed { message, .. } => BuildError::SigningError { message },",
        "qualifier": "BuildError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 68,
        "line_text": "} if operation.contains(\"sign\") => BuildError::SigningError { message },",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "SymlinkLoop",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/builder/src/security/path_resolver.rs",
        "line": 71,
        "line_text": "return Err(BuildError::SymlinkLoop {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "TooManySymlinks",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/builder/src/security/path_resolver.rs",
        "line": 120,
        "line_text": "return Err(BuildError::TooManySymlinks {",
        "qualifier": "BuildError"
      }
    ]
  },
  {
    "error_type": "BuildError",
    "variant": "ValidationFailed",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/builder/src/artifact_qa/scanners/staging.rs",
        "line": 54,
        "line_text": "std::fs::read_dir(dir).map_err(|e| sps2_errors::BuildError::ValidationFailed {",
        "qualifier": "sps2_errors::BuildError"
      }
    ]
  },
  {
    "error_type": "CliError",
    "variant": "Config",
    "count": 3,
    "occurrences": [
      {
        "path": "apps/sps2/src/error.rs",
        "line": 24,
        "line_text": "CliError::Config(e) => write!(f, \"Configuration error: {e}\"),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/error.rs",
        "line": 37,
        "line_text": "CliError::Config(e) => Some(e),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/error.rs",
        "line": 47,
        "line_text": "CliError::Config(e)",
        "qualifier": "CliError"
      }
    ]
  },
  {
    "error_type": "CliError",
    "variant": "InvalidArguments",
    "count": 4,
    "occurrences": [
      {
        "path": "apps/sps2/src/error.rs",
        "line": 28,
        "line_text": "CliError::InvalidArguments(msg) => write!(f, \"Invalid arguments: {msg}\"),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/main.rs",
        "line": 281,
        "line_text": "return Err(CliError::InvalidArguments(",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/main.rs",
        "line": 301,
        "line_text": "return Err(CliError::InvalidArguments(",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/main.rs",
        "line": 332,
        "line_text": "return Err(CliError::InvalidArguments(format!(",
        "qualifier": "CliError"
      }
    ]
  },
  {
    "error_type": "CliError",
    "variant": "Io",
    "count": 3,
    "occurrences": [
      {
        "path": "apps/sps2/src/error.rs",
        "line": 29,
        "line_text": "CliError::Io(e) => write!(f, \"I/O error: {e}\"),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/error.rs",
        "line": 39,
        "line_text": "CliError::Io(e) => Some(e),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/error.rs",
        "line": 59,
        "line_text": "CliError::Io(e)",
        "qualifier": "CliError"
      }
    ]
  },
  {
    "error_type": "CliError",
    "variant": "Ops",
    "count": 3,
    "occurrences": [
      {
        "path": "apps/sps2/src/error.rs",
        "line": 25,
        "line_text": "CliError::Ops(e) => write!(f, \"{e}\"),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/error.rs",
        "line": 38,
        "line_text": "CliError::Ops(e) => Some(e),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/error.rs",
        "line": 53,
        "line_text": "CliError::Ops(e)",
        "qualifier": "CliError"
      }
    ]
  },
  {
    "error_type": "CliError",
    "variant": "Setup",
    "count": 19,
    "occurrences": [
      {
        "path": "apps/sps2/src/error.rs",
        "line": 26,
        "line_text": "CliError::Setup(msg) => write!(f, \"System setup error: {msg}\"),",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 114,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to create {dir}: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 140,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to create keys dir: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 150,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to initialize bootstrap key: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 168,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Cannot access {path}: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 172,
        "line_text": "return Err(CliError::Setup(format!(\"No write permission for {path}\")));",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 195,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to initialize state: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 218,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to create empty index: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 222,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to load empty index: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 246,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to create network client: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 281,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to initialize platform cache: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 300,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Startup GC failed: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 306,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Startup GC failed: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 356,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to read states directory: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 364,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to read directory entry: {e}\")))?",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 410,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to read GC timestamp: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 415,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Invalid GC timestamp format: {e}\")))",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 428,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to write GC timestamp: {e}\")))?;",
        "qualifier": "CliError"
      },
      {
        "path": "apps/sps2/src/setup.rs",
        "line": 449,
        "line_text": ".map_err(|e| CliError::Setup(format!(\"Failed to write GC timestamp: {e}\")))?;",
        "qualifier": "CliError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "Invalid",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/ops/src/keys.rs",
        "line": 89,
        "line_text": "Error::Config(sps2_errors::ConfigError::Invalid {",
        "qualifier": "sps2_errors::ConfigError"
      },
      {
        "path": "crates/ops/src/keys.rs",
        "line": 94,
        "line_text": "return Err(Error::Config(sps2_errors::ConfigError::Invalid {",
        "qualifier": "sps2_errors::ConfigError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 132,
        "line_text": "return Err(Error::Config(ConfigError::Invalid {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 226,
        "line_text": "return Err(Error::Config(ConfigError::Invalid {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "InvalidValue",
    "count": 16,
    "occurrences": [
      {
        "path": "crates/config/src/builder.rs",
        "line": 508,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/builder.rs",
        "line": 520,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/builder.rs",
        "line": 531,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/builder.rs",
        "line": 541,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 228,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 244,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 256,
        "line_text": "jobs.parse().map_err(|_| ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 267,
        "line_text": "downloads.parse().map_err(|_| ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 465,
        "line_text": "_ => Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 476,
        "line_text": "_ => Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 489,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 497,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 512,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 520,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 533,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 549,
        "line_text": "return Err(ConfigError::InvalidValue {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "MissingField",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/ops/src/repository.rs",
        "line": 27,
        "line_text": "return Err(Error::Config(ConfigError::MissingField {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "NotFound",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/config/src/builder.rs",
        "line": 344,
        "line_text": "let home_dir = dirs::home_dir().ok_or_else(|| ConfigError::NotFound {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/builder.rs",
        "line": 362,
        "line_text": ".map_err(|_| ConfigError::NotFound {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 80,
        "line_text": "let home_dir = dirs::home_dir().ok_or_else(|| ConfigError::NotFound {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 95,
        "line_text": ".map_err(|_| ConfigError::NotFound {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 127,
        "line_text": ".map_err(|_| ConfigError::NotFound {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "ParseError",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/config/src/builder.rs",
        "line": 367,
        "line_text": "ConfigError::ParseError {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 99,
        "line_text": "let mut config: Self = toml::from_str(&contents).map_err(|e| ConfigError::ParseError {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 131,
        "line_text": "let mut config: Self = toml::from_str(&contents).map_err(|e| ConfigError::ParseError {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "SerializeError",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/config/src/builder.rs",
        "line": 442,
        "line_text": "toml::to_string_pretty(self).map_err(|e| ConfigError::SerializeError {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 370,
        "line_text": "toml::to_string_pretty(self).map_err(|e| ConfigError::SerializeError {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "ConfigError",
    "variant": "WriteError",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/config/src/builder.rs",
        "line": 434,
        "line_text": ".map_err(|e| ConfigError::WriteError {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/builder.rs",
        "line": 457,
        "line_text": ".map_err(|e| ConfigError::WriteError {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 362,
        "line_text": ".map_err(|e| ConfigError::WriteError {",
        "qualifier": "ConfigError"
      },
      {
        "path": "crates/config/src/lib.rs",
        "line": 387,
        "line_text": ".map_err(|e| ConfigError::WriteError {",
        "qualifier": "ConfigError"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "Guard",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/guard/src/store_verification.rs",
        "line": 204,
        "line_text": "sps2_errors::Error::Guard(GuardError::VerificationFailed {",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/guard/src/store_verification.rs",
        "line": 274,
        "line_text": "sps2_errors::Error::Guard(GuardError::VerificationFailed {",
        "qualifier": "sps2_errors::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "Signing",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 550,
        "line_text": "return Err(sps2_errors::Error::Signing(",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/install/src/parallel.rs",
        "line": 557,
        "line_text": "return Err(sps2_errors::Error::Signing(",
        "qualifier": "sps2_errors::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "custom",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 151,
        "line_text": "return Err(de::Error::custom(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 157,
        "line_text": "Err(de::Error::custom(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/hash/src/lib.rs",
        "line": 425,
        "line_text": "Self::from_hex(&s).map_err(serde::de::Error::custom)",
        "qualifier": "serde::de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 96,
        "line_text": "return Err(de::Error::custom(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 102,
        "line_text": "Err(de::Error::custom(",
        "qualifier": "de::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "from",
    "count": 6,
    "occurrences": [
      {
        "path": "crates/ops/src/context.rs",
        "line": 851,
        "line_text": "let network_error = sps2_errors::Error::from(sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 857,
        "line_text": "sps2_errors::Error::from(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 865,
        "line_text": "let permission_error = sps2_errors::Error::from(sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 876,
        "line_text": "sps2_errors::Error::from(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 884,
        "line_text": "let other_error = sps2_errors::Error::from(sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 929,
        "line_text": "Err(sps2_errors::Error::from(",
        "qualifier": "sps2_errors::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "from_raw_os_error",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 113,
        "line_text": "std::io::Error::from_raw_os_error(errno)",
        "qualifier": "std::io::Error"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 214,
        "line_text": "std::io::Error::from_raw_os_error(errno)",
        "qualifier": "std::io::Error"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 568,
        "line_text": "std::io::Error::from_raw_os_error(errno)",
        "qualifier": "std::io::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "internal",
    "count": 6,
    "occurrences": [
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 799,
        "line_text": "sps2_errors::Error::internal(format!(\"invalid hash {}: {e}\", tgt.hash))",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 111,
        "line_text": "sps2_errors::Error::internal(format!(\"invalid hash {}: {e}\", sr.hash))",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 149,
        "line_text": "sps2_errors::Error::internal(format!(\"invalid file hash {}: {e}\", fo.hash))",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 564,
        "line_text": ".map_err(|e| sps2_errors::Error::internal(format!(\"invalid hash {}: {e}\", pkg.hash)))?;",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 583,
        "line_text": "sps2_errors::Error::internal(format!(",
        "qualifier": "sps2_errors::Error"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 726,
        "line_text": ".map_err(|e| sps2_errors::Error::internal(format!(\"Failed to write GC timestamp: {e}\")))?;",
        "qualifier": "sps2_errors::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "invalid_value",
    "count": 10,
    "occurrences": [
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 117,
        "line_text": "return Err(de::Error::invalid_value(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 123,
        "line_text": "de::Error::invalid_value(Unexpected::Unsigned(value), &\"number between 0 and 3\")",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 133,
        "line_text": "return Err(de::Error::invalid_value(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 139,
        "line_text": "de::Error::invalid_value(Unexpected::Signed(value), &\"number between 0 and 3\")",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 190,
        "line_text": "de::Error::invalid_value(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 63,
        "line_text": "return Err(de::Error::invalid_value(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 69,
        "line_text": "de::Error::invalid_value(Unexpected::Unsigned(value), &\"number between 0 and 3\")",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 79,
        "line_text": "return Err(de::Error::invalid_value(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 85,
        "line_text": "de::Error::invalid_value(Unexpected::Signed(value), &\"number between 0 and 3\")",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 135,
        "line_text": "de::Error::invalid_value(",
        "qualifier": "de::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "last_os_error",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 443,
        "line_text": "let err = std::io::Error::last_os_error();",
        "qualifier": "std::io::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "other",
    "count": 2,
    "occurrences": [
      {
        "path": "apps/sps2/src/display.rs",
        "line": 44,
        "line_text": "let json = result.to_json().map_err(io::Error::other)?;",
        "qualifier": "io::Error"
      },
      {
        "path": "apps/sps2/src/display.rs",
        "line": 72,
        "line_text": "serde_json::to_string_pretty(result).map_err(io::Error::other)?",
        "qualifier": "io::Error"
      }
    ]
  },
  {
    "error_type": "Error",
    "variant": "unknown_variant",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/builder/src/environment/types.rs",
        "line": 178,
        "line_text": "other => Err(de::Error::unknown_variant(",
        "qualifier": "de::Error"
      },
      {
        "path": "crates/types/src/recipe.rs",
        "line": 123,
        "line_text": "other => Err(de::Error::unknown_variant(",
        "qualifier": "de::Error"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "CacheError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 495,
        "line_text": "GuardError::CacheError { .. } => \"cache\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "ConfigurationError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 496,
        "line_text": "GuardError::ConfigurationError { .. } => \"configuration\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "HealingFailed",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 494,
        "line_text": "GuardError::HealingFailed { .. } => \"healing\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "IntegrityError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 501,
        "line_text": "GuardError::IntegrityError { .. } => \"integrity\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "PermissionError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 497,
        "line_text": "GuardError::PermissionError { .. } => \"permission\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "ResourceExhausted",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 500,
        "line_text": "GuardError::ResourceExhausted { .. } => \"resource\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "ScopeError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 498,
        "line_text": "GuardError::ScopeError { .. } => \"scope\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "StateInconsistency",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 502,
        "line_text": "GuardError::StateInconsistency { .. } => \"state\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "TimeoutError",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 499,
        "line_text": "GuardError::TimeoutError { .. } => \"timeout\",",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "GuardError",
    "variant": "VerificationFailed",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/errors/src/guard.rs",
        "line": 493,
        "line_text": "GuardError::VerificationFailed { .. } => \"verification\",",
        "qualifier": "GuardError"
      },
      {
        "path": "crates/guard/src/error_context.rs",
        "line": 230,
        "line_text": "GuardError::VerificationFailed {",
        "qualifier": "GuardError"
      },
      {
        "path": "crates/guard/src/store_verification.rs",
        "line": 204,
        "line_text": "sps2_errors::Error::Guard(GuardError::VerificationFailed {",
        "qualifier": "GuardError"
      },
      {
        "path": "crates/guard/src/store_verification.rs",
        "line": 274,
        "line_text": "sps2_errors::Error::Guard(GuardError::VerificationFailed {",
        "qualifier": "GuardError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "AtomicOperationFailed",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 408,
        "line_text": "InstallError::AtomicOperationFailed {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/parallel.rs",
        "line": 488,
        "line_text": "return Err(InstallError::AtomicOperationFailed {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/directory.rs",
        "line": 84,
        "line_text": "return Err(InstallError::AtomicOperationFailed {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/directory.rs",
        "line": 103,
        "line_text": "InstallError::AtomicOperationFailed {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/guard.rs",
        "line": 33,
        "line_text": "InstallError::AtomicOperationFailed {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "ConcurrencyError",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 269,
        "line_text": "Arc::try_unwrap(prepared_packages).map_err(|_| InstallError::ConcurrencyError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 274,
        "line_text": ".map_err(|_| InstallError::ConcurrencyError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/resources/src/semaphore.rs",
        "line": 28,
        "line_text": "InstallError::ConcurrencyError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/resources/src/semaphore.rs",
        "line": 58,
        "line_text": "Err(tokio::sync::TryAcquireError::Closed) => Err(InstallError::ConcurrencyError {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "DownloadTimeout",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 391,
        "line_text": "return Err(InstallError::DownloadTimeout {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "ExtractionFailed",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 252,
        "line_text": "InstallError::ExtractionFailed {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "FilesystemError",
    "count": 21,
    "occurrences": [
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 74,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 87,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 99,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 110,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 652,
        "line_text": "InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 666,
        "line_text": "InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 684,
        "line_text": "InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/installer.rs",
        "line": 706,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/atomic/transition.rs",
        "line": 88,
        "line_text": ".map_err(|e| sps2_errors::InstallError::FilesystemError {",
        "qualifier": "sps2_errors::InstallError"
      },
      {
        "path": "crates/install/src/staging/directory.rs",
        "line": 94,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/directory.rs",
        "line": 120,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 53,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 88,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 101,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 387,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 397,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 408,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/utils.rs",
        "line": 16,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/utils.rs",
        "line": 26,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 207,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 217,
        "line_text": ".map_err(|e| InstallError::FilesystemError {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "InvalidPackageFile",
    "count": 84,
    "occurrences": [
      {
        "path": "crates/install/src/installer.rs",
        "line": 259,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/operations.rs",
        "line": 196,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 124,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 204,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 235,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 302,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/manager.rs",
        "line": 201,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 57,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 80,
        "line_text": "InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 98,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 129,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 166,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/staging/validation.rs",
        "line": 231,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 17,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 32,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 51,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 69,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 84,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 99,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 241,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 252,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/limits.rs",
        "line": 263,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/mod.rs",
        "line": 62,
        "line_text": "return Err(sps2_errors::InstallError::InvalidPackageFile {",
        "qualifier": "sps2_errors::InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 74,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 100,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 113,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 155,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 176,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 247,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 260,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 272,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/zstd.rs",
        "line": 45,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/zstd.rs",
        "line": 121,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/zstd.rs",
        "line": 135,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/zstd.rs",
        "line": 145,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 29,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 42,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 48,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 64,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 76,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 90,
        "line_text": "Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/detection.rs",
        "line": 104,
        "line_text": "PackageFormat::Unknown => Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/extension.rs",
        "line": 22,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/extension.rs",
        "line": 29,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/extension.rs",
        "line": 50,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/size_limits.rs",
        "line": 26,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/size_limits.rs",
        "line": 34,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/size_limits.rs",
        "line": 42,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/size_limits.rs",
        "line": 58,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/format/size_limits.rs",
        "line": 76,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/pipeline/recovery.rs",
        "line": 109,
        "line_text": "return Err(sps2_errors::InstallError::InvalidPackageFile {",
        "qualifier": "sps2_errors::InstallError"
      },
      {
        "path": "crates/install/src/validation/pipeline/recovery.rs",
        "line": 146,
        "line_text": "return Err(sps2_errors::InstallError::InvalidPackageFile {",
        "qualifier": "sps2_errors::InstallError"
      },
      {
        "path": "crates/install/src/validation/security/mod.rs",
        "line": 130,
        "line_text": "return Err(sps2_errors::InstallError::InvalidPackageFile {",
        "qualifier": "sps2_errors::InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 23,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 32,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 44,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 58,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 65,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 76,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 94,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 105,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 122,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 132,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/paths.rs",
        "line": 283,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 25,
        "line_text": ".map_err(|e| InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 57,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 109,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 117,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 148,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 164,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 358,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 366,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 375,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/permissions.rs",
        "line": 383,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/policies.rs",
        "line": 218,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/policies.rs",
        "line": 259,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/policies.rs",
        "line": 302,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 25,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 36,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 45,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 63,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 98,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 268,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/security/symlinks.rs",
        "line": 281,
        "line_text": "return Err(InstallError::InvalidPackageFile {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "LocalPackageNotFound",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/install/src/installer.rs",
        "line": 252,
        "line_text": "return Err(InstallError::LocalPackageNotFound {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/operations.rs",
        "line": 188,
        "line_text": "return Err(InstallError::LocalPackageNotFound {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "MissingDownloadUrl",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 400,
        "line_text": "return Err(InstallError::MissingDownloadUrl {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "MissingLocalPath",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 494,
        "line_text": "return Err(InstallError::MissingLocalPath {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "NoPackagesSpecified",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/install/src/installer.rs",
        "line": 246,
        "line_text": "return Err(InstallError::NoPackagesSpecified.into());",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/installer.rs",
        "line": 273,
        "line_text": "return Err(InstallError::NoPackagesSpecified.into());",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "NoProgress",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 186,
        "line_text": "return Err(InstallError::NoProgress {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "OperationTimeout",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 174,
        "line_text": "return Err(InstallError::OperationTimeout {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "PackageHasDependents",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/operations.rs",
        "line": 285,
        "line_text": "return Err(InstallError::PackageHasDependents {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "PackageNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 220,
        "line_text": "InstallError::PackageNotFound {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "PackageNotInstalled",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/operations.rs",
        "line": 268,
        "line_text": "return Err(InstallError::PackageNotInstalled {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "StateNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/install/src/installer.rs",
        "line": 227,
        "line_text": "InstallError::StateNotFound {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "TaskError",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 613,
        "line_text": "return Err(InstallError::TaskError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/parallel.rs",
        "line": 638,
        "line_text": "return Err(InstallError::TaskError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 96,
        "line_text": "let result = handle.await.map_err(|e| InstallError::TaskError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/staging.rs",
        "line": 65,
        "line_text": ".map_err(|e| sps2_errors::InstallError::TaskError {",
        "qualifier": "sps2_errors::InstallError"
      }
    ]
  },
  {
    "error_type": "InstallError",
    "variant": "TempFileError",
    "count": 8,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 515,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 195,
        "line_text": "tempfile::NamedTempFile::new().map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 216,
        "line_text": ".map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 247,
        "line_text": ".map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/decompress.rs",
        "line": 255,
        "line_text": ".map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/pipeline/download.rs",
        "line": 98,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/zstd.rs",
        "line": 34,
        "line_text": "let temp_file = tempfile::NamedTempFile::new().map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      },
      {
        "path": "crates/install/src/validation/content/zstd.rs",
        "line": 56,
        "line_text": ".map_err(|e| InstallError::TempFileError {",
        "qualifier": "InstallError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "ChecksumMismatch",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/net/src/download/stream.rs",
        "line": 111,
        "line_text": "return Err(NetworkError::ChecksumMismatch {",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "ConnectionRefused",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/net/src/client.rs",
        "line": 71,
        "line_text": ".map_err(|e| NetworkError::ConnectionRefused(e.to_string()))?;",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/client.rs",
        "line": 90,
        "line_text": ".map_err(|e| NetworkError::ConnectionRefused(e.to_string()))?;",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/client.rs",
        "line": 269,
        "line_text": "Some(e) if e.is_connect() => Err(NetworkError::ConnectionRefused(e.to_string()).into()),",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "DownloadFailed",
    "count": 11,
    "occurrences": [
      {
        "path": "crates/drafter/src/source.rs",
        "line": 156,
        "line_text": "sps2_errors::NetworkError::DownloadFailed(format!(\"Failed to download {url}: {e}\"))",
        "qualifier": "sps2_errors::NetworkError"
      },
      {
        "path": "crates/net/src/client.rs",
        "line": 204,
        "line_text": "chunk.map_err(|e| sps2_errors::NetworkError::DownloadFailed(e.to_string()))?;",
        "qualifier": "sps2_errors::NetworkError"
      },
      {
        "path": "crates/net/src/client.rs",
        "line": 270,
        "line_text": "Some(e) => Err(NetworkError::DownloadFailed(e.to_string()).into()),",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/client.rs",
        "line": 271,
        "line_text": "None => Err(NetworkError::DownloadFailed(\"Unknown error\".to_string()).into()),",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/download/core.rs",
        "line": 181,
        "line_text": "NetworkError::DownloadFailed(format!(",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/download/core.rs",
        "line": 403,
        "line_text": "NetworkError::DownloadFailed(\"Maximum retries exceeded\".to_string()).into()",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/download/stream.rs",
        "line": 59,
        "line_text": "let chunk = chunk_result.map_err(|e| NetworkError::DownloadFailed(e.to_string()))?;",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/download/stream.rs",
        "line": 145,
        "line_text": ".map_err(|e| NetworkError::DownloadFailed(e.to_string()))?;",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 75,
        "line_text": ".map_err(|e| NetworkError::DownloadFailed(e.to_string()).into())",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 132,
        "line_text": ".map_err(|e| NetworkError::DownloadFailed(e.to_string()))?;",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 166,
        "line_text": ".map_err(|e| NetworkError::DownloadFailed(e.to_string()).into())",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "FileSizeExceeded",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/net/src/download/core.rs",
        "line": 465,
        "line_text": "return Err(NetworkError::FileSizeExceeded {",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "HttpError",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/net/src/download/stream.rs",
        "line": 135,
        "line_text": "return Err(NetworkError::HttpError {",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/download/validation.rs",
        "line": 31,
        "line_text": "return Err(NetworkError::HttpError {",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 65,
        "line_text": "return Err(NetworkError::HttpError {",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 115,
        "line_text": "return Err(NetworkError::HttpError {",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 155,
        "line_text": "return Err(NetworkError::HttpError {",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "InvalidUrl",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/net/src/download/validation.rs",
        "line": 8,
        "line_text": "let parsed = Url::parse(url).map_err(|e| NetworkError::InvalidUrl(e.to_string()))?;",
        "qualifier": "NetworkError"
      },
      {
        "path": "crates/net/src/lib.rs",
        "line": 188,
        "line_text": "Url::parse(url).map_err(|e| NetworkError::InvalidUrl(e.to_string()).into())",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "PartialContentNotSupported",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/net/src/download/validation.rs",
        "line": 28,
        "line_text": "return Err(NetworkError::PartialContentNotSupported.into());",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "RateLimited",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/net/src/client.rs",
        "line": 240,
        "line_text": "return Err(NetworkError::RateLimited {",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "Timeout",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/net/src/client.rs",
        "line": 262,
        "line_text": "Some(e) if e.is_timeout() => Err(NetworkError::Timeout {",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "NetworkError",
    "variant": "UnsupportedProtocol",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/net/src/download/validation.rs",
        "line": 12,
        "line_text": "scheme => Err(NetworkError::UnsupportedProtocol {",
        "qualifier": "NetworkError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "InvalidOperation",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/ops/src/draft.rs",
        "line": 35,
        "line_text": "return Err(OpsError::InvalidOperation {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "InvalidRecipe",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/ops/src/build.rs",
        "line": 42,
        "line_text": "return Err(OpsError::InvalidRecipe {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/build.rs",
        "line": 82,
        "line_text": ".map_err(|e| OpsError::InvalidRecipe {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/pack.rs",
        "line": 338,
        "line_text": "return Err(OpsError::InvalidRecipe {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "InvalidStagingDirectory",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/ops/src/pack.rs",
        "line": 363,
        "line_text": "return Err(OpsError::InvalidStagingDirectory {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/pack.rs",
        "line": 372,
        "line_text": "std::fs::read_dir(staging_dir).map_err(|e| OpsError::InvalidStagingDirectory {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/pack.rs",
        "line": 378,
        "line_text": "return Err(OpsError::InvalidStagingDirectory {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "MissingComponent",
    "count": 15,
    "occurrences": [
      {
        "path": "crates/guard/src/core/builder.rs",
        "line": 73,
        "line_text": ".ok_or_else(|| OpsError::MissingComponent {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/core/builder.rs",
        "line": 77,
        "line_text": "let store = self.store.ok_or_else(|| OpsError::MissingComponent {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/core/builder.rs",
        "line": 81,
        "line_text": "let tx = self.tx.ok_or_else(|| OpsError::MissingComponent {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 663,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 669,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 675,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 681,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 687,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 693,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 699,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 705,
        "line_text": ".ok_or_else(|| sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 851,
        "line_text": "let network_error = sps2_errors::Error::from(sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 865,
        "line_text": "let permission_error = sps2_errors::Error::from(sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 884,
        "line_text": "let other_error = sps2_errors::Error::from(sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 930,
        "line_text": "sps2_errors::OpsError::MissingComponent {",
        "qualifier": "sps2_errors::OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "NoPackagesSpecified",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/ops/src/install.rs",
        "line": 32,
        "line_text": "return Err(OpsError::NoPackagesSpecified.into());",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/uninstall.rs",
        "line": 28,
        "line_text": "return Err(OpsError::NoPackagesSpecified.into());",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "NoPreviousState",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 284,
        "line_text": ".ok_or(OpsError::NoPreviousState)?",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 340,
        "line_text": ".ok_or(OpsError::NoPreviousState)?",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "OperationFailed",
    "count": 38,
    "occurrences": [
      {
        "path": "crates/guard/src/core/guard.rs",
        "line": 87,
        "line_text": "Hash::from_hex(&package.hash).map_err(|e| sps2_errors::OpsError::OperationFailed {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/guard/src/core/guard.rs",
        "line": 170,
        "line_text": "sps2_errors::OpsError::OperationFailed {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 54,
        "line_text": ".ok_or_else(|| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 59,
        "line_text": "let package_hash = Hash::from_hex(&package.hash).map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 65,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 108,
        "line_text": ".ok_or_else(|| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 116,
        "line_text": "Hash::from_hex(&file_entry.file_hash).map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 123,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 138,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 157,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 170,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 178,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 193,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 201,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 213,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 291,
        "line_text": ".ok_or_else(|| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 296,
        "line_text": "let package_hash = Hash::from_hex(&package.hash).map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 302,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 316,
        "line_text": "Hash::from_hex(expected_hash).map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 324,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 336,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 347,
        "line_text": "Hash::from_hex(expected_hash).map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 354,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 369,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 381,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 396,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 404,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/files.rs",
        "line": 416,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/orphans.rs",
        "line": 104,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/orphans.rs",
        "line": 109,
        "line_text": "return Err(OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/orphans.rs",
        "line": 119,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/orphans.rs",
        "line": 141,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/guard/src/healing/orphans.rs",
        "line": 149,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/draft.rs",
        "line": 45,
        "line_text": "let draft_result = drafter.run().await.map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/draft.rs",
        "line": 65,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/draft.rs",
        "line": 75,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/draft.rs",
        "line": 83,
        "line_text": ".map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/security.rs",
        "line": 102,
        "line_text": "sps2_hash::Hash::from_hex(&package.hash).map_err(|e| OpsError::OperationFailed {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "PackageNotFound",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/ops/src/query.rs",
        "line": 128,
        "line_text": ".ok_or_else(|| OpsError::PackageNotFound {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/query.rs",
        "line": 133,
        "line_text": "versions.first().ok_or_else(|| OpsError::PackageNotFound {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/security.rs",
        "line": 95,
        "line_text": ".ok_or_else(|| OpsError::PackageNotFound {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "RecipeNotFound",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/ops/src/build.rs",
        "line": 32,
        "line_text": "return Err(OpsError::RecipeNotFound {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/pack.rs",
        "line": 328,
        "line_text": "return Err(OpsError::RecipeNotFound {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "RepoSyncFailed",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/ops/src/repository.rs",
        "line": 91,
        "line_text": "return Err(OpsError::RepoSyncFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 105,
        "line_text": "return Err(OpsError::RepoSyncFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 258,
        "line_text": "Err(OpsError::RepoSyncFailed {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "SelfUpdateFailed",
    "count": 17,
    "occurrences": [
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 59,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 69,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 81,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 117,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 122,
        "line_text": "serde_json::from_str(&response_text).map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 128,
        "line_text": ".ok_or_else(|| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 142,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 148,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 154,
        "line_text": "OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 164,
        "line_text": "OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 171,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 181,
        "line_text": "let current_exe = std::env::current_exe().map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 191,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 198,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 207,
        "line_text": ".map_err(|e| OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 217,
        "line_text": "OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/self_update.rs",
        "line": 223,
        "line_text": "OpsError::SelfUpdateFailed {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "SerializationError",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/net/src/lib.rs",
        "line": 204,
        "line_text": "sps2_errors::OpsError::SerializationError {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/lib.rs",
        "line": 200,
        "line_text": "sps2_errors::OpsError::SerializationError {",
        "qualifier": "sps2_errors::OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "StagingDirectoryNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/ops/src/pack.rs",
        "line": 355,
        "line_text": "return Err(OpsError::StagingDirectoryNotFound {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "StateNotFound",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 295,
        "line_text": "return Err(OpsError::StateNotFound {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 345,
        "line_text": "return Err(OpsError::StateNotFound {",
        "qualifier": "OpsError"
      },
      {
        "path": "crates/ops/src/maintenance.rs",
        "line": 610,
        "line_text": ".ok_or(OpsError::StateNotFound {",
        "qualifier": "OpsError"
      }
    ]
  },
  {
    "error_type": "OpsError",
    "variant": "VerificationFailed",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/ops/src/context.rs",
        "line": 96,
        "line_text": "return Err(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 131,
        "line_text": "return Err(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 251,
        "line_text": "return Err(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 857,
        "line_text": "sps2_errors::Error::from(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::OpsError"
      },
      {
        "path": "crates/ops/src/context.rs",
        "line": 876,
        "line_text": "sps2_errors::Error::from(sps2_errors::OpsError::VerificationFailed {",
        "qualifier": "sps2_errors::OpsError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "Corrupted",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/store/src/package.rs",
        "line": 149,
        "line_text": "return Err(PackageError::Corrupted {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/package.rs",
        "line": 292,
        "line_text": "return Err(PackageError::Corrupted {",
        "qualifier": "PackageError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "DependencyConflict",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/resolver/src/sat/mod.rs",
        "line": 298,
        "line_text": "Err(PackageError::DependencyConflict {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/sat/solver.rs",
        "line": 146,
        "line_text": "return Err(PackageError::DependencyConflict {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/sat/solver.rs",
        "line": 172,
        "line_text": "return Err(PackageError::DependencyConflict {",
        "qualifier": "PackageError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "DependencyCycle",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/resolver/src/graph.rs",
        "line": 226,
        "line_text": "return Err(sps2_errors::PackageError::DependencyCycle {",
        "qualifier": "sps2_errors::PackageError"
      },
      {
        "path": "crates/resolver/src/graph.rs",
        "line": 268,
        "line_text": "return Err(sps2_errors::PackageError::DependencyCycle {",
        "qualifier": "sps2_errors::PackageError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "IncompatibleFormat",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 185,
        "line_text": "Err(PackageError::IncompatibleFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 192,
        "line_text": "Err(PackageError::IncompatibleFormat {",
        "qualifier": "PackageError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "InvalidFormat",
    "count": 22,
    "occurrences": [
      {
        "path": "crates/index/src/models.rs",
        "line": 101,
        "line_text": "PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 115,
        "line_text": "PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 131,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 144,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 152,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 160,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 168,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 175,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/index/src/models.rs",
        "line": 231,
        "line_text": "_ => Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/install/src/validation/content/manifest.rs",
        "line": 56,
        "line_text": "Err(sps2_errors::PackageError::InvalidFormat {",
        "qualifier": "sps2_errors::PackageError"
      },
      {
        "path": "crates/install/src/validation/content/tar.rs",
        "line": 202,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/resolver.rs",
        "line": 549,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/resolver.rs",
        "line": 589,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/resolver.rs",
        "line": 599,
        "line_text": "String::from_utf8(tar_output.stdout).map_err(|_| PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/resolver.rs",
        "line": 604,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/resolver/src/resolver.rs",
        "line": 652,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 59,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 98,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 412,
        "line_text": "return Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 155,
        "line_text": "PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 163,
        "line_text": "Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/types/src/manifest.rs",
        "line": 121,
        "line_text": "_ => Err(PackageError::InvalidFormat {",
        "qualifier": "PackageError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "InvalidManifest",
    "count": 6,
    "occurrences": [
      {
        "path": "crates/store/src/manifest_io.rs",
        "line": 18,
        "line_text": ".map_err(|e| PackageError::InvalidManifest {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/store/src/manifest_io.rs",
        "line": 32,
        "line_text": ".map_err(|e| PackageError::InvalidManifest {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/types/src/manifest.rs",
        "line": 173,
        "line_text": "PackageError::InvalidManifest {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/types/src/manifest.rs",
        "line": 187,
        "line_text": "PackageError::InvalidManifest {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/types/src/manifest.rs",
        "line": 225,
        "line_text": "return Err(PackageError::InvalidManifest {",
        "qualifier": "PackageError"
      },
      {
        "path": "crates/types/src/manifest.rs",
        "line": 244,
        "line_text": "return Err(PackageError::InvalidManifest {",
        "qualifier": "PackageError"
      }
    ]
  },
  {
    "error_type": "PackageError",
    "variant": "ResolutionTimeout",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/resolver/src/resolver.rs",
        "line": 186,
        "line_text": ".map_err(|_| PackageError::ResolutionTimeout {",
        "qualifier": "PackageError"
      }
    ]
  },
  {
    "error_type": "PackageFormatVersionError",
    "variant": "InvalidFormat",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/types/src/format.rs",
        "line": 48,
        "line_text": "return Err(PackageFormatVersionError::InvalidFormat {",
        "qualifier": "PackageFormatVersionError"
      }
    ]
  },
  {
    "error_type": "PackageFormatVersionError",
    "variant": "InvalidHeader",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/types/src/format.rs",
        "line": 174,
        "line_text": "return Err(PackageFormatVersionError::InvalidHeader {",
        "qualifier": "PackageFormatVersionError"
      },
      {
        "path": "crates/types/src/format.rs",
        "line": 181,
        "line_text": "return Err(PackageFormatVersionError::InvalidHeader {",
        "qualifier": "PackageFormatVersionError"
      }
    ]
  },
  {
    "error_type": "PackageFormatVersionError",
    "variant": "InvalidNumber",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/types/src/format.rs",
        "line": 57,
        "line_text": ".map_err(|_| PackageFormatVersionError::InvalidNumber {",
        "qualifier": "PackageFormatVersionError"
      },
      {
        "path": "crates/types/src/format.rs",
        "line": 65,
        "line_text": ".map_err(|_| PackageFormatVersionError::InvalidNumber {",
        "qualifier": "PackageFormatVersionError"
      },
      {
        "path": "crates/types/src/format.rs",
        "line": 73,
        "line_text": ".map_err(|_| PackageFormatVersionError::InvalidNumber {",
        "qualifier": "PackageFormatVersionError"
      },
      {
        "path": "crates/types/src/format.rs",
        "line": 152,
        "line_text": "u16::try_from(self.minor).map_err(|_| PackageFormatVersionError::InvalidNumber {",
        "qualifier": "PackageFormatVersionError"
      },
      {
        "path": "crates/types/src/format.rs",
        "line": 159,
        "line_text": "u16::try_from(self.patch).map_err(|_| PackageFormatVersionError::InvalidNumber {",
        "qualifier": "PackageFormatVersionError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "BinaryOperationFailed",
    "count": 8,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 66,
        "line_text": "PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 146,
        "line_text": "Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 152,
        "line_text": "Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 221,
        "line_text": "return Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 311,
        "line_text": "Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 383,
        "line_text": "Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 455,
        "line_text": "Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 522,
        "line_text": "return Err(PlatformError::BinaryOperationFailed {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "CommandFailed",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 501,
        "line_text": ".map_err(|e| PlatformError::CommandFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 576,
        "line_text": "Err(PlatformError::CommandFailed {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "CommandNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/platform/src/implementations/macos/process.rs",
        "line": 139,
        "line_text": "Err(Error::from(PlatformError::CommandNotFound {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "ConfigError",
    "count": 6,
    "occurrences": [
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 132,
        "line_text": "let home_dir = dirs::home_dir().ok_or_else(|| PlatformError::ConfigError {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 147,
        "line_text": "PlatformError::ConfigError {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 153,
        "line_text": "serde_json::from_str(&contents).map_err(|e| PlatformError::ConfigError {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 168,
        "line_text": ".map_err(|e| PlatformError::ConfigError {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 174,
        "line_text": "serde_json::to_string_pretty(self).map_err(|e| PlatformError::ConfigError {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 180,
        "line_text": ".map_err(|e| PlatformError::ConfigError {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "FilesystemOperationFailed",
    "count": 41,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 81,
        "line_text": "PlatformError::FilesystemOperationFailed { message, .. } => BuildError::Failed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 94,
        "line_text": "PlatformError::FilesystemOperationFailed { operation, message } => {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 44,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 79,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 112,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 192,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 220,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 250,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 336,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 391,
        "line_text": "sps2_errors::PlatformError::FilesystemOperationFailed { message, .. } => {",
        "qualifier": "sps2_errors::PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 85,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 92,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 109,
        "line_text": "return Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 121,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 186,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 193,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 210,
        "line_text": "return Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 222,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 293,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 309,
        "line_text": "Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 318,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 327,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 340,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 407,
        "line_text": "return Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 413,
        "line_text": "return Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 420,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 427,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 444,
        "line_text": "return Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 453,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 466,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 473,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 480,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 547,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 554,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 564,
        "line_text": "return Err(PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 575,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 584,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 646,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 704,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 760,
        "line_text": "PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/filesystem.rs",
        "line": 813,
        "line_text": ".map_err(|e| PlatformError::FilesystemOperationFailed {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "MultipleToolsNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 437,
        "line_text": "return Err(PlatformError::MultipleToolsNotFound {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "PermissionDenied",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 103,
        "line_text": "PlatformError::PermissionDenied { message, .. } => {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "ProcessExecutionFailed",
    "count": 13,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 69,
        "line_text": "PlatformError::ProcessExecutionFailed { command, message }",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 76,
        "line_text": "PlatformError::ProcessExecutionFailed { command, message }",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 57,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 134,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 215,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 302,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 374,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 446,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 516,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 602,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 665,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/process.rs",
        "line": 70,
        "line_text": ".map_err(|e| PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/process.rs",
        "line": 129,
        "line_text": "Error::from(PlatformError::ProcessExecutionFailed {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "SigningFailed",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 65,
        "line_text": "PlatformError::SigningFailed { message, .. } => BuildError::SigningError { message },",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/implementations/macos/binary.rs",
        "line": 674,
        "line_text": "Err(PlatformError::SigningFailed {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "PlatformError",
    "variant": "ToolNotFound",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 488,
        "line_text": "Err(PlatformError::ToolNotFound {",
        "qualifier": "PlatformError"
      },
      {
        "path": "crates/platform/src/core/mod.rs",
        "line": 511,
        "line_text": "Err(PlatformError::ToolNotFound {",
        "qualifier": "PlatformError"
      }
    ]
  },
  {
    "error_type": "SigningError",
    "variant": "InvalidPublicKey",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/signing/src/lib.rs",
        "line": 95,
        "line_text": ".map_err(|e| SigningError::InvalidPublicKey(e.to_string()))?;",
        "qualifier": "SigningError"
      }
    ]
  },
  {
    "error_type": "SigningError",
    "variant": "InvalidSignatureFormat",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/install/src/parallel.rs",
        "line": 558,
        "line_text": "sps2_errors::SigningError::InvalidSignatureFormat(",
        "qualifier": "sps2_errors::SigningError"
      },
      {
        "path": "crates/signing/src/lib.rs",
        "line": 30,
        "line_text": "SigningError::InvalidSignatureFormat(\"Missing signature line\".to_string())",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/signing/src/lib.rs",
        "line": 33,
        "line_text": "SigningError::InvalidSignatureFormat(format!(\"Failed to decode signature line: {e}\"))",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/signing/src/lib.rs",
        "line": 36,
        "line_text": "return Err(SigningError::InvalidSignatureFormat(",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/signing/src/lib.rs",
        "line": 86,
        "line_text": ".map_err(|e| SigningError::InvalidSignatureFormat(e.to_string()))?;",
        "qualifier": "SigningError"
      }
    ]
  },
  {
    "error_type": "SigningError",
    "variant": "NoTrustedKeyFound",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/ops/src/keys.rs",
        "line": 252,
        "line_text": "Error::Signing(sps2_errors::SigningError::NoTrustedKeyFound {",
        "qualifier": "sps2_errors::SigningError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 55,
        "line_text": "SigningError::NoTrustedKeyFound { key_id } => {",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 84,
        "line_text": "return Err(Error::Signing(SigningError::NoTrustedKeyFound { key_id }));",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/ops/src/repository.rs",
        "line": 87,
        "line_text": "return Err(Error::Signing(SigningError::NoTrustedKeyFound { key_id }));",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/signing/src/lib.rs",
        "line": 106,
        "line_text": "Err(SigningError::NoTrustedKeyFound {",
        "qualifier": "SigningError"
      }
    ]
  },
  {
    "error_type": "SigningError",
    "variant": "VerificationFailed",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/errors/src/lib.rs",
        "line": 153,
        "line_text": "Self::Signing(SigningError::VerificationFailed {",
        "qualifier": "SigningError"
      },
      {
        "path": "crates/install/src/parallel.rs",
        "line": 551,
        "line_text": "sps2_errors::SigningError::VerificationFailed {",
        "qualifier": "sps2_errors::SigningError"
      },
      {
        "path": "crates/ops/src/keys.rs",
        "line": 235,
        "line_text": "sps2_errors::SigningError::VerificationFailed {",
        "qualifier": "sps2_errors::SigningError"
      },
      {
        "path": "crates/signing/src/lib.rs",
        "line": 99,
        "line_text": "Err(e) => Err(SigningError::VerificationFailed {",
        "qualifier": "SigningError"
      }
    ]
  },
  {
    "error_type": "StateError",
    "variant": "ActiveStateMissing",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/state/src/queries_runtime.rs",
        "line": 26,
        "line_text": "None => Err(StateError::ActiveStateMissing.into()),",
        "qualifier": "StateError"
      }
    ]
  },
  {
    "error_type": "StateError",
    "variant": "DatabaseError",
    "count": 33,
    "occurrences": [
      {
        "path": "crates/errors/src/lib.rs",
        "line": 139,
        "line_text": "Self::State(StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_migration.rs",
        "line": 94,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_migration.rs",
        "line": 135,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_migration.rs",
        "line": 181,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 44,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 56,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 84,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 126,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 151,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 159,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 179,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 187,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 213,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 242,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 276,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 314,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 351,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 392,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 435,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 472,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 504,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 549,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 589,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 622,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 655,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 694,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 721,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 782,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 831,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 860,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 897,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/file_queries_runtime.rs",
        "line": 942,
        "line_text": ".map_err(|e| StateError::DatabaseError {",
        "qualifier": "StateError"
      },
      {
        "path": "crates/state/src/lib.rs",
        "line": 64,
        "line_text": "sps2_errors::StateError::DatabaseError {",
        "qualifier": "sps2_errors::StateError"
      }
    ]
  },
  {
    "error_type": "StateError",
    "variant": "MigrationFailed",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/state/src/lib.rs",
        "line": 78,
        "line_text": "sps2_errors::StateError::MigrationFailed {",
        "qualifier": "sps2_errors::StateError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "ApfsCloneFailed",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 96,
        "line_text": "StorageError::ApfsCloneFailed { message }",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 45,
        "line_text": "StorageError::ApfsCloneFailed { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 47,
        "line_text": "_ => StorageError::ApfsCloneFailed {",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "AtomicRenameFailed",
    "count": 5,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 98,
        "line_text": "StorageError::AtomicRenameFailed { message }",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 80,
        "line_text": "StorageError::AtomicRenameFailed { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 82,
        "line_text": "_ => StorageError::AtomicRenameFailed {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 113,
        "line_text": "StorageError::AtomicRenameFailed { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 115,
        "line_text": "_ => StorageError::AtomicRenameFailed {",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "CorruptedData",
    "count": 2,
    "occurrences": [
      {
        "path": "crates/hash/src/lib.rs",
        "line": 90,
        "line_text": "let bytes = hex::decode(s).map_err(|e| StorageError::CorruptedData {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/lib.rs",
        "line": 106,
        "line_text": "_ => Err(StorageError::CorruptedData {",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "DirectoryNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/store/src/lib.rs",
        "line": 378,
        "line_text": "return Err(sps2_errors::StorageError::DirectoryNotFound {",
        "qualifier": "sps2_errors::StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "IoError",
    "count": 66,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 100,
        "line_text": "StorageError::IoError { message }",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/errors/src/platform.rs",
        "line": 106,
        "line_text": "_ => StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/file_hasher.rs",
        "line": 79,
        "line_text": ".map_err(|_| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/file_hasher.rs",
        "line": 167,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/file_hasher.rs",
        "line": 180,
        "line_text": "collector_handle.await.map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/file_hasher.rs",
        "line": 190,
        "line_text": "return Err(StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/file_hasher.rs",
        "line": 229,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/file_hasher.rs",
        "line": 247,
        "line_text": "return Err(StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/hash/src/lib.rs",
        "line": 459,
        "line_text": ".map_err(|_| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/index/src/cache.rs",
        "line": 58,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/index/src/cache.rs",
        "line": 69,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/index/src/cache.rs",
        "line": 76,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/index/src/cache.rs",
        "line": 98,
        "line_text": "let modified = metadata.modified().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/index/src/cache.rs",
        "line": 151,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/install/src/pipeline/staging.rs",
        "line": 173,
        "line_text": ".ok_or_else(|| sps2_errors::StorageError::IoError {",
        "qualifier": "sps2_errors::StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 28,
        "line_text": "let metadata = std::fs::metadata(src).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 193,
        "line_text": "StorageError::IoError { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 195,
        "line_text": "_ => StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 221,
        "line_text": "StorageError::IoError { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 223,
        "line_text": "_ => StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 251,
        "line_text": "StorageError::IoError { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 253,
        "line_text": "_ => StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 302,
        "line_text": "StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 337,
        "line_text": "StorageError::IoError { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 339,
        "line_text": "_ => StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 392,
        "line_text": "StorageError::IoError { message }.into()",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/platform/src/fs.rs",
        "line": 394,
        "line_text": "_ => StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/repository/src/lib.rs",
        "line": 69,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 123,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 140,
        "line_text": "let mut file = builder.into_inner().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 144,
        "line_text": "file.flush().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 148,
        "line_text": "file.sync_all().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 171,
        "line_text": "let temp_file = tempfile::NamedTempFile::new().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 183,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 190,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 197,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 204,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 217,
        "line_text": "let file = File::open(&temp_path_for_task).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 304,
        "line_text": "let temp_file = tempfile::NamedTempFile::new().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 316,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 323,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 330,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 337,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 431,
        "line_text": "let entries = std::fs::read_dir(src).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 436,
        "line_text": "let entry = entry.map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 444,
        "line_text": "let metadata = entry.metadata().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 452,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 460,
        "line_text": "let mut file = std::fs::File::open(&path).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 466,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 471,
        "line_text": "let target = std::fs::read_link(&path).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/archive.rs",
        "line": 481,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/file_store.rs",
        "line": 118,
        "line_text": "let parent_dir = dest_path.parent().ok_or_else(|| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/file_store.rs",
        "line": 134,
        "line_text": "return Err(StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/file_store.rs",
        "line": 164,
        "line_text": "Err(StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 96,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 105,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/format_detection.rs",
        "line": 128,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 116,
        "line_text": "let temp_dir = tempfile::tempdir().map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 162,
        "line_text": "serde_json::to_string_pretty(&file_results).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 198,
        "line_text": "StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 233,
        "line_text": "StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 244,
        "line_text": "StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 252,
        "line_text": "Err(StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 465,
        "line_text": ".map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/lib.rs",
        "line": 507,
        "line_text": "serde_json::to_string_pretty(&file_results).map_err(|e| StorageError::IoError {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/package.rs",
        "line": 228,
        "line_text": "StorageError::IoError {",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "PackageNotFound",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/store/src/lib.rs",
        "line": 412,
        "line_text": "return Err(StorageError::PackageNotFound {",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "PathNotFound",
    "count": 4,
    "occurrences": [
      {
        "path": "crates/hash/src/lib.rs",
        "line": 185,
        "line_text": ".map_err(|_| StorageError::PathNotFound {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/index/src/cache.rs",
        "line": 42,
        "line_text": ".map_err(|_e| StorageError::PathNotFound {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/file_store.rs",
        "line": 196,
        "line_text": "return Err(StorageError::PathNotFound {",
        "qualifier": "StorageError"
      },
      {
        "path": "crates/store/src/file_store.rs",
        "line": 349,
        "line_text": "StorageError::PathNotFound {",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "StorageError",
    "variant": "PermissionDenied",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/errors/src/platform.rs",
        "line": 104,
        "line_text": "StorageError::PermissionDenied { path: message }",
        "qualifier": "StorageError"
      }
    ]
  },
  {
    "error_type": "TryAcquireError",
    "variant": "Closed",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/resources/src/semaphore.rs",
        "line": 58,
        "line_text": "Err(tokio::sync::TryAcquireError::Closed) => Err(InstallError::ConcurrencyError {",
        "qualifier": "tokio::sync::TryAcquireError"
      }
    ]
  },
  {
    "error_type": "TryAcquireError",
    "variant": "NoPermits",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/resources/src/semaphore.rs",
        "line": 57,
        "line_text": "Err(tokio::sync::TryAcquireError::NoPermits) => Ok(None),",
        "qualifier": "tokio::sync::TryAcquireError"
      }
    ]
  },
  {
    "error_type": "VersionError",
    "variant": "InvalidConstraint",
    "count": 3,
    "occurrences": [
      {
        "path": "crates/types/src/package.rs",
        "line": 68,
        "line_text": "return Err(sps2_errors::VersionError::InvalidConstraint {",
        "qualifier": "sps2_errors::VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 96,
        "line_text": "Err(VersionError::InvalidConstraint {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 179,
        "line_text": "return Err(VersionError::InvalidConstraint {",
        "qualifier": "VersionError"
      }
    ]
  },
  {
    "error_type": "VersionError",
    "variant": "InvalidVersion",
    "count": 1,
    "occurrences": [
      {
        "path": "crates/types/src/manifest.rs",
        "line": 106,
        "line_text": "sps2_errors::VersionError::InvalidVersion {",
        "qualifier": "sps2_errors::VersionError"
      }
    ]
  },
  {
    "error_type": "VersionError",
    "variant": "ParseError",
    "count": 8,
    "occurrences": [
      {
        "path": "crates/errors/src/lib.rs",
        "line": 131,
        "line_text": "Self::Version(VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 55,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 61,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 67,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 73,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 79,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 85,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      },
      {
        "path": "crates/types/src/version.rs",
        "line": 91,
        "line_text": "Version::parse(version_str.trim()).map_err(|e| VersionError::ParseError {",
        "qualifier": "VersionError"
      }
    ]
  }
]