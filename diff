diff --git a/Cargo.lock b/Cargo.lock
index 0dcb2db..973b4f4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -557,6 +557,16 @@ dependencies = [
  "piper",
 ]
 
+[[package]]
+name = "bstr"
+version = "1.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "234113d19d0d7d613b40e86fb654acf958910802bcceab913a4f9e7cda03b1a4"
+dependencies = [
+ "memchr",
+ "serde",
+]
+
 [[package]]
 name = "bumpalo"
 version = "3.17.0"
@@ -632,6 +642,28 @@ dependencies = [
  "windows-link",
 ]
 
+[[package]]
+name = "chrono-tz"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "93698b29de5e97ad0ae26447b344c482a7284c737d9ddc5f9e52b74a336671bb"
+dependencies = [
+ "chrono",
+ "chrono-tz-build",
+ "phf",
+]
+
+[[package]]
+name = "chrono-tz-build"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0c088aee841df9c3041febbb73934cfc39708749bf96dc827e3359cd39ef11b1"
+dependencies = [
+ "parse-zoneinfo",
+ "phf",
+ "phf_codegen",
+]
+
 [[package]]
 name = "cipher"
 version = "0.4.4"
@@ -1011,6 +1043,12 @@ dependencies = [
  "unicode-xid",
 ]
 
+[[package]]
+name = "deunicode"
+version = "1.6.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "abd57806937c9cc163efc8ea3910e00a62e2aeb0b8119f1793a978088f8f6b04"
+
 [[package]]
 name = "diff"
 version = "0.1.13"
@@ -1269,9 +1307,9 @@ checksum = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80"
 
 [[package]]
 name = "flate2"
-version = "1.1.1"
+version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7ced92e76e966ca2fd84c8f7aa01a4aea65b0eb6648d72f7c8f3e2764a67fece"
+checksum = "4a3d7db9596fecd151c5f638c0ee5d5bd487b6e0ea232e5dc96d5250f6f94b1d"
 dependencies = [
  "crc32fast",
  "libz-rs-sys",
@@ -1490,6 +1528,45 @@ version = "0.31.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f"
 
+[[package]]
+name = "git2"
+version = "0.20.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2deb07a133b1520dc1a5690e9bd08950108873d7ed5de38dcc74d3b5ebffa110"
+dependencies = [
+ "bitflags 2.9.1",
+ "libc",
+ "libgit2-sys",
+ "log",
+ "openssl-probe",
+ "openssl-sys",
+ "url",
+]
+
+[[package]]
+name = "globset"
+version = "0.4.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "54a1028dfc5f5df5da8a56a73e6c153c9a9708ec57232470703592a3f18e49f5"
+dependencies = [
+ "aho-corasick",
+ "bstr",
+ "log",
+ "regex-automata 0.4.9",
+ "regex-syntax 0.8.5",
+]
+
+[[package]]
+name = "globwalk"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0bf760ebf69878d9fd8f110c89703d90ce35095324d1f1edcb595c63945ee757"
+dependencies = [
+ "bitflags 2.9.1",
+ "ignore",
+ "walkdir",
+]
+
 [[package]]
 name = "gloo-timers"
 version = "0.3.0"
@@ -1692,6 +1769,15 @@ dependencies = [
  "url",
 ]
 
+[[package]]
+name = "humansize"
+version = "2.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6cb51c9a029ddc91b07a787f1d86b53ccfa49b0e86688c946ebe8d3555685dd7"
+dependencies = [
+ "libm",
+]
+
 [[package]]
 name = "hyper"
 version = "0.14.32"
@@ -1924,6 +2010,22 @@ dependencies = [
  "icu_properties",
 ]
 
+[[package]]
+name = "ignore"
+version = "0.4.23"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6d89fd380afde86567dfba715db065673989d6253f42b88179abd3eae47bda4b"
+dependencies = [
+ "crossbeam-deque",
+ "globset",
+ "log",
+ "memchr",
+ "regex-automata 0.4.9",
+ "same-file",
+ "walkdir",
+ "winapi-util",
+]
+
 [[package]]
 name = "indenter"
 version = "0.3.3"
@@ -2149,6 +2251,20 @@ version = "0.2.172"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d750af042f7ef4f724306de029d18836c26c1765a54a6a3f094cbd23a7267ffa"
 
+[[package]]
+name = "libgit2-sys"
+version = "0.18.1+1.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e1dcb20f84ffcdd825c7a311ae347cce604a6f084a767dec4a4929829645290e"
+dependencies = [
+ "cc",
+ "libc",
+ "libssh2-sys",
+ "libz-sys",
+ "openssl-sys",
+ "pkg-config",
+]
+
 [[package]]
 name = "liblzma"
 version = "0.4.1"
@@ -2197,6 +2313,20 @@ dependencies = [
  "vcpkg",
 ]
 
+[[package]]
+name = "libssh2-sys"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "220e4f05ad4a218192533b300327f5150e809b54c4ec83b5a1d91833601811b9"
+dependencies = [
+ "cc",
+ "libc",
+ "libz-sys",
+ "openssl-sys",
+ "pkg-config",
+ "vcpkg",
+]
+
 [[package]]
 name = "libz-rs-sys"
 version = "0.5.1"
@@ -2206,6 +2336,18 @@ dependencies = [
  "zlib-rs",
 ]
 
+[[package]]
+name = "libz-sys"
+version = "1.1.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8b70e7a7df205e92a1a4cd9aaae7898dac0aa555503cc0a649494d0d60e7651d"
+dependencies = [
+ "cc",
+ "libc",
+ "pkg-config",
+ "vcpkg",
+]
+
 [[package]]
 name = "linux-raw-sys"
 version = "0.4.15"
@@ -2630,6 +2772,15 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
+[[package]]
+name = "parse-zoneinfo"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1f2a05b18d44e2957b88f96ba460715e295bc1d7510468a2f3d3b44535d26c24"
+dependencies = [
+ "regex",
+]
+
 [[package]]
 name = "paste"
 version = "1.0.15"
@@ -2661,6 +2812,51 @@ version = "2.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e"
 
+[[package]]
+name = "pest"
+version = "2.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "198db74531d58c70a361c42201efde7e2591e976d518caf7662a47dc5720e7b6"
+dependencies = [
+ "memchr",
+ "thiserror 2.0.12",
+ "ucd-trie",
+]
+
+[[package]]
+name = "pest_derive"
+version = "2.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d725d9cfd79e87dccc9341a2ef39d1b6f6353d68c4b33c177febbe1a402c97c5"
+dependencies = [
+ "pest",
+ "pest_generator",
+]
+
+[[package]]
+name = "pest_generator"
+version = "2.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "db7d01726be8ab66ab32f9df467ae8b1148906685bbe75c82d1e65d7f5b3f841"
+dependencies = [
+ "pest",
+ "pest_meta",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.101",
+]
+
+[[package]]
+name = "pest_meta"
+version = "2.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7f9f832470494906d1fca5329f8ab5791cc60beb230c74815dff541cbd2b5ca0"
+dependencies = [
+ "once_cell",
+ "pest",
+ "sha2",
+]
+
 [[package]]
 name = "petgraph"
 version = "0.6.5"
@@ -2671,6 +2867,35 @@ dependencies = [
  "indexmap",
 ]
 
+[[package]]
+name = "phf"
+version = "0.11.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1fd6780a80ae0c52cc120a26a1a42c1ae51b247a253e4e06113d23d2c2edd078"
+dependencies = [
+ "phf_shared",
+]
+
+[[package]]
+name = "phf_codegen"
+version = "0.11.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "aef8048c789fa5e851558d709946d6d79a8ff88c0440c587967f8e94bfb1216a"
+dependencies = [
+ "phf_generator",
+ "phf_shared",
+]
+
+[[package]]
+name = "phf_generator"
+version = "0.11.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3c80231409c20246a13fddb31776fb942c38553c51e871f8cbd687a4cfb5843d"
+dependencies = [
+ "phf_shared",
+ "rand 0.8.5",
+]
+
 [[package]]
 name = "phf_shared"
 version = "0.11.3"
@@ -3012,9 +3237,9 @@ checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
 
 [[package]]
 name = "reqwest"
-version = "0.12.19"
+version = "0.12.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a2f8e5513d63f2e5b386eb5106dc67eaf3f84e95258e210489136b8b92ad6119"
+checksum = "eabf4c97d9130e2bf606614eb937e86edac8292eaa6f422f995d7e8de1eb1813"
 dependencies = [
  "base64 0.22.1",
  "bytes",
@@ -3029,12 +3254,10 @@ dependencies = [
  "hyper-rustls",
  "hyper-tls",
  "hyper-util",
- "ipnet",
  "js-sys",
  "log",
  "mime",
  "native-tls",
- "once_cell",
  "percent-encoding",
  "pin-project-lite",
  "rustls-pki-types",
@@ -3496,6 +3719,16 @@ dependencies = [
  "autocfg",
 ]
 
+[[package]]
+name = "slug"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "882a80f72ee45de3cc9a5afeb2da0331d58df69e4e7d8eeb5d3c7784ae67e724"
+dependencies = [
+ "deunicode",
+ "wasm-bindgen",
+]
+
 [[package]]
 name = "smallvec"
 version = "1.15.0"
@@ -3639,6 +3872,29 @@ dependencies = [
  "toml",
 ]
 
+[[package]]
+name = "sps2-drafter"
+version = "0.1.0"
+dependencies = [
+ "flate2",
+ "git2",
+ "regex",
+ "serde",
+ "serde_json",
+ "sps2-errors",
+ "sps2-events",
+ "sps2-hash",
+ "sps2-net",
+ "tar",
+ "tempfile",
+ "tera",
+ "thiserror 2.0.12",
+ "tokio",
+ "toml",
+ "walkdir",
+ "zip",
+]
+
 [[package]]
 name = "sps2-errors"
 version = "0.1.0"
@@ -3770,6 +4026,7 @@ dependencies = [
  "serde_json",
  "sps2-audit",
  "sps2-builder",
+ "sps2-drafter",
  "sps2-errors",
  "sps2-events",
  "sps2-hash",
@@ -4318,6 +4575,28 @@ dependencies = [
  "windows-sys 0.59.0",
 ]
 
+[[package]]
+name = "tera"
+version = "1.20.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ab9d851b45e865f178319da0abdbfe6acbc4328759ff18dafc3a41c16b4cd2ee"
+dependencies = [
+ "chrono",
+ "chrono-tz",
+ "globwalk",
+ "humansize",
+ "lazy_static",
+ "percent-encoding",
+ "pest",
+ "pest_derive",
+ "rand 0.8.5",
+ "regex",
+ "serde",
+ "serde_json",
+ "slug",
+ "unic-segment",
+]
+
 [[package]]
 name = "term"
 version = "0.7.0"
@@ -4688,12 +4967,68 @@ version = "1.18.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f"
 
+[[package]]
+name = "ucd-trie"
+version = "0.1.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2896d95c02a80c6d6a5d6e953d479f5ddf2dfdb6a244441010e373ac0fb88971"
+
 [[package]]
 name = "unarray"
 version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "eaea85b334db583fe3274d12b4cd1880032beab409c0d774be044d4480ab9a94"
 
+[[package]]
+name = "unic-char-property"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221"
+dependencies = [
+ "unic-char-range",
+]
+
+[[package]]
+name = "unic-char-range"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc"
+
+[[package]]
+name = "unic-common"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc"
+
+[[package]]
+name = "unic-segment"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e4ed5d26be57f84f176157270c112ef57b86debac9cd21daaabbe56db0f88f23"
+dependencies = [
+ "unic-ucd-segment",
+]
+
+[[package]]
+name = "unic-ucd-segment"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2079c122a62205b421f499da10f3ee0f7697f012f55b675e002483c73ea34700"
+dependencies = [
+ "unic-char-property",
+ "unic-char-range",
+ "unic-ucd-version",
+]
+
+[[package]]
+name = "unic-ucd-version"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4"
+dependencies = [
+ "unic-common",
+]
+
 [[package]]
 name = "unicode-bidi"
 version = "0.3.18"
diff --git a/Cargo.toml b/Cargo.toml
index 60a7dd3..8a6d685 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -4,6 +4,7 @@ members = [
     "apps/sps2",
     "crates/builder",
     "crates/config",
+    "crates/drafter",
     "crates/errors",
     "crates/events",
     "crates/hash",
@@ -40,7 +41,7 @@ sqlx = { version = "0.8.6", features = [
 ] }
 
 # HTTP
-reqwest = { version = "0.12.19", features = ["json", "stream"] }
+reqwest = { version = "0.12.20", features = ["json", "stream"] }
 
 # Serialization
 serde = { version = "1.0.219", features = ["derive"] }
diff --git a/apps/sps2/src/cli.rs b/apps/sps2/src/cli.rs
index 6d98691..eddabf0 100644
--- a/apps/sps2/src/cli.rs
+++ b/apps/sps2/src/cli.rs
@@ -39,6 +39,31 @@ pub struct GlobalArgs {
     pub config: Option<PathBuf>,
 }
 
+/// Draft command source arguments
+#[derive(Debug, Parser)]
+#[clap(group(
+    clap::ArgGroup::new("source")
+        .required(true)
+        .args(&["path", "git", "url", "archive"]),
+))]
+pub struct DraftSource {
+    /// Local source code directory
+    #[clap(long, short = 'p', value_name = "PATH")]
+    pub path: Option<PathBuf>,
+
+    /// Git repository URL
+    #[clap(long, short = 'g', value_name = "URL")]
+    pub git: Option<String>,
+
+    /// Direct URL to source archive
+    #[clap(long, short = 'u', value_name = "URL")]
+    pub url: Option<String>,
+
+    /// Local archive file
+    #[clap(long, short = 'a', value_name = "PATH")]
+    pub archive: Option<PathBuf>,
+}
+
 /// Available commands
 #[derive(Subcommand)]
 pub enum Commands {
@@ -148,6 +173,16 @@ pub enum Commands {
         command: VulnDbCommands,
     },
 
+    /// Draft a new build recipe from a source
+    Draft {
+        #[command(flatten)]
+        source: DraftSource,
+
+        /// Path to save the generated recipe (defaults to './<name>-<version>.star')
+        #[clap(short, long)]
+        output: Option<PathBuf>,
+    },
+
     /// Audit installed packages for vulnerabilities
     Audit {
         /// Scan all packages (default: all)
@@ -239,6 +274,7 @@ impl Commands {
             Commands::VulnDb { .. } => "vulndb",
             Commands::Audit { .. } => "audit",
             Commands::SelfUpdate { .. } => "self-update",
+            Commands::Draft { .. } => "draft",
         }
     }
 
diff --git a/apps/sps2/src/main.rs b/apps/sps2/src/main.rs
index 5059438..30c28a0 100644
--- a/apps/sps2/src/main.rs
+++ b/apps/sps2/src/main.rs
@@ -273,6 +273,21 @@ async fn execute_command(
             let result = sps2_ops::self_update(&ctx, skip_verify, force).await?;
             Ok(OperationResult::Success(result))
         }
+
+        Commands::Draft { source, output } => {
+            sps2_ops::draft_recipe(
+                &ctx,
+                source.path,
+                source.git,
+                source.url,
+                source.archive,
+                output,
+            )
+            .await?;
+            Ok(OperationResult::Success(
+                "Recipe draft generated successfully".to_string(),
+            ))
+        }
     }
 }
 
diff --git a/crates/builder/src/api.rs b/crates/builder/src/api.rs
index 3ce7fa4..478a856 100644
--- a/crates/builder/src/api.rs
+++ b/crates/builder/src/api.rs
@@ -120,6 +120,68 @@ impl BuilderApi {
         Ok(download_path)
     }
 
+    /// Clone a git repository
+    ///
+    /// # Errors
+    ///
+    /// Returns an error if:
+    /// - Network access is disabled
+    /// - The URL is invalid
+    /// - The git clone fails
+    pub async fn git(&mut self, url: &str, ref_: &str) -> Result<PathBuf, Error> {
+        if !self.allow_network {
+            return Err(BuildError::NetworkDisabled {
+                url: url.to_string(),
+            }
+            .into());
+        }
+
+        // Check if already cloned
+        if let Some(path) = self.downloads.get(url) {
+            return Ok(path.clone());
+        }
+
+        // Extract repository name from URL
+        let repo_name = url
+            .split('/')
+            .next_back()
+            .and_then(|s| s.strip_suffix(".git").or(Some(s)))
+            .ok_or_else(|| BuildError::InvalidUrl {
+                url: url.to_string(),
+            })?;
+
+        let clone_path = self.working_dir.join(repo_name);
+
+        // Clone using git command (better compatibility than git2 crate)
+        let output = tokio::process::Command::new("git")
+            .args([
+                "clone",
+                "--depth",
+                "1",
+                "--branch",
+                ref_,
+                url,
+                &clone_path.display().to_string(),
+            ])
+            .current_dir(&self.working_dir)
+            .output()
+            .await?;
+
+        if !output.status.success() {
+            return Err(BuildError::GitCloneFailed {
+                message: format!(
+                    "Failed to clone {}: {}",
+                    url,
+                    String::from_utf8_lossy(&output.stderr)
+                ),
+            }
+            .into());
+        }
+
+        self.downloads.insert(url.to_string(), clone_path.clone());
+        Ok(clone_path)
+    }
+
     /// Apply a patch file
     ///
     /// # Errors
diff --git a/crates/builder/src/recipe.rs b/crates/builder/src/recipe.rs
index 52aad4e..409ec31 100644
--- a/crates/builder/src/recipe.rs
+++ b/crates/builder/src/recipe.rs
@@ -123,6 +123,13 @@ async fn execute_build_step(
         BuildStep::Fetch { url, blake3 } => {
             api.fetch(url, blake3).await?;
         }
+        BuildStep::Extract => {
+            // Extract is handled automatically after fetch
+            api.extract_downloads().await?;
+        }
+        BuildStep::Git { url, ref_ } => {
+            api.git(url, ref_).await?;
+        }
         BuildStep::Configure { args } => {
             api.configure(args, environment).await?;
         }
diff --git a/crates/builder/src/starlark_bridge.rs b/crates/builder/src/starlark_bridge.rs
index 4d094ef..2422dec 100644
--- a/crates/builder/src/starlark_bridge.rs
+++ b/crates/builder/src/starlark_bridge.rs
@@ -41,6 +41,10 @@ impl BuildExecutor for StarlarkBridge {
         self.api.fetch(url, hash).await
     }
 
+    async fn git(&mut self, url: &str, ref_: &str) -> Result<PathBuf, Error> {
+        self.api.git(url, ref_).await
+    }
+
     async fn make(&mut self, args: &[String]) -> Result<(), Error> {
         self.api.make(args, &self.env).await?;
         Ok(())
diff --git a/crates/errors/src/build.rs b/crates/errors/src/build.rs
index ec0938a..4b684e0 100644
--- a/crates/errors/src/build.rs
+++ b/crates/errors/src/build.rs
@@ -92,4 +92,19 @@ pub enum BuildError {
 
     #[error("license compliance error: {message}")]
     LicenseComplianceError { message: String },
+
+    #[error("draft metadata extraction failed: {message}")]
+    DraftMetadataFailed { message: String },
+
+    #[error("draft template rendering failed: {message}")]
+    DraftTemplateFailed { message: String },
+
+    #[error("draft source preparation failed: {message}")]
+    DraftSourceFailed { message: String },
+
+    #[error("unsupported archive format: {format}")]
+    UnsupportedArchiveFormat { format: String },
+
+    #[error("git clone failed: {message}")]
+    GitCloneFailed { message: String },
 }
diff --git a/crates/ops/Cargo.toml b/crates/ops/Cargo.toml
index c655878..75a819b 100644
--- a/crates/ops/Cargo.toml
+++ b/crates/ops/Cargo.toml
@@ -21,6 +21,7 @@ sps2-package = { path = "../package" }
 sps2-index = { path = "../index" }
 sps2-audit = { path = "../audit" }
 sps2-hash = { path = "../hash" }
+sps2-drafter = { path = "../drafter" }
 serde = { workspace = true }
 serde_json = { workspace = true }
 tokio = { workspace = true, features = ["fs"] }
diff --git a/crates/ops/src/lib.rs b/crates/ops/src/lib.rs
index 9d7029d..8ed566b 100644
--- a/crates/ops/src/lib.rs
+++ b/crates/ops/src/lib.rs
@@ -22,6 +22,7 @@ mod types;
 
 // Import command modules
 mod build;
+mod draft;
 mod install;
 mod uninstall;
 mod update;
@@ -42,6 +43,7 @@ pub use types::{
 
 // Re-export operation functions
 pub use build::build;
+pub use draft::draft_recipe;
 pub use install::install;
 pub use small_ops::{
     audit, check_health, cleanup, history, list_packages, package_info, reposync, rollback,
diff --git a/crates/package/src/recipe.rs b/crates/package/src/recipe.rs
index c831a36..ae128e5 100644
--- a/crates/package/src/recipe.rs
+++ b/crates/package/src/recipe.rs
@@ -66,6 +66,11 @@ pub enum BuildStep {
         url: String,
         blake3: String,
     },
+    Extract,
+    Git {
+        url: String,
+        ref_: String,
+    },
     ApplyPatch {
         path: String,
     },
diff --git a/crates/package/src/starlark/context.rs b/crates/package/src/starlark/context.rs
index 04b119b..4721c52 100644
--- a/crates/package/src/starlark/context.rs
+++ b/crates/package/src/starlark/context.rs
@@ -22,6 +22,7 @@ use std::sync::Arc;
 #[async_trait::async_trait]
 pub trait BuildExecutor: Send + Sync + std::fmt::Debug {
     async fn fetch(&mut self, url: &str, hash: &str) -> Result<PathBuf, Error>;
+    async fn git(&mut self, url: &str, ref_: &str) -> Result<PathBuf, Error>;
     async fn make(&mut self, args: &[String]) -> Result<(), Error>;
     async fn install(&mut self) -> Result<(), Error>;
     async fn configure(&mut self, args: &[String]) -> Result<(), Error>;
@@ -216,6 +217,21 @@ pub fn build_context_functions(builder: &mut GlobalsBuilder) {
         Ok(NoneType)
     }
 
+    /// Clone a git repository
+    fn git<'v>(ctx: Value<'v>, url: &str, ref_: Option<&str>) -> anyhow::Result<NoneType> {
+        // Unpack BuildContext from the Value
+        let build_ctx = ctx
+            .downcast_ref::<BuildContext>()
+            .ok_or_else(|| anyhow::anyhow!("First argument must be a BuildContext"))?;
+
+        let git_ref = ref_.unwrap_or("HEAD").to_string();
+        build_ctx.add_step(BuildStep::Git {
+            url: url.to_string(),
+            ref_: git_ref,
+        });
+        Ok(NoneType)
+    }
+
     /// Apply a patch file
     fn apply_patch<'v>(ctx: Value<'v>, path: &str) -> anyhow::Result<NoneType> {
         // Unpack BuildContext from the Value
diff --git a/test_build/cmake/recipe.star b/test_build/cmake/recipe.star
deleted file mode 100644
index 0aa3684..0000000
--- a/test_build/cmake/recipe.star
+++ /dev/null
@@ -1,16 +0,0 @@
-def metadata():
-    """Package metadata"""
-    return {
-        "name": "hello-cmake",
-        "version": "1.0.0",
-        "description": "Test CMake build system",
-        "license": "MIT"
-    }
-
-def build(ctx):
-    # Clean up any leftover files from previous builds
-    cleanup(ctx)
-    
-    # Use the cmake() function which handles cmake configuration and build
-    # Don't pass CMAKE_INSTALL_PREFIX manually, let the build system handle it
-    cmake(ctx, ["-DCMAKE_BUILD_TYPE=Release"])
\ No newline at end of file
diff --git a/test_build/packages/hello-cmake-1.0.0-1.arm64.sp b/test_build/packages/hello-cmake-1.0.0-1.arm64.sp
deleted file mode 100644
index 8a98196..0000000
Binary files a/test_build/packages/hello-cmake-1.0.0-1.arm64.sp and /dev/null differ
